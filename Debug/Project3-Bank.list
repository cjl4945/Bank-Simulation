
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  0800c148  0800c148  0001c148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca78  0800ca78  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca78  0800ca78  0001ca78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca80  0800ca80  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca80  0800ca80  0001ca80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca84  0800ca84  0001ca84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ca88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee4  200001e0  0800cc68  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020c4  0800cc68  000220c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad6b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e67  00000000  00000000  0003af7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  0003ede8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  000406e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b7b0  00000000  00000000  00041e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cab7  00000000  00000000  0006d600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100932  00000000  00000000  0008a0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018a9e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079ac  00000000  00000000  0018aa3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c130 	.word	0x0800c130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c130 	.word	0x0800c130

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <check_btn1>:
 *      Author: chaselewis
 */
#include "MFS.h"

//change later so it returns whether or not the button is pressed
int check_btn1(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(SHLD_A1_GPIO_Port, SHLD_A1_Pin)==GPIO_PIN_RESET) return 1;
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f002 f9ad 	bl	8003214 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <check_btn1+0x18>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <check_btn1+0x1a>
	return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <check_btn2>:


//change later so it returns whether or not the button is pressed
int check_btn2(){
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(SHLD_A2_GPIO_Port, SHLD_A2_Pin)==GPIO_PIN_RESET) return 1;
 8000ece:	2110      	movs	r1, #16
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed4:	f002 f99e 	bl	8003214 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <check_btn2+0x18>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <check_btn2+0x1a>
	return 0;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <check_btn3>:

//change later so it returns whether or not the button is pressed
int check_btn3(){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(SHLD_A3_GPIO_Port, SHLD_A3_Pin)==GPIO_PIN_RESET) return 1;
 8000eec:	2101      	movs	r1, #1
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <check_btn3+0x1c>)
 8000ef0:	f002 f990 	bl	8003214 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <check_btn3+0x16>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <check_btn3+0x18>
	return 0;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	48000400 	.word	0x48000400

08000f08 <shiftOut>:

void shiftOut(uint8_t val)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	for(int ii=0x80; ii; ii>>=1) {
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	e01f      	b.n	8000f58 <shiftOut+0x50>
		HAL_GPIO_WritePin(SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f22:	f002 f98f 	bl	8003244 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, (val&ii)!=0);
 8000f26:	79fa      	ldrb	r2, [r7, #7]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf14      	ite	ne
 8000f30:	2301      	movne	r3, #1
 8000f32:	2300      	moveq	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f002 f980 	bl	8003244 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f002 f979 	bl	8003244 <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	105b      	asrs	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1dc      	bne.n	8000f18 <shiftOut+0x10>
	}
}
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <displayNum>:
  HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
}



void displayNum(int count){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

	int dig1 = count / 1000;					//divide the number to get the thousands place
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a50      	ldr	r2, [pc, #320]	; (80010b4 <displayNum+0x14c>)
 8000f74:	fb82 1203 	smull	r1, r2, r2, r3
 8000f78:	1192      	asrs	r2, r2, #6
 8000f7a:	17db      	asrs	r3, r3, #31
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
	int dig2 = (count - (1000 * dig1)) / 100;	//get the hundreds place
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4a4d      	ldr	r2, [pc, #308]	; (80010b8 <displayNum+0x150>)
 8000f84:	fb03 f202 	mul.w	r2, r3, r2
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a4b      	ldr	r2, [pc, #300]	; (80010bc <displayNum+0x154>)
 8000f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f92:	1152      	asrs	r2, r2, #5
 8000f94:	17db      	asrs	r3, r3, #31
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	613b      	str	r3, [r7, #16]
	int dig3 = (count - (100 * dig2)) / 10;		//get the tens places
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000fa0:	fb03 f202 	mul.w	r2, r3, r2
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a45      	ldr	r2, [pc, #276]	; (80010c0 <displayNum+0x158>)
 8000faa:	fb82 1203 	smull	r1, r2, r2, r3
 8000fae:	1092      	asrs	r2, r2, #2
 8000fb0:	17db      	asrs	r3, r3, #31
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	60fb      	str	r3, [r7, #12]
	int dig4 = count % 10;						//get the ones place
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <displayNum+0x158>)
 8000fba:	fb83 1302 	smull	r1, r3, r3, r2
 8000fbe:	1099      	asrs	r1, r3, #2
 8000fc0:	17d3      	asrs	r3, r2, #31
 8000fc2:	1ac9      	subs	r1, r1, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	60bb      	str	r3, [r7, #8]

	// Display the digits
	//none zeros with get displayed successively
	if (dig1 != 0){
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d018      	beq.n	8001008 <displayNum+0xa0>
		HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2120      	movs	r1, #32
 8000fda:	483a      	ldr	r0, [pc, #232]	; (80010c4 <displayNum+0x15c>)
 8000fdc:	f002 f932 	bl	8003244 <HAL_GPIO_WritePin>
		shiftOut(SEGMENT_MAP[dig1]);
 8000fe0:	4a39      	ldr	r2, [pc, #228]	; (80010c8 <displayNum+0x160>)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff8d 	bl	8000f08 <shiftOut>
		shiftOut(SEGMENT_SELECT[0]);
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <displayNum+0x164>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff88 	bl	8000f08 <shiftOut>
		HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4831      	ldr	r0, [pc, #196]	; (80010c4 <displayNum+0x15c>)
 8000ffe:	f002 f921 	bl	8003244 <HAL_GPIO_WritePin>
		osDelay(100);
 8001002:	2064      	movs	r0, #100	; 0x64
 8001004:	f005 f800 	bl	8006008 <osDelay>
	}
	if (dig2 != 0){
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d018      	beq.n	8001040 <displayNum+0xd8>
		HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2120      	movs	r1, #32
 8001012:	482c      	ldr	r0, [pc, #176]	; (80010c4 <displayNum+0x15c>)
 8001014:	f002 f916 	bl	8003244 <HAL_GPIO_WritePin>
		shiftOut(SEGMENT_MAP[dig2]);
 8001018:	4a2b      	ldr	r2, [pc, #172]	; (80010c8 <displayNum+0x160>)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff71 	bl	8000f08 <shiftOut>
		shiftOut(SEGMENT_SELECT[1]);
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <displayNum+0x164>)
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff6c 	bl	8000f08 <shiftOut>
		HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2120      	movs	r1, #32
 8001034:	4823      	ldr	r0, [pc, #140]	; (80010c4 <displayNum+0x15c>)
 8001036:	f002 f905 	bl	8003244 <HAL_GPIO_WritePin>
		osDelay(100);
 800103a:	2064      	movs	r0, #100	; 0x64
 800103c:	f004 ffe4 	bl	8006008 <osDelay>
	}
	if (dig3 != 0){
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d018      	beq.n	8001078 <displayNum+0x110>
		HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2120      	movs	r1, #32
 800104a:	481e      	ldr	r0, [pc, #120]	; (80010c4 <displayNum+0x15c>)
 800104c:	f002 f8fa 	bl	8003244 <HAL_GPIO_WritePin>
		shiftOut(SEGMENT_MAP[dig3]);
 8001050:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <displayNum+0x160>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff55 	bl	8000f08 <shiftOut>
		shiftOut(SEGMENT_SELECT[2]);
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <displayNum+0x164>)
 8001060:	789b      	ldrb	r3, [r3, #2]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff50 	bl	8000f08 <shiftOut>
		HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2120      	movs	r1, #32
 800106c:	4815      	ldr	r0, [pc, #84]	; (80010c4 <displayNum+0x15c>)
 800106e:	f002 f8e9 	bl	8003244 <HAL_GPIO_WritePin>
		osDelay(100);
 8001072:	2064      	movs	r0, #100	; 0x64
 8001074:	f004 ffc8 	bl	8006008 <osDelay>
	}
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2120      	movs	r1, #32
 800107c:	4811      	ldr	r0, [pc, #68]	; (80010c4 <displayNum+0x15c>)
 800107e:	f002 f8e1 	bl	8003244 <HAL_GPIO_WritePin>
	shiftOut(SEGMENT_MAP[dig4]);
 8001082:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <displayNum+0x160>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff3c 	bl	8000f08 <shiftOut>
	shiftOut(SEGMENT_SELECT[3]);
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <displayNum+0x164>)
 8001092:	78db      	ldrb	r3, [r3, #3]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff37 	bl	8000f08 <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2120      	movs	r1, #32
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <displayNum+0x15c>)
 80010a0:	f002 f8d0 	bl	8003244 <HAL_GPIO_WritePin>
	osDelay(100);
 80010a4:	2064      	movs	r0, #100	; 0x64
 80010a6:	f004 ffaf 	bl	8006008 <osDelay>

}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	10624dd3 	.word	0x10624dd3
 80010b8:	fffffc18 	.word	0xfffffc18
 80010bc:	51eb851f 	.word	0x51eb851f
 80010c0:	66666667 	.word	0x66666667
 80010c4:	48000400 	.word	0x48000400
 80010c8:	0800c644 	.word	0x0800c644
 80010cc:	0800c650 	.word	0x0800c650

080010d0 <customer_queue_init>:

static void customer_task(void *params);
static QueueHandle_t queue_handle;


int  customer_queue_init(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af02      	add	r7, sp, #8
	queue_handle = xQueueCreate(MAX_CUSTOMERS, sizeof(CUSTOMER));
 80010d6:	2200      	movs	r2, #0
 80010d8:	2104      	movs	r1, #4
 80010da:	2032      	movs	r0, #50	; 0x32
 80010dc:	f005 fa86 	bl	80065ec <xQueueGenericCreate>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <customer_queue_init+0x80>)
 80010e4:	6013      	str	r3, [r2, #0]
	assert(queue_handle != NULL);
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <customer_queue_init+0x80>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d105      	bne.n	80010fa <customer_queue_init+0x2a>
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <customer_queue_init+0x84>)
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <customer_queue_init+0x88>)
 80010f2:	2114      	movs	r1, #20
 80010f4:	4819      	ldr	r0, [pc, #100]	; (800115c <customer_queue_init+0x8c>)
 80010f6:	f008 f909 	bl	800930c <__assert_func>
	//initialize all metrics of the queue to zero to start
	customer_queue.len = 0;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <customer_queue_init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
	customer_queue.max_len = 0;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <customer_queue_init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
	customer_queue.max_wait_time = 0;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <customer_queue_init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
	customer_queue.total_wait_time = 0;
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <customer_queue_init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
	customer_queue.num_served = 0;
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <customer_queue_init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
	TaskHandle_t th;

	BaseType_t err = xTaskCreate(customer_task, "CustomerTask", 128, NULL, 24, &th);
 8001118:	463b      	mov	r3, r7
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	2318      	movs	r3, #24
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2300      	movs	r3, #0
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	490f      	ldr	r1, [pc, #60]	; (8001164 <customer_queue_init+0x94>)
 8001126:	4810      	ldr	r0, [pc, #64]	; (8001168 <customer_queue_init+0x98>)
 8001128:	f006 f8dd 	bl	80072e6 <xTaskCreate>
 800112c:	6078      	str	r0, [r7, #4]
	assert(err == pdPASS);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d005      	beq.n	8001140 <customer_queue_init+0x70>
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <customer_queue_init+0x9c>)
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <customer_queue_init+0x88>)
 8001138:	211e      	movs	r1, #30
 800113a:	4808      	ldr	r0, [pc, #32]	; (800115c <customer_queue_init+0x8c>)
 800113c:	f008 f8e6 	bl	800930c <__assert_func>
	customer_queue.handle = th;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <customer_queue_init+0x90>)
 8001144:	6153      	str	r3, [r2, #20]
	return 0;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000214 	.word	0x20000214
 8001154:	0800c148 	.word	0x0800c148
 8001158:	0800c580 	.word	0x0800c580
 800115c:	0800c160 	.word	0x0800c160
 8001160:	200001fc 	.word	0x200001fc
 8001164:	0800c178 	.word	0x0800c178
 8001168:	08001171 	.word	0x08001171
 800116c:	0800c188 	.word	0x0800c188

08001170 <customer_task>:

static void customer_task(void *params){
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	while(1){
		osDelay(SIM_SEC_TO_US(RAND_CUSTOMER_TIME)/1000);
 8001178:	21f0      	movs	r1, #240	; 0xf0
 800117a:	203c      	movs	r0, #60	; 0x3c
 800117c:	f000 fb34 	bl	80017e8 <random_distance>
 8001180:	4603      	mov	r3, r0
 8001182:	f240 6283 	movw	r2, #1667	; 0x683
 8001186:	fb02 f303 	mul.w	r3, r2, r3
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <customer_task+0x54>)
 800118c:	fb82 1203 	smull	r1, r2, r2, r3
 8001190:	1192      	asrs	r2, r2, #6
 8001192:	17db      	asrs	r3, r3, #31
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f004 ff36 	bl	8006008 <osDelay>

		CUSTOMER c = {htim2.Instance->CNT};
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <customer_task+0x58>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	60bb      	str	r3, [r7, #8]

		int err = customer_queue_push(&c);
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f815 	bl	80011d8 <customer_queue_push>
 80011ae:	60f8      	str	r0, [r7, #12]
		assert(!err);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0e0      	beq.n	8001178 <customer_task+0x8>
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <customer_task+0x5c>)
 80011b8:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <customer_task+0x60>)
 80011ba:	212a      	movs	r1, #42	; 0x2a
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <customer_task+0x64>)
 80011be:	f008 f8a5 	bl	800930c <__assert_func>
 80011c2:	bf00      	nop
 80011c4:	10624dd3 	.word	0x10624dd3
 80011c8:	2000022c 	.word	0x2000022c
 80011cc:	0800c198 	.word	0x0800c198
 80011d0:	0800c594 	.word	0x0800c594
 80011d4:	0800c160 	.word	0x0800c160

080011d8 <customer_queue_push>:
	}
}

int customer_queue_push(CUSTOMER *customer) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	if (customer_queue.len < MAX_CUSTOMERS) {
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <customer_queue_push+0x6c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b31      	cmp	r3, #49	; 0x31
 80011e6:	dc28      	bgt.n	800123a <customer_queue_push+0x62>
		// Add the customer to the queue.
		BaseType_t err = xQueueSendToBack(queue_handle, customer, portMAX_DELAY);
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <customer_queue_push+0x70>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	2300      	movs	r3, #0
 80011ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f005 fb0e 	bl	8006814 <xQueueGenericSend>
 80011f8:	60f8      	str	r0, [r7, #12]
		assert(err = pdPASS);
 80011fa:	2301      	movs	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
		// Update the queue metrics.
		osMutexAcquire(customerQueueMutexHandle, portMAX_DELAY);
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <customer_queue_push+0x74>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001206:	4618      	mov	r0, r3
 8001208:	f004 ff9f 	bl	800614a <osMutexAcquire>
		int len = ++customer_queue.len;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <customer_queue_push+0x6c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <customer_queue_push+0x6c>)
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <customer_queue_push+0x6c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	60bb      	str	r3, [r7, #8]
		if (len > customer_queue.max_len) {
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <customer_queue_push+0x6c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	429a      	cmp	r2, r3
 8001224:	dd02      	ble.n	800122c <customer_queue_push+0x54>
			customer_queue.max_len = len;
 8001226:	4a07      	ldr	r2, [pc, #28]	; (8001244 <customer_queue_push+0x6c>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	6053      	str	r3, [r2, #4]
		}
		osMutexRelease(customerQueueMutexHandle);
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <customer_queue_push+0x74>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f004 ffd5 	bl	80061e0 <osMutexRelease>
		// Success.
		return 0;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <customer_queue_push+0x64>
	} else {
		// Failure-- queue is full.
		return 1;
 800123a:	2301      	movs	r3, #1
	}
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001fc 	.word	0x200001fc
 8001248:	20000214 	.word	0x20000214
 800124c:	2000030c 	.word	0x2000030c

08001250 <customer_queue_pop>:

int customer_queue_pop() {
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
	if (customer_queue.len > 0) {
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <customer_queue_pop+0x98>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	dd3f      	ble.n	80012de <customer_queue_pop+0x8e>
		// Remove the customer from the queue.
		CUSTOMER c;
		BaseType_t err = xQueueReceive(queue_handle, &c, portMAX_DELAY);
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <customer_queue_pop+0x9c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	1d39      	adds	r1, r7, #4
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001268:	4618      	mov	r0, r3
 800126a:	f005 fc6d 	bl	8006b48 <xQueueReceive>
 800126e:	60f8      	str	r0, [r7, #12]
		assert(err = pdPASS);
 8001270:	2301      	movs	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
		// Update the queue metrics.
		osMutexAcquire(customerQueueMutexHandle, portMAX_DELAY);
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <customer_queue_pop+0xa0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800127c:	4618      	mov	r0, r3
 800127e:	f004 ff64 	bl	800614a <osMutexAcquire>
		customer_queue.len--;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <customer_queue_pop+0x98>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	3b01      	subs	r3, #1
 8001288:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <customer_queue_pop+0x98>)
 800128a:	6013      	str	r3, [r2, #0]
		uint32_t wait_time = htim2.Instance->CNT - c.enter_time;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <customer_queue_pop+0xa4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	60bb      	str	r3, [r7, #8]
		wait_time = US_TO_SIM_SEC(wait_time);
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <customer_queue_pop+0xa8>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	0a9b      	lsrs	r3, r3, #10
 80012a2:	60bb      	str	r3, [r7, #8]
		customer_queue.total_wait_time += wait_time;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <customer_queue_pop+0x98>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	461a      	mov	r2, r3
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	4413      	add	r3, r2
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <customer_queue_pop+0x98>)
 80012b2:	60da      	str	r2, [r3, #12]
		if (wait_time > customer_queue.max_wait_time) {
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <customer_queue_pop+0x98>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	461a      	mov	r2, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	4293      	cmp	r3, r2
 80012be:	d902      	bls.n	80012c6 <customer_queue_pop+0x76>
			customer_queue.max_wait_time = wait_time;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <customer_queue_pop+0x98>)
 80012c4:	6093      	str	r3, [r2, #8]
		}
		customer_queue.num_served++;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <customer_queue_pop+0x98>)
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <customer_queue_pop+0x98>)
 80012ce:	6113      	str	r3, [r2, #16]
		osMutexRelease(customerQueueMutexHandle);
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <customer_queue_pop+0xa0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 ff83 	bl	80061e0 <osMutexRelease>
		// Success.
		return 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <customer_queue_pop+0x90>
	} else {
		// Failure-- queue is empty.
		return 1;
 80012de:	2301      	movs	r3, #1
	}
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200001fc 	.word	0x200001fc
 80012ec:	20000214 	.word	0x20000214
 80012f0:	2000030c 	.word	0x2000030c
 80012f4:	2000022c 	.word	0x2000022c
 80012f8:	9d414457 	.word	0x9d414457

080012fc <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
	app_idle_cnt++;
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <vApplicationIdleHook+0x18>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	4a03      	ldr	r2, [pc, #12]	; (8001314 <vApplicationIdleHook+0x18>)
 8001308:	6013      	str	r3, [r2, #0]
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000218 	.word	0x20000218

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131c:	f001 fc1e 	bl	8002b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001320:	f000 f872 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001324:	f000 f964 	bl	80015f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001328:	f000 f8e4 	bl	80014f4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800132c:	f000 f930 	bl	8001590 <MX_USART2_UART_Init>
  MX_RNG_Init();
 8001330:	f000 f8cc 	bl	80014cc <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  teller_break01 = xSemaphoreCreateMutex();
 8001334:	2001      	movs	r0, #1
 8001336:	f005 f9d0 	bl	80066da <xQueueCreateMutex>
 800133a:	4603      	mov	r3, r0
 800133c:	4a20      	ldr	r2, [pc, #128]	; (80013c0 <main+0xa8>)
 800133e:	6013      	str	r3, [r2, #0]
  teller_break02 = xSemaphoreCreateMutex();
 8001340:	2001      	movs	r0, #1
 8001342:	f005 f9ca 	bl	80066da <xQueueCreateMutex>
 8001346:	4603      	mov	r3, r0
 8001348:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <main+0xac>)
 800134a:	6013      	str	r3, [r2, #0]
  teller_break03 = xSemaphoreCreateMutex();
 800134c:	2001      	movs	r0, #1
 800134e:	f005 f9c4 	bl	80066da <xQueueCreateMutex>
 8001352:	4603      	mov	r3, r0
 8001354:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <main+0xb0>)
 8001356:	6013      	str	r3, [r2, #0]


  HAL_TIM_Base_Start(&htim2);
 8001358:	481c      	ldr	r0, [pc, #112]	; (80013cc <main+0xb4>)
 800135a:	f003 fbaf 	bl	8004abc <HAL_TIM_Base_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800135e:	f004 fd3f 	bl	8005de0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of customerQueueMutex */
  customerQueueMutexHandle = osMutexNew(&customerQueueMutex_attributes);
 8001362:	481b      	ldr	r0, [pc, #108]	; (80013d0 <main+0xb8>)
 8001364:	f004 fe6b 	bl	800603e <osMutexNew>
 8001368:	4603      	mov	r3, r0
 800136a:	4a1a      	ldr	r2, [pc, #104]	; (80013d4 <main+0xbc>)
 800136c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800136e:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <main+0xc0>)
 8001370:	2100      	movs	r1, #0
 8001372:	481a      	ldr	r0, [pc, #104]	; (80013dc <main+0xc4>)
 8001374:	f004 fd7e 	bl	8005e74 <osThreadNew>
 8001378:	4603      	mov	r3, r0
 800137a:	4a19      	ldr	r2, [pc, #100]	; (80013e0 <main+0xc8>)
 800137c:	6013      	str	r3, [r2, #0]

  /* creation of TellerTask01 */
  TellerTask01Handle = osThreadNew(StartTellerTask01, NULL, &TellerTask01_attributes);
 800137e:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <main+0xcc>)
 8001380:	2100      	movs	r1, #0
 8001382:	4819      	ldr	r0, [pc, #100]	; (80013e8 <main+0xd0>)
 8001384:	f004 fd76 	bl	8005e74 <osThreadNew>
 8001388:	4603      	mov	r3, r0
 800138a:	4a18      	ldr	r2, [pc, #96]	; (80013ec <main+0xd4>)
 800138c:	6013      	str	r3, [r2, #0]

  /* creation of TellerTask02 */
  TellerTask02Handle = osThreadNew(StartTellerTask02, NULL, &TellerTask02_attributes);
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <main+0xd8>)
 8001390:	2100      	movs	r1, #0
 8001392:	4818      	ldr	r0, [pc, #96]	; (80013f4 <main+0xdc>)
 8001394:	f004 fd6e 	bl	8005e74 <osThreadNew>
 8001398:	4603      	mov	r3, r0
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <main+0xe0>)
 800139c:	6013      	str	r3, [r2, #0]

  /* creation of TellerTask03 */
  TellerTask03Handle = osThreadNew(StartTellerTask03, NULL, &TellerTask03_attributes);
 800139e:	4a17      	ldr	r2, [pc, #92]	; (80013fc <main+0xe4>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4817      	ldr	r0, [pc, #92]	; (8001400 <main+0xe8>)
 80013a4:	f004 fd66 	bl	8005e74 <osThreadNew>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a16      	ldr	r2, [pc, #88]	; (8001404 <main+0xec>)
 80013ac:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  //initialize queue thread
  customer_queue_init();
 80013ae:	f7ff fe8f 	bl	80010d0 <customer_queue_init>
  teller_init(NUM_TELLERS);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f001 fb0c 	bl	80029d0 <teller_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013b8:	f004 fd36 	bl	8005e28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <main+0xa4>
 80013be:	bf00      	nop
 80013c0:	20000310 	.word	0x20000310
 80013c4:	20000314 	.word	0x20000314
 80013c8:	20000318 	.word	0x20000318
 80013cc:	2000022c 	.word	0x2000022c
 80013d0:	0800c634 	.word	0x0800c634
 80013d4:	2000030c 	.word	0x2000030c
 80013d8:	0800c5a4 	.word	0x0800c5a4
 80013dc:	0800186d 	.word	0x0800186d
 80013e0:	200002fc 	.word	0x200002fc
 80013e4:	0800c5c8 	.word	0x0800c5c8
 80013e8:	08001f69 	.word	0x08001f69
 80013ec:	20000300 	.word	0x20000300
 80013f0:	0800c5ec 	.word	0x0800c5ec
 80013f4:	08002179 	.word	0x08002179
 80013f8:	20000304 	.word	0x20000304
 80013fc:	0800c610 	.word	0x0800c610
 8001400:	0800238d 	.word	0x0800238d
 8001404:	20000308 	.word	0x20000308

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b096      	sub	sp, #88	; 0x58
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2244      	movs	r2, #68	; 0x44
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f007 ffe0 	bl	80093dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	463b      	mov	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800142a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800142e:	f001 ff3f 	bl	80032b0 <HAL_PWREx_ControlVoltageScaling>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001438:	f001 f8b2 	bl	80025a0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800143c:	f001 ff1a 	bl	8003274 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <SystemClock_Config+0xc0>)
 8001442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001446:	4a20      	ldr	r2, [pc, #128]	; (80014c8 <SystemClock_Config+0xc0>)
 8001448:	f023 0318 	bic.w	r3, r3, #24
 800144c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001450:	2314      	movs	r3, #20
 8001452:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001454:	2301      	movs	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001458:	2301      	movs	r3, #1
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001460:	2360      	movs	r3, #96	; 0x60
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001464:	2302      	movs	r3, #2
 8001466:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001468:	2301      	movs	r3, #1
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001470:	2328      	movs	r3, #40	; 0x28
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001474:	2307      	movs	r3, #7
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001478:	2302      	movs	r3, #2
 800147a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800147c:	2302      	movs	r3, #2
 800147e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4618      	mov	r0, r3
 8001486:	f001 ff69 	bl	800335c <HAL_RCC_OscConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001490:	f001 f886 	bl	80025a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001494:	230f      	movs	r3, #15
 8001496:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001498:	2303      	movs	r3, #3
 800149a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014a8:	463b      	mov	r3, r7
 80014aa:	2104      	movs	r1, #4
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 fb3d 	bl	8003b2c <HAL_RCC_ClockConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80014b8:	f001 f872 	bl	80025a0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014bc:	f003 f826 	bl	800450c <HAL_RCCEx_EnableMSIPLLMode>
}
 80014c0:	bf00      	nop
 80014c2:	3758      	adds	r7, #88	; 0x58
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000

080014cc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_RNG_Init+0x20>)
 80014d2:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <MX_RNG_Init+0x24>)
 80014d4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_RNG_Init+0x20>)
 80014d8:	f003 f9fa 	bl	80048d0 <HAL_RNG_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80014e2:	f001 f85d 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000021c 	.word	0x2000021c
 80014f0:	50060800 	.word	0x50060800

080014f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_TIM2_Init+0x98>)
 8001514:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001518:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_TIM2_Init+0x98>)
 800151c:	224f      	movs	r2, #79	; 0x4f
 800151e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <MX_TIM2_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_TIM2_Init+0x98>)
 8001528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800152c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_TIM2_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <MX_TIM2_Init+0x98>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800153a:	4814      	ldr	r0, [pc, #80]	; (800158c <MX_TIM2_Init+0x98>)
 800153c:	f003 fa67 	bl	8004a0e <HAL_TIM_Base_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001546:	f001 f82b 	bl	80025a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4619      	mov	r1, r3
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <MX_TIM2_Init+0x98>)
 8001558:	f003 fc37 	bl	8004dca <HAL_TIM_ConfigClockSource>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001562:	f001 f81d 	bl	80025a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_TIM2_Init+0x98>)
 8001574:	f003 fe56 	bl	8005224 <HAL_TIMEx_MasterConfigSynchronization>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800157e:	f001 f80f 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000022c 	.word	0x2000022c

08001590 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 8001596:	4a15      	ldr	r2, [pc, #84]	; (80015ec <MX_USART2_UART_Init+0x5c>)
 8001598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_USART2_UART_Init+0x58>)
 80015d4:	f003 fecc 	bl	8005370 <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015de:	f000 ffdf 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000278 	.word	0x20000278
 80015ec:	40004400 	.word	0x40004400

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4b73      	ldr	r3, [pc, #460]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a72      	ldr	r2, [pc, #456]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161e:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a6c      	ldr	r2, [pc, #432]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a66      	ldr	r2, [pc, #408]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	4b61      	ldr	r3, [pc, #388]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a60      	ldr	r2, [pc, #384]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <MX_GPIO_Init+0x1e4>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|SHLD_D7_SEG7_Clock_Pin
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f001 fde8 	bl	8003244 <HAL_GPIO_WritePin>
                          |SHLD_D8_SEG7_Data_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHLD_D4_SEG7_Latch_Pin|LED4_Pin, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	2160      	movs	r1, #96	; 0x60
 8001678:	4857      	ldr	r0, [pc, #348]	; (80017d8 <MX_GPIO_Init+0x1e8>)
 800167a:	f001 fde3 	bl	8003244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800167e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001684:	4b55      	ldr	r3, [pc, #340]	; (80017dc <MX_GPIO_Init+0x1ec>)
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4853      	ldr	r0, [pc, #332]	; (80017e0 <MX_GPIO_Init+0x1f0>)
 8001694:	f001 fc14 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_A5_Pin SHLD_A4_Pin */
  GPIO_InitStruct.Pin = SHLD_A5_Pin|SHLD_A4_Pin;
 8001698:	2303      	movs	r3, #3
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169c:	2303      	movs	r3, #3
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	484d      	ldr	r0, [pc, #308]	; (80017e0 <MX_GPIO_Init+0x1f0>)
 80016ac:	f001 fc08 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_A0_Pin SHLD_D2_Pin */
  GPIO_InitStruct.Pin = SHLD_A0_Pin|SHLD_D2_Pin;
 80016b0:	f240 4301 	movw	r3, #1025	; 0x401
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c8:	f001 fbfa 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_A1_Pin SHLD_A2_Pin */
  GPIO_InitStruct.Pin = SHLD_A1_Pin|SHLD_A2_Pin;
 80016cc:	2312      	movs	r3, #18
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f001 fbed 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin SHLD_D7_SEG7_Clock_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SHLD_D7_SEG7_Clock_Pin;
 80016e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001702:	f001 fbdd 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_A3_Pin */
  GPIO_InitStruct.Pin = SHLD_A3_Pin;
 8001706:	2301      	movs	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170e:	2301      	movs	r3, #1
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHLD_A3_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	482f      	ldr	r0, [pc, #188]	; (80017d8 <MX_GPIO_Init+0x1e8>)
 800171a:	f001 fbd1 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_D6_Pin SHLD_D5_Pin */
  GPIO_InitStruct.Pin = SHLD_D6_Pin|SHLD_D5_Pin;
 800171e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4829      	ldr	r0, [pc, #164]	; (80017d8 <MX_GPIO_Init+0x1e8>)
 8001734:	f001 fbc4 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D9_Pin */
  GPIO_InitStruct.Pin = SHLD_D9_Pin;
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SHLD_D9_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4825      	ldr	r0, [pc, #148]	; (80017e0 <MX_GPIO_Init+0x1f0>)
 800174c:	f001 fbb8 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D8_SEG7_Data_Pin */
  GPIO_InitStruct.Pin = SHLD_D8_SEG7_Data_Pin;
 8001750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800175e:	2301      	movs	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D8_SEG7_Data_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f001 fba8 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
  GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 8001770:	2320      	movs	r3, #32
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177c:	2302      	movs	r3, #2
 800177e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4814      	ldr	r0, [pc, #80]	; (80017d8 <MX_GPIO_Init+0x1e8>)
 8001788:	f001 fb9a 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800178c:	2340      	movs	r3, #64	; 0x40
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_GPIO_Init+0x1e8>)
 80017a4:	f001 fb8c 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_D15_Pin SHLD_D14_Pin */
  GPIO_InitStruct.Pin = SHLD_D15_Pin|SHLD_D14_Pin;
 80017a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ae:	2312      	movs	r3, #18
 80017b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ba:	2304      	movs	r3, #4
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_GPIO_Init+0x1e8>)
 80017c6:	f001 fb7b 	bl	8002ec0 <HAL_GPIO_Init>

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	10210000 	.word	0x10210000
 80017e0:	48000800 	.word	0x48000800
 80017e4:	00000000 	.word	0x00000000

080017e8 <random_distance>:

/* USER CODE BEGIN 4 */
/**
 * Gererates a distance number between the max and min intergers
 */
int random_distance(int min, int max){
 80017e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
	uint32_t rnum = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
	HAL_RNG_GenerateRandomNumber(&hrng, &rnum);
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	4619      	mov	r1, r3
 80017fe:	481a      	ldr	r0, [pc, #104]	; (8001868 <random_distance+0x80>)
 8001800:	f003 f8b6 	bl	8004970 <HAL_RNG_GenerateRandomNumber>
	return min + (max-min)*(double)(rnum/4294967295.0);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7fe fe8d 	bl	8000524 <__aeabi_i2d>
 800180a:	4604      	mov	r4, r0
 800180c:	460d      	mov	r5, r1
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe85 	bl	8000524 <__aeabi_i2d>
 800181a:	4680      	mov	r8, r0
 800181c:	4689      	mov	r9, r1
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe6f 	bl	8000504 <__aeabi_ui2d>
 8001826:	a30e      	add	r3, pc, #56	; (adr r3, 8001860 <random_distance+0x78>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7ff f80e 	bl	800084c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4640      	mov	r0, r8
 8001836:	4649      	mov	r1, r9
 8001838:	f7fe fede 	bl	80005f8 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7fe fd22 	bl	800028c <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f982 	bl	8000b58 <__aeabi_d2iz>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001860:	ffe00000 	.word	0xffe00000
 8001864:	41efffff 	.word	0x41efffff
 8001868:	2000021c 	.word	0x2000021c

0800186c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001870:	b0af      	sub	sp, #188	; 0xbc
 8001872:	af04      	add	r7, sp, #16
 8001874:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osThreadId id;                                           // id for the currently running thread
	id = osThreadGetId ();
 8001876:	f004 fb8f 	bl	8005f98 <osThreadGetId>
 800187a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	char buffer[128];
	int len;
	//int i = 1000;
	//TickType_t xDelay;
	len = sprintf(buffer, "\r\nBANK IS OPEN.\r\n");
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	49cb      	ldr	r1, [pc, #812]	; (8001bb0 <StartDefaultTask+0x344>)
 8001884:	4618      	mov	r0, r3
 8001886:	f008 fb75 	bl	8009f74 <siprintf>
 800188a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 800188e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001892:	b29a      	uxth	r2, r3
 8001894:	f107 010c 	add.w	r1, r7, #12
 8001898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189c:	48c5      	ldr	r0, [pc, #788]	; (8001bb4 <StartDefaultTask+0x348>)
 800189e:	f003 fdb5 	bl	800540c <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
	  int sim_time_sec = US_TO_SIM_SEC(htim2.Instance->CNT);
 80018a2:	4bc5      	ldr	r3, [pc, #788]	; (8001bb8 <StartDefaultTask+0x34c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	4ac4      	ldr	r2, [pc, #784]	; (8001bbc <StartDefaultTask+0x350>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0a9b      	lsrs	r3, r3, #10
 80018b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  if (!bank_closed && (sim_time_sec > BANK_HOURS*60*60)){
 80018b4:	4bc2      	ldr	r3, [pc, #776]	; (8001bc0 <StartDefaultTask+0x354>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d11f      	bne.n	80018fc <StartDefaultTask+0x90>
 80018bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018c0:	f246 2270 	movw	r2, #25200	; 0x6270
 80018c4:	4293      	cmp	r3, r2
 80018c6:	dd19      	ble.n	80018fc <StartDefaultTask+0x90>
		  //close the bank
		  bank_closed = 1;
 80018c8:	4bbd      	ldr	r3, [pc, #756]	; (8001bc0 <StartDefaultTask+0x354>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
		  //Delete Customer task so no more customers are added
		  vTaskDelete(customer_queue.handle);
 80018ce:	4bbd      	ldr	r3, [pc, #756]	; (8001bc4 <StartDefaultTask+0x358>)
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f005 fe4c 	bl	8007570 <vTaskDelete>

		  len = sprintf(buffer, "\r\nBank is Closed!\r\n");
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	49ba      	ldr	r1, [pc, #744]	; (8001bc8 <StartDefaultTask+0x35c>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f008 fb48 	bl	8009f74 <siprintf>
 80018e4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *) buffer, len, ~0);
 80018e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	f107 010c 	add.w	r1, r7, #12
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018f6:	48af      	ldr	r0, [pc, #700]	; (8001bb4 <StartDefaultTask+0x348>)
 80018f8:	f003 fd88 	bl	800540c <HAL_UART_Transmit>
	  }
	  if (bank_closed && customer_queue.len == 0 && teller_end(NUM_TELLERS)){
 80018fc:	4bb0      	ldr	r3, [pc, #704]	; (8001bc0 <StartDefaultTask+0x354>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8276 	beq.w	8001df2 <StartDefaultTask+0x586>
 8001906:	4baf      	ldr	r3, [pc, #700]	; (8001bc4 <StartDefaultTask+0x358>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8271 	bne.w	8001df2 <StartDefaultTask+0x586>
 8001910:	2003      	movs	r0, #3
 8001912:	f001 f8a3 	bl	8002a5c <teller_end>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 826a 	beq.w	8001df2 <StartDefaultTask+0x586>
		  len = sprintf(buffer, "\r\nFINAL METRICS:");
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	49aa      	ldr	r1, [pc, #680]	; (8001bcc <StartDefaultTask+0x360>)
 8001924:	4618      	mov	r0, r3
 8001926:	f008 fb25 	bl	8009f74 <siprintf>
 800192a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 800192e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001932:	b29a      	uxth	r2, r3
 8001934:	f107 010c 	add.w	r1, r7, #12
 8001938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193c:	489d      	ldr	r0, [pc, #628]	; (8001bb4 <StartDefaultTask+0x348>)
 800193e:	f003 fd65 	bl	800540c <HAL_UART_Transmit>
		  HAL_Delay(10);
 8001942:	200a      	movs	r0, #10
 8001944:	f001 f986 	bl	8002c54 <HAL_Delay>
		  len = sprintf(buffer, "\r\n\tTotal Customers Served: %d", customer_queue.num_served);
 8001948:	4b9e      	ldr	r3, [pc, #632]	; (8001bc4 <StartDefaultTask+0x358>)
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	499f      	ldr	r1, [pc, #636]	; (8001bd0 <StartDefaultTask+0x364>)
 8001952:	4618      	mov	r0, r3
 8001954:	f008 fb0e 	bl	8009f74 <siprintf>
 8001958:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 800195c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001960:	b29a      	uxth	r2, r3
 8001962:	f107 010c 	add.w	r1, r7, #12
 8001966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800196a:	4892      	ldr	r0, [pc, #584]	; (8001bb4 <StartDefaultTask+0x348>)
 800196c:	f003 fd4e 	bl	800540c <HAL_UART_Transmit>
		  HAL_Delay(10);
 8001970:	200a      	movs	r0, #10
 8001972:	f001 f96f 	bl	8002c54 <HAL_Delay>
		  len = sprintf(buffer, "\r\n\tCustomers Served by Teller: T1: %d, T2: %d, T3: %d", tellers[0].customers_served,tellers[1].customers_served, tellers[2].customers_served);
 8001976:	4b97      	ldr	r3, [pc, #604]	; (8001bd4 <StartDefaultTask+0x368>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4b96      	ldr	r3, [pc, #600]	; (8001bd4 <StartDefaultTask+0x368>)
 800197c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197e:	4b95      	ldr	r3, [pc, #596]	; (8001bd4 <StartDefaultTask+0x368>)
 8001980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001982:	f107 000c 	add.w	r0, r7, #12
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	460b      	mov	r3, r1
 800198a:	4993      	ldr	r1, [pc, #588]	; (8001bd8 <StartDefaultTask+0x36c>)
 800198c:	f008 faf2 	bl	8009f74 <siprintf>
 8001990:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001998:	b29a      	uxth	r2, r3
 800199a:	f107 010c 	add.w	r1, r7, #12
 800199e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a2:	4884      	ldr	r0, [pc, #528]	; (8001bb4 <StartDefaultTask+0x348>)
 80019a4:	f003 fd32 	bl	800540c <HAL_UART_Transmit>
		  HAL_Delay(10);
 80019a8:	200a      	movs	r0, #10
 80019aa:	f001 f953 	bl	8002c54 <HAL_Delay>
		  len = sprintf(buffer, "\r\n\tAverage Time Customers Spent in Queue: %.2lfsec", (double)customer_queue.total_wait_time/(double)customer_queue.num_served);
 80019ae:	4b85      	ldr	r3, [pc, #532]	; (8001bc4 <StartDefaultTask+0x358>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdb6 	bl	8000524 <__aeabi_i2d>
 80019b8:	4604      	mov	r4, r0
 80019ba:	460d      	mov	r5, r1
 80019bc:	4b81      	ldr	r3, [pc, #516]	; (8001bc4 <StartDefaultTask+0x358>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdaf 	bl	8000524 <__aeabi_i2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4620      	mov	r0, r4
 80019cc:	4629      	mov	r1, r5
 80019ce:	f7fe ff3d 	bl	800084c <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	f107 000c 	add.w	r0, r7, #12
 80019da:	4980      	ldr	r1, [pc, #512]	; (8001bdc <StartDefaultTask+0x370>)
 80019dc:	f008 faca 	bl	8009f74 <siprintf>
 80019e0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 80019e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	f107 010c 	add.w	r1, r7, #12
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f2:	4870      	ldr	r0, [pc, #448]	; (8001bb4 <StartDefaultTask+0x348>)
 80019f4:	f003 fd0a 	bl	800540c <HAL_UART_Transmit>
		  HAL_Delay(10);
 80019f8:	200a      	movs	r0, #10
 80019fa:	f001 f92b 	bl	8002c54 <HAL_Delay>
		  len = sprintf(buffer, "\r\n\tAverage Time Customers Spent with Tellers: T1:%.2lfsec, T2:%.2lfsec, T3:%.2lfsec", (double)tellers[0].total_transaction_time/(double)tellers[0].customers_served,
 80019fe:	4b75      	ldr	r3, [pc, #468]	; (8001bd4 <StartDefaultTask+0x368>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fd7e 	bl	8000504 <__aeabi_ui2d>
 8001a08:	4604      	mov	r4, r0
 8001a0a:	460d      	mov	r5, r1
 8001a0c:	4b71      	ldr	r3, [pc, #452]	; (8001bd4 <StartDefaultTask+0x368>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd87 	bl	8000524 <__aeabi_i2d>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f7fe ff15 	bl	800084c <__aeabi_ddiv>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4692      	mov	sl, r2
 8001a28:	469b      	mov	fp, r3
				  (double)tellers[1].total_transaction_time/(double)tellers[1].customers_served,
 8001a2a:	4b6a      	ldr	r3, [pc, #424]	; (8001bd4 <StartDefaultTask+0x368>)
 8001a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd68 	bl	8000504 <__aeabi_ui2d>
 8001a34:	4604      	mov	r4, r0
 8001a36:	460d      	mov	r5, r1
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <StartDefaultTask+0x368>)
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd71 	bl	8000524 <__aeabi_i2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
		  len = sprintf(buffer, "\r\n\tAverage Time Customers Spent with Tellers: T1:%.2lfsec, T2:%.2lfsec, T3:%.2lfsec", (double)tellers[0].total_transaction_time/(double)tellers[0].customers_served,
 8001a46:	4620      	mov	r0, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	f7fe feff 	bl	800084c <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4690      	mov	r8, r2
 8001a54:	4699      	mov	r9, r3
				  (double)tellers[2].total_transaction_time/(double)tellers[2].customers_served);
 8001a56:	4b5f      	ldr	r3, [pc, #380]	; (8001bd4 <StartDefaultTask+0x368>)
 8001a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd52 	bl	8000504 <__aeabi_ui2d>
 8001a60:	4604      	mov	r4, r0
 8001a62:	460d      	mov	r5, r1
 8001a64:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <StartDefaultTask+0x368>)
 8001a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd5b 	bl	8000524 <__aeabi_i2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
		  len = sprintf(buffer, "\r\n\tAverage Time Customers Spent with Tellers: T1:%.2lfsec, T2:%.2lfsec, T3:%.2lfsec", (double)tellers[0].total_transaction_time/(double)tellers[0].customers_served,
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f7fe fee9 	bl	800084c <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	f107 000c 	add.w	r0, r7, #12
 8001a82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a86:	e9cd 8900 	strd	r8, r9, [sp]
 8001a8a:	4652      	mov	r2, sl
 8001a8c:	465b      	mov	r3, fp
 8001a8e:	4954      	ldr	r1, [pc, #336]	; (8001be0 <StartDefaultTask+0x374>)
 8001a90:	f008 fa70 	bl	8009f74 <siprintf>
 8001a94:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001a98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	f107 010c 	add.w	r1, r7, #12
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa6:	4843      	ldr	r0, [pc, #268]	; (8001bb4 <StartDefaultTask+0x348>)
 8001aa8:	f003 fcb0 	bl	800540c <HAL_UART_Transmit>
		  HAL_Delay(10);
 8001aac:	200a      	movs	r0, #10
 8001aae:	f001 f8d1 	bl	8002c54 <HAL_Delay>
		  len = sprintf(buffer, "\r\n\tAverage Time Tellers Waited for Customers: T1:%.2lfsec, T2:%.2lfsec, T3:%.2lfsec", (double)tellers[0].total_wait_time/(double)tellers[0].customers_served,
 8001ab2:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <StartDefaultTask+0x368>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd24 	bl	8000504 <__aeabi_ui2d>
 8001abc:	4604      	mov	r4, r0
 8001abe:	460d      	mov	r5, r1
 8001ac0:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <StartDefaultTask+0x368>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fd2d 	bl	8000524 <__aeabi_i2d>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe febb 	bl	800084c <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4692      	mov	sl, r2
 8001adc:	469b      	mov	fp, r3
				  (double)tellers[1].total_wait_time/(double)tellers[1].customers_served,
 8001ade:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <StartDefaultTask+0x368>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd0e 	bl	8000504 <__aeabi_ui2d>
 8001ae8:	4604      	mov	r4, r0
 8001aea:	460d      	mov	r5, r1
 8001aec:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <StartDefaultTask+0x368>)
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd17 	bl	8000524 <__aeabi_i2d>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
		  len = sprintf(buffer, "\r\n\tAverage Time Tellers Waited for Customers: T1:%.2lfsec, T2:%.2lfsec, T3:%.2lfsec", (double)tellers[0].total_wait_time/(double)tellers[0].customers_served,
 8001afa:	4620      	mov	r0, r4
 8001afc:	4629      	mov	r1, r5
 8001afe:	f7fe fea5 	bl	800084c <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4690      	mov	r8, r2
 8001b08:	4699      	mov	r9, r3
				  (double)tellers[2].total_wait_time/(double)tellers[2].customers_served);
 8001b0a:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <StartDefaultTask+0x368>)
 8001b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fcf8 	bl	8000504 <__aeabi_ui2d>
 8001b14:	4604      	mov	r4, r0
 8001b16:	460d      	mov	r5, r1
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <StartDefaultTask+0x368>)
 8001b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd01 	bl	8000524 <__aeabi_i2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
		  len = sprintf(buffer, "\r\n\tAverage Time Tellers Waited for Customers: T1:%.2lfsec, T2:%.2lfsec, T3:%.2lfsec", (double)tellers[0].total_wait_time/(double)tellers[0].customers_served,
 8001b26:	4620      	mov	r0, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	f7fe fe8f 	bl	800084c <__aeabi_ddiv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	f107 000c 	add.w	r0, r7, #12
 8001b36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b3a:	e9cd 8900 	strd	r8, r9, [sp]
 8001b3e:	4652      	mov	r2, sl
 8001b40:	465b      	mov	r3, fp
 8001b42:	4928      	ldr	r1, [pc, #160]	; (8001be4 <StartDefaultTask+0x378>)
 8001b44:	f008 fa16 	bl	8009f74 <siprintf>
 8001b48:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001b4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	f107 010c 	add.w	r1, r7, #12
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b5a:	4816      	ldr	r0, [pc, #88]	; (8001bb4 <StartDefaultTask+0x348>)
 8001b5c:	f003 fc56 	bl	800540c <HAL_UART_Transmit>
		  HAL_Delay(10);
 8001b60:	200a      	movs	r0, #10
 8001b62:	f001 f877 	bl	8002c54 <HAL_Delay>
		  len = sprintf(buffer, "\r\n\tNumber of breaks: T1:%d, T2:%d, T3:%d ", tellers[0].num_breaks, tellers[1].num_breaks, tellers[2].num_breaks);
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <StartDefaultTask+0x368>)
 8001b68:	69da      	ldr	r2, [r3, #28]
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <StartDefaultTask+0x368>)
 8001b6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <StartDefaultTask+0x368>)
 8001b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b74:	f107 000c 	add.w	r0, r7, #12
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	491a      	ldr	r1, [pc, #104]	; (8001be8 <StartDefaultTask+0x37c>)
 8001b7e:	f008 f9f9 	bl	8009f74 <siprintf>
 8001b82:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001b86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	f107 010c 	add.w	r1, r7, #12
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b94:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <StartDefaultTask+0x348>)
 8001b96:	f003 fc39 	bl	800540c <HAL_UART_Transmit>
		  len = sprintf(buffer, "\r\n\tAverage time for breaks: T1:%.2lfsec, T2:%.2lfsec, T3:%.2lfsec", (double)tellers[0].total_break_time/(double)tellers[0].num_breaks,
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <StartDefaultTask+0x368>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcc0 	bl	8000524 <__aeabi_i2d>
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	460d      	mov	r5, r1
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <StartDefaultTask+0x368>)
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	e01e      	b.n	8001bec <StartDefaultTask+0x380>
 8001bae:	bf00      	nop
 8001bb0:	0800c1f0 	.word	0x0800c1f0
 8001bb4:	20000278 	.word	0x20000278
 8001bb8:	2000022c 	.word	0x2000022c
 8001bbc:	9d414457 	.word	0x9d414457
 8001bc0:	2000031c 	.word	0x2000031c
 8001bc4:	200001fc 	.word	0x200001fc
 8001bc8:	0800c204 	.word	0x0800c204
 8001bcc:	0800c218 	.word	0x0800c218
 8001bd0:	0800c22c 	.word	0x0800c22c
 8001bd4:	20000324 	.word	0x20000324
 8001bd8:	0800c24c 	.word	0x0800c24c
 8001bdc:	0800c284 	.word	0x0800c284
 8001be0:	0800c2b8 	.word	0x0800c2b8
 8001be4:	0800c30c 	.word	0x0800c30c
 8001be8:	0800c360 	.word	0x0800c360
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fc99 	bl	8000524 <__aeabi_i2d>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	f7fe fe27 	bl	800084c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4692      	mov	sl, r2
 8001c04:	469b      	mov	fp, r3
				  (double)tellers[1].total_break_time/(double)tellers[1].num_breaks,
 8001c06:	4bc7      	ldr	r3, [pc, #796]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fc8a 	bl	8000524 <__aeabi_i2d>
 8001c10:	4604      	mov	r4, r0
 8001c12:	460d      	mov	r5, r1
 8001c14:	4bc3      	ldr	r3, [pc, #780]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc83 	bl	8000524 <__aeabi_i2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
		  len = sprintf(buffer, "\r\n\tAverage time for breaks: T1:%.2lfsec, T2:%.2lfsec, T3:%.2lfsec", (double)tellers[0].total_break_time/(double)tellers[0].num_breaks,
 8001c22:	4620      	mov	r0, r4
 8001c24:	4629      	mov	r1, r5
 8001c26:	f7fe fe11 	bl	800084c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4690      	mov	r8, r2
 8001c30:	4699      	mov	r9, r3
				  (double)tellers[2].total_break_time/(double)tellers[2].num_breaks);
 8001c32:	4bbc      	ldr	r3, [pc, #752]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc73 	bl	8000524 <__aeabi_i2d>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	460d      	mov	r5, r1
 8001c42:	4bb8      	ldr	r3, [pc, #736]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc6b 	bl	8000524 <__aeabi_i2d>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
		  len = sprintf(buffer, "\r\n\tAverage time for breaks: T1:%.2lfsec, T2:%.2lfsec, T3:%.2lfsec", (double)tellers[0].total_break_time/(double)tellers[0].num_breaks,
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fdf9 	bl	800084c <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	f107 000c 	add.w	r0, r7, #12
 8001c62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c66:	e9cd 8900 	strd	r8, r9, [sp]
 8001c6a:	4652      	mov	r2, sl
 8001c6c:	465b      	mov	r3, fp
 8001c6e:	49ae      	ldr	r1, [pc, #696]	; (8001f28 <StartDefaultTask+0x6bc>)
 8001c70:	f008 f980 	bl	8009f74 <siprintf>
 8001c74:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001c78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	f107 010c 	add.w	r1, r7, #12
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c86:	48a9      	ldr	r0, [pc, #676]	; (8001f2c <StartDefaultTask+0x6c0>)
 8001c88:	f003 fbc0 	bl	800540c <HAL_UART_Transmit>
		  len = sprintf(buffer, "\r\n\tMax break time: T1:%dsec, T2:%dsec, T3:%dsec", tellers[0].max_break_time, tellers[1].max_break_time, tellers[2].max_break_time);
 8001c8c:	4ba5      	ldr	r3, [pc, #660]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c90:	4ba4      	ldr	r3, [pc, #656]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001c92:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8001c94:	4ba3      	ldr	r3, [pc, #652]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c9a:	f107 000c 	add.w	r0, r7, #12
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	49a3      	ldr	r1, [pc, #652]	; (8001f30 <StartDefaultTask+0x6c4>)
 8001ca4:	f008 f966 	bl	8009f74 <siprintf>
 8001ca8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001cac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	f107 010c 	add.w	r1, r7, #12
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cba:	489c      	ldr	r0, [pc, #624]	; (8001f2c <StartDefaultTask+0x6c0>)
 8001cbc:	f003 fba6 	bl	800540c <HAL_UART_Transmit>
		  len = sprintf(buffer, "\r\n\tMin break time: T1:%dsec, T2:%dsec, T3:%dsec", tellers[0].min_break_time, tellers[1].min_break_time, tellers[2].min_break_time);
 8001cc0:	4b98      	ldr	r3, [pc, #608]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cc4:	4b97      	ldr	r3, [pc, #604]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001cc6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001cc8:	4b96      	ldr	r3, [pc, #600]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cce:	f107 000c 	add.w	r0, r7, #12
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4997      	ldr	r1, [pc, #604]	; (8001f34 <StartDefaultTask+0x6c8>)
 8001cd8:	f008 f94c 	bl	8009f74 <siprintf>
 8001cdc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001ce0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	f107 010c 	add.w	r1, r7, #12
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cee:	488f      	ldr	r0, [pc, #572]	; (8001f2c <StartDefaultTask+0x6c0>)
 8001cf0:	f003 fb8c 	bl	800540c <HAL_UART_Transmit>


		  len = sprintf(buffer, "\r\n\tMax Customer Wait Time in Queue: %dsec", customer_queue.max_wait_time);
 8001cf4:	4b90      	ldr	r3, [pc, #576]	; (8001f38 <StartDefaultTask+0x6cc>)
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	498f      	ldr	r1, [pc, #572]	; (8001f3c <StartDefaultTask+0x6d0>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f008 f938 	bl	8009f74 <siprintf>
 8001d04:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001d08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f107 010c 	add.w	r1, r7, #12
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d16:	4885      	ldr	r0, [pc, #532]	; (8001f2c <StartDefaultTask+0x6c0>)
 8001d18:	f003 fb78 	bl	800540c <HAL_UART_Transmit>
		  HAL_Delay(10);
 8001d1c:	200a      	movs	r0, #10
 8001d1e:	f000 ff99 	bl	8002c54 <HAL_Delay>
		  len = sprintf(buffer, "\r\n\tMax Teller Wait Time for Customer: T1:%dsec, T2:%dsec, T3:%dsec", tellers[0].max_wait_time, tellers[1].max_wait_time, tellers[2].max_wait_time);
 8001d22:	4b80      	ldr	r3, [pc, #512]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	4b7f      	ldr	r3, [pc, #508]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001d28:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d2a:	4b7e      	ldr	r3, [pc, #504]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	f107 000c 	add.w	r0, r7, #12
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	460b      	mov	r3, r1
 8001d36:	4982      	ldr	r1, [pc, #520]	; (8001f40 <StartDefaultTask+0x6d4>)
 8001d38:	f008 f91c 	bl	8009f74 <siprintf>
 8001d3c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001d40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	f107 010c 	add.w	r1, r7, #12
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d4e:	4877      	ldr	r0, [pc, #476]	; (8001f2c <StartDefaultTask+0x6c0>)
 8001d50:	f003 fb5c 	bl	800540c <HAL_UART_Transmit>
		  HAL_Delay(10);
 8001d54:	200a      	movs	r0, #10
 8001d56:	f000 ff7d 	bl	8002c54 <HAL_Delay>
		  len = sprintf(buffer, "\r\n\tMax Teller Transaction Time: T1:%dsec, T2:%dsec, T3:%dsec", tellers[0].max_transaction_time, tellers[1].max_transaction_time, tellers[2].max_transaction_time);
 8001d5a:	4b72      	ldr	r3, [pc, #456]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	4b71      	ldr	r3, [pc, #452]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001d60:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d62:	4b70      	ldr	r3, [pc, #448]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d66:	f107 000c 	add.w	r0, r7, #12
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4975      	ldr	r1, [pc, #468]	; (8001f44 <StartDefaultTask+0x6d8>)
 8001d70:	f008 f900 	bl	8009f74 <siprintf>
 8001d74:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001d78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	f107 010c 	add.w	r1, r7, #12
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d86:	4869      	ldr	r0, [pc, #420]	; (8001f2c <StartDefaultTask+0x6c0>)
 8001d88:	f003 fb40 	bl	800540c <HAL_UART_Transmit>
		  HAL_Delay(10);
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	f000 ff61 	bl	8002c54 <HAL_Delay>
		  len = sprintf(buffer, "\r\n\tMax Customer Queue Depth: %d", customer_queue.max_len);
 8001d92:	4b69      	ldr	r3, [pc, #420]	; (8001f38 <StartDefaultTask+0x6cc>)
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	496b      	ldr	r1, [pc, #428]	; (8001f48 <StartDefaultTask+0x6dc>)
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f008 f8e9 	bl	8009f74 <siprintf>
 8001da2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	f107 010c 	add.w	r1, r7, #12
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001db4:	485d      	ldr	r0, [pc, #372]	; (8001f2c <StartDefaultTask+0x6c0>)
 8001db6:	f003 fb29 	bl	800540c <HAL_UART_Transmit>
		  HAL_Delay(10);
 8001dba:	200a      	movs	r0, #10
 8001dbc:	f000 ff4a 	bl	8002c54 <HAL_Delay>
		  len = sprintf(buffer, "\r\n\tFinal idle count: %ld", app_idle_cnt);
 8001dc0:	4b62      	ldr	r3, [pc, #392]	; (8001f4c <StartDefaultTask+0x6e0>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	4961      	ldr	r1, [pc, #388]	; (8001f50 <StartDefaultTask+0x6e4>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f008 f8d2 	bl	8009f74 <siprintf>
 8001dd0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001dd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	f107 010c 	add.w	r1, r7, #12
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001de2:	4852      	ldr	r0, [pc, #328]	; (8001f2c <StartDefaultTask+0x6c0>)
 8001de4:	f003 fb12 	bl	800540c <HAL_UART_Transmit>
		  osThreadTerminate(id);
 8001de8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001dec:	f004 f8df 	bl	8005fae <osThreadTerminate>
 8001df0:	e093      	b.n	8001f1a <StartDefaultTask+0x6ae>
	  }
	  else {
		  displayNum(customer_queue.len);
 8001df2:	4b51      	ldr	r3, [pc, #324]	; (8001f38 <StartDefaultTask+0x6cc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f8b6 	bl	8000f68 <displayNum>
		  int hour = sim_time_sec/60/60;
 8001dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e00:	4a54      	ldr	r2, [pc, #336]	; (8001f54 <StartDefaultTask+0x6e8>)
 8001e02:	fb82 1203 	smull	r1, r2, r2, r3
 8001e06:	441a      	add	r2, r3
 8001e08:	12d2      	asrs	r2, r2, #11
 8001e0a:	17db      	asrs	r3, r3, #31
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		  int min = sim_time_sec/60 - hour*60;
 8001e12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e16:	4a50      	ldr	r2, [pc, #320]	; (8001f58 <StartDefaultTask+0x6ec>)
 8001e18:	fb82 1203 	smull	r1, r2, r2, r3
 8001e1c:	441a      	add	r2, r3
 8001e1e:	1152      	asrs	r2, r2, #5
 8001e20:	17db      	asrs	r3, r3, #31
 8001e22:	1ad1      	subs	r1, r2, r3
 8001e24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e28:	4613      	mov	r3, r2
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		  int sec = sim_time_sec - hour*60*60 - min*60;
 8001e36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e3a:	4a48      	ldr	r2, [pc, #288]	; (8001f5c <StartDefaultTask+0x6f0>)
 8001e3c:	fb03 f202 	mul.w	r2, r3, r2
 8001e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e44:	18d1      	adds	r1, r2, r3
 8001e46:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  hour += BANK_OPEN;
 8001e58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e5c:	3309      	adds	r3, #9
 8001e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		  len = sprintf(buffer, "\r\n%02d:%02d:%02d\tWaiting:%d\r\n", hour,min,sec,customer_queue.len);
 8001e62:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <StartDefaultTask+0x6cc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f107 000c 	add.w	r0, r7, #12
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e7a:	4939      	ldr	r1, [pc, #228]	; (8001f60 <StartDefaultTask+0x6f4>)
 8001e7c:	f008 f87a 	bl	8009f74 <siprintf>
 8001e80:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  HAL_UART_Transmit(&huart2, (uint8_t *) buffer, len, ~0);
 8001e84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	f107 010c 	add.w	r1, r7, #12
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e92:	4826      	ldr	r0, [pc, #152]	; (8001f2c <StartDefaultTask+0x6c0>)
 8001e94:	f003 faba 	bl	800540c <HAL_UART_Transmit>
		  //xDelay = (SIM_SEC_TO_US(240)* .001)/portTICK_PERIOD_MS;
		  //osDelay(1);
		  for (int i = 0; i < NUM_TELLERS; i++) {
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e9e:	e02e      	b.n	8001efe <StartDefaultTask+0x692>
			  len += sprintf(buffer+len, "\t|T%d,Served:%d,%s|", i + 1, tellers[i].customers_served, get_status_name(tellers[i].status));
 8001ea0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ea4:	f107 020c 	add.w	r2, r7, #12
 8001ea8:	18d4      	adds	r4, r2, r3
 8001eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eae:	1c5d      	adds	r5, r3, #1
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eb6:	2134      	movs	r1, #52	; 0x34
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	681e      	ldr	r6, [r3, #0]
 8001ec0:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <StartDefaultTask+0x6b8>)
 8001ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ec6:	2134      	movs	r1, #52	; 0x34
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	3330      	adds	r3, #48	; 0x30
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fdf6 	bl	8002ac4 <get_status_name>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	4633      	mov	r3, r6
 8001ede:	462a      	mov	r2, r5
 8001ee0:	4920      	ldr	r1, [pc, #128]	; (8001f64 <StartDefaultTask+0x6f8>)
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f008 f846 	bl	8009f74 <siprintf>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001eee:	4413      	add	r3, r2
 8001ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		  for (int i = 0; i < NUM_TELLERS; i++) {
 8001ef4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	ddcc      	ble.n	8001ea0 <StartDefaultTask+0x634>
		  }
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, ~0);
 8001f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f107 010c 	add.w	r1, r7, #12
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <StartDefaultTask+0x6c0>)
 8001f16:	f003 fa79 	bl	800540c <HAL_UART_Transmit>
	  }

	  //osDelay(((uint32_t)SIM_SEC_TO_US(240)/ 1000) * 1000 / configTICK_RATE_HZ);
	  osDelay(100);
 8001f1a:	2064      	movs	r0, #100	; 0x64
 8001f1c:	f004 f874 	bl	8006008 <osDelay>
  {
 8001f20:	e4bf      	b.n	80018a2 <StartDefaultTask+0x36>
 8001f22:	bf00      	nop
 8001f24:	20000324 	.word	0x20000324
 8001f28:	0800c38c 	.word	0x0800c38c
 8001f2c:	20000278 	.word	0x20000278
 8001f30:	0800c3d0 	.word	0x0800c3d0
 8001f34:	0800c400 	.word	0x0800c400
 8001f38:	200001fc 	.word	0x200001fc
 8001f3c:	0800c430 	.word	0x0800c430
 8001f40:	0800c45c 	.word	0x0800c45c
 8001f44:	0800c4a0 	.word	0x0800c4a0
 8001f48:	0800c4e0 	.word	0x0800c4e0
 8001f4c:	20000218 	.word	0x20000218
 8001f50:	0800c500 	.word	0x0800c500
 8001f54:	91a2b3c5 	.word	0x91a2b3c5
 8001f58:	88888889 	.word	0x88888889
 8001f5c:	fffff1f0 	.word	0xfffff1f0
 8001f60:	0800c51c 	.word	0x0800c51c
 8001f64:	0800c53c 	.word	0x0800c53c

08001f68 <StartTellerTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTellerTask01 */
void StartTellerTask01(void *argument)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b08b      	sub	sp, #44	; 0x2c
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTellerTask01 */
	osThreadId id;                                           // id for the currently running thread
	id = osThreadGetId ();
 8001f70:	f004 f812 	bl	8005f98 <osThreadGetId>
 8001f74:	6278      	str	r0, [r7, #36]	; 0x24
	TELLER *t = &tellers[0];
 8001f76:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <StartTellerTask01+0x1fc>)
 8001f78:	623b      	str	r3, [r7, #32]

  /* Infinite loop */
	t->wait_start = htim2.Instance->CNT;
 8001f7a:	4b7b      	ldr	r3, [pc, #492]	; (8002168 <StartTellerTask01+0x200>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	605a      	str	r2, [r3, #4]
  for(;;)
  {
	if (check_btn1()){
 8001f84:	f7fe ff92 	bl	8000eac <check_btn1>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <StartTellerTask01+0x30>
		t->status = BREAK;
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001f96:	e0cc      	b.n	8002132 <StartTellerTask01+0x1ca>
	}
	else{
		t->status=AVAIL;
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		if (t->break_set && htim2.Instance->CNT >= t->next_break){
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d051      	beq.n	800204c <StartTellerTask01+0xe4>
 8001fa8:	4b6f      	ldr	r3, [pc, #444]	; (8002168 <StartTellerTask01+0x200>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d34a      	bcc.n	800204c <StartTellerTask01+0xe4>
			uint32_t break_len = RAND_BREAK_LENGTH;
 8001fb6:	21f0      	movs	r1, #240	; 0xf0
 8001fb8:	203c      	movs	r0, #60	; 0x3c
 8001fba:	f7ff fc15 	bl	80017e8 <random_distance>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	61fb      	str	r3, [r7, #28]
			t->status = BREAK;
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			osDelay(SIM_SEC_TO_US(break_len) / 1000);
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f240 6283 	movw	r2, #1667	; 0x683
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	4a65      	ldr	r2, [pc, #404]	; (800216c <StartTellerTask01+0x204>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	099b      	lsrs	r3, r3, #6
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f004 f813 	bl	8006008 <osDelay>
			t->status = AVAIL;
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			t->next_break = htim2.Instance->CNT + SIM_SEC_TO_US(RAND_NEXT_BREAK);
 8001fea:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <StartTellerTask01+0x200>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001ff0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001ff4:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001ff8:	f7ff fbf6 	bl	80017e8 <random_distance>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f240 6283 	movw	r2, #1667	; 0x683
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	18e2      	adds	r2, r4, r3
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	619a      	str	r2, [r3, #24]
			t->total_break_time += break_len;
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	461a      	mov	r2, r3
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	4413      	add	r3, r2
 8002016:	461a      	mov	r2, r3
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	621a      	str	r2, [r3, #32]
			t->num_breaks++;
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	61da      	str	r2, [r3, #28]
			if (break_len > t->max_break_time){
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	461a      	mov	r2, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	4293      	cmp	r3, r2
 8002030:	d902      	bls.n	8002038 <StartTellerTask01+0xd0>
				t->max_break_time = break_len;
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (break_len < t->min_break_time){
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	461a      	mov	r2, r3
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	4293      	cmp	r3, r2
 8002042:	d275      	bcs.n	8002130 <StartTellerTask01+0x1c8>
				t->min_break_time = break_len;
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
		if (t->break_set && htim2.Instance->CNT >= t->next_break){
 800204a:	e071      	b.n	8002130 <StartTellerTask01+0x1c8>
			}
		}
		else{
			int err = customer_queue_pop();
 800204c:	f7ff f900 	bl	8001250 <customer_queue_pop>
 8002050:	61b8      	str	r0, [r7, #24]
			if(!err){
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d16c      	bne.n	8002132 <StartTellerTask01+0x1ca>
				uint32_t wait_time = htim2.Instance->CNT - t->wait_start;
 8002058:	4b43      	ldr	r3, [pc, #268]	; (8002168 <StartTellerTask01+0x200>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
				wait_time = US_TO_SIM_SEC(wait_time);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	4a41      	ldr	r2, [pc, #260]	; (8002170 <StartTellerTask01+0x208>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0a9b      	lsrs	r3, r3, #10
 8002070:	617b      	str	r3, [r7, #20]
				t->total_wait_time += wait_time;
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	441a      	add	r2, r3
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	60da      	str	r2, [r3, #12]
				if (wait_time > t->max_wait_time){
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	461a      	mov	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4293      	cmp	r3, r2
 8002088:	d902      	bls.n	8002090 <StartTellerTask01+0x128>
					t->max_wait_time = wait_time;
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	609a      	str	r2, [r3, #8]
				}
				t->wait_start = 0;
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2200      	movs	r2, #0
 8002094:	605a      	str	r2, [r3, #4]
				t->status = BUSY;
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				int transaction_time = RAND_TELLER_TIME;
 800209e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80020a2:	201e      	movs	r0, #30
 80020a4:	f7ff fba0 	bl	80017e8 <random_distance>
 80020a8:	6138      	str	r0, [r7, #16]
				t->total_transaction_time += transaction_time;
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	441a      	add	r2, r3
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	615a      	str	r2, [r3, #20]
				if (transaction_time > t->max_transaction_time){
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	dd02      	ble.n	80020c6 <StartTellerTask01+0x15e>
					t->max_transaction_time = transaction_time;
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	611a      	str	r2, [r3, #16]
				}
				osDelay(SIM_SEC_TO_US(transaction_time)/1000);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f240 6283 	movw	r2, #1667	; 0x683
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	4a26      	ldr	r2, [pc, #152]	; (800216c <StartTellerTask01+0x204>)
 80020d2:	fb82 1203 	smull	r1, r2, r2, r3
 80020d6:	1192      	asrs	r2, r2, #6
 80020d8:	17db      	asrs	r3, r3, #31
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 ff93 	bl	8006008 <osDelay>
				t->wait_start = htim2.Instance->CNT;
 80020e2:	4b21      	ldr	r3, [pc, #132]	; (8002168 <StartTellerTask01+0x200>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	605a      	str	r2, [r3, #4]
				t->customers_served++;
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	601a      	str	r2, [r3, #0]
				t->status = AVAIL;
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				if (!t->break_set){
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d115      	bne.n	8002132 <StartTellerTask01+0x1ca>
					t->next_break = htim2.Instance->CNT + SIM_SEC_TO_US(RAND_NEXT_BREAK);
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <StartTellerTask01+0x200>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800210c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002110:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8002114:	f7ff fb68 	bl	80017e8 <random_distance>
 8002118:	4603      	mov	r3, r0
 800211a:	f240 6283 	movw	r2, #1667	; 0x683
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	18e2      	adds	r2, r4, r3
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	619a      	str	r2, [r3, #24]
					t->break_set = 1;
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	2201      	movs	r2, #1
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c
 800212e:	e000      	b.n	8002132 <StartTellerTask01+0x1ca>
		if (t->break_set && htim2.Instance->CNT >= t->next_break){
 8002130:	bf00      	nop
				}
			}
		}

	}
	int sim_time_sec = US_TO_SIM_SEC(htim2.Instance->CNT);
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <StartTellerTask01+0x200>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <StartTellerTask01+0x208>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0a9b      	lsrs	r3, r3, #10
 8002140:	60fb      	str	r3, [r7, #12]
	if ((sim_time_sec > BANK_HOURS*60*60) && customer_queue.len == 0){
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f246 2270 	movw	r2, #25200	; 0x6270
 8002148:	4293      	cmp	r3, r2
 800214a:	dd06      	ble.n	800215a <StartTellerTask01+0x1f2>
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <StartTellerTask01+0x20c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <StartTellerTask01+0x1f2>
		osThreadTerminate(id);
 8002154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002156:	f003 ff2a 	bl	8005fae <osThreadTerminate>
	}
    osDelay(1);
 800215a:	2001      	movs	r0, #1
 800215c:	f003 ff54 	bl	8006008 <osDelay>
  {
 8002160:	e710      	b.n	8001f84 <StartTellerTask01+0x1c>
 8002162:	bf00      	nop
 8002164:	20000324 	.word	0x20000324
 8002168:	2000022c 	.word	0x2000022c
 800216c:	10624dd3 	.word	0x10624dd3
 8002170:	9d414457 	.word	0x9d414457
 8002174:	200001fc 	.word	0x200001fc

08002178 <StartTellerTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTellerTask02 */
void StartTellerTask02(void *argument)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b08b      	sub	sp, #44	; 0x2c
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTellerTask02 */
	osThreadId id;                                           // id for the currently running thread
	id = osThreadGetId ();
 8002180:	f003 ff0a 	bl	8005f98 <osThreadGetId>
 8002184:	6278      	str	r0, [r7, #36]	; 0x24
	TELLER *t = &tellers[1];
 8002186:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <StartTellerTask02+0x200>)
 8002188:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
	t->wait_start = htim2.Instance->CNT;
 800218a:	4b7c      	ldr	r3, [pc, #496]	; (800237c <StartTellerTask02+0x204>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	605a      	str	r2, [r3, #4]
  for(;;)
  {
	  if (check_btn2())
 8002194:	f7fe fe99 	bl	8000eca <check_btn2>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d004      	beq.n	80021a8 <StartTellerTask02+0x30>
	  {
		t->status = BREAK;
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	2202      	movs	r2, #2
 80021a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80021a6:	e0cc      	b.n	8002342 <StartTellerTask02+0x1ca>
	  }
	  else{
		t->status=AVAIL;
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		if (t->break_set && htim2.Instance->CNT >= t->next_break){
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d051      	beq.n	800225c <StartTellerTask02+0xe4>
 80021b8:	4b70      	ldr	r3, [pc, #448]	; (800237c <StartTellerTask02+0x204>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d34a      	bcc.n	800225c <StartTellerTask02+0xe4>
			uint32_t break_len = RAND_BREAK_LENGTH;
 80021c6:	21f0      	movs	r1, #240	; 0xf0
 80021c8:	203c      	movs	r0, #60	; 0x3c
 80021ca:	f7ff fb0d 	bl	80017e8 <random_distance>
 80021ce:	4603      	mov	r3, r0
 80021d0:	61fb      	str	r3, [r7, #28]
			t->status = BREAK;
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			osDelay(SIM_SEC_TO_US(break_len) / 1000);
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f240 6283 	movw	r2, #1667	; 0x683
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	4a66      	ldr	r2, [pc, #408]	; (8002380 <StartTellerTask02+0x208>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	099b      	lsrs	r3, r3, #6
 80021ec:	4618      	mov	r0, r3
 80021ee:	f003 ff0b 	bl	8006008 <osDelay>
			t->status = AVAIL;
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			t->next_break = htim2.Instance->CNT + SIM_SEC_TO_US(RAND_NEXT_BREAK);
 80021fa:	4b60      	ldr	r3, [pc, #384]	; (800237c <StartTellerTask02+0x204>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002200:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002204:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8002208:	f7ff faee 	bl	80017e8 <random_distance>
 800220c:	4603      	mov	r3, r0
 800220e:	f240 6283 	movw	r2, #1667	; 0x683
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	18e2      	adds	r2, r4, r3
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	619a      	str	r2, [r3, #24]
			t->total_break_time += break_len;
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	461a      	mov	r2, r3
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	461a      	mov	r2, r3
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	621a      	str	r2, [r3, #32]
			t->num_breaks++;
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	61da      	str	r2, [r3, #28]
			if (break_len > t->max_break_time){
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	461a      	mov	r2, r3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	4293      	cmp	r3, r2
 8002240:	d902      	bls.n	8002248 <StartTellerTask02+0xd0>
				t->max_break_time = break_len;
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (break_len < t->min_break_time){
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	461a      	mov	r2, r3
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4293      	cmp	r3, r2
 8002252:	d275      	bcs.n	8002340 <StartTellerTask02+0x1c8>
				t->min_break_time = break_len;
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	629a      	str	r2, [r3, #40]	; 0x28
		if (t->break_set && htim2.Instance->CNT >= t->next_break){
 800225a:	e071      	b.n	8002340 <StartTellerTask02+0x1c8>
			}
		}
		else{
			int err = customer_queue_pop();
 800225c:	f7fe fff8 	bl	8001250 <customer_queue_pop>
 8002260:	61b8      	str	r0, [r7, #24]
			if(!err){
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d16c      	bne.n	8002342 <StartTellerTask02+0x1ca>
				uint32_t wait_time = htim2.Instance->CNT - t->wait_start;
 8002268:	4b44      	ldr	r3, [pc, #272]	; (800237c <StartTellerTask02+0x204>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	617b      	str	r3, [r7, #20]
				wait_time = US_TO_SIM_SEC(wait_time);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	4a42      	ldr	r2, [pc, #264]	; (8002384 <StartTellerTask02+0x20c>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	0a9b      	lsrs	r3, r3, #10
 8002280:	617b      	str	r3, [r7, #20]
				t->total_wait_time += wait_time;
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	441a      	add	r2, r3
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	60da      	str	r2, [r3, #12]
				if (wait_time > t->max_wait_time){
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	461a      	mov	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	4293      	cmp	r3, r2
 8002298:	d902      	bls.n	80022a0 <StartTellerTask02+0x128>
					t->max_wait_time = wait_time;
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	609a      	str	r2, [r3, #8]
				}
				t->wait_start = 0;
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	2200      	movs	r2, #0
 80022a4:	605a      	str	r2, [r3, #4]
				t->status = BUSY;
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				int transaction_time = RAND_TELLER_TIME;
 80022ae:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80022b2:	201e      	movs	r0, #30
 80022b4:	f7ff fa98 	bl	80017e8 <random_distance>
 80022b8:	6138      	str	r0, [r7, #16]
				t->total_transaction_time += transaction_time;
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	441a      	add	r2, r3
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	615a      	str	r2, [r3, #20]
				if (transaction_time > t->max_transaction_time){
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	dd02      	ble.n	80022d6 <StartTellerTask02+0x15e>
					t->max_transaction_time = transaction_time;
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	611a      	str	r2, [r3, #16]
				}
				osDelay(SIM_SEC_TO_US(transaction_time)/1000);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f240 6283 	movw	r2, #1667	; 0x683
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	4a27      	ldr	r2, [pc, #156]	; (8002380 <StartTellerTask02+0x208>)
 80022e2:	fb82 1203 	smull	r1, r2, r2, r3
 80022e6:	1192      	asrs	r2, r2, #6
 80022e8:	17db      	asrs	r3, r3, #31
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fe8b 	bl	8006008 <osDelay>
				t->wait_start = htim2.Instance->CNT;
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <StartTellerTask02+0x204>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	605a      	str	r2, [r3, #4]
				t->customers_served++;
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	601a      	str	r2, [r3, #0]
				t->status = AVAIL;
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				if (!t->break_set){
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	2b00      	cmp	r3, #0
 8002314:	d115      	bne.n	8002342 <StartTellerTask02+0x1ca>
					t->next_break = htim2.Instance->CNT + SIM_SEC_TO_US(RAND_NEXT_BREAK);
 8002316:	4b19      	ldr	r3, [pc, #100]	; (800237c <StartTellerTask02+0x204>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800231c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002320:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8002324:	f7ff fa60 	bl	80017e8 <random_distance>
 8002328:	4603      	mov	r3, r0
 800232a:	f240 6283 	movw	r2, #1667	; 0x683
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	18e2      	adds	r2, r4, r3
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	619a      	str	r2, [r3, #24]
					t->break_set = 1;
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2201      	movs	r2, #1
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c
 800233e:	e000      	b.n	8002342 <StartTellerTask02+0x1ca>
		if (t->break_set && htim2.Instance->CNT >= t->next_break){
 8002340:	bf00      	nop
				}
			}
		}

	}
	int sim_time_sec = US_TO_SIM_SEC(htim2.Instance->CNT);
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <StartTellerTask02+0x204>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <StartTellerTask02+0x20c>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0a9b      	lsrs	r3, r3, #10
 8002350:	60fb      	str	r3, [r7, #12]
	if ((sim_time_sec > BANK_HOURS*60*60) && customer_queue.len == 0){
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f246 2270 	movw	r2, #25200	; 0x6270
 8002358:	4293      	cmp	r3, r2
 800235a:	f77f af1b 	ble.w	8002194 <StartTellerTask02+0x1c>
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <StartTellerTask02+0x210>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f47f af16 	bne.w	8002194 <StartTellerTask02+0x1c>
		osThreadTerminate(id);
 8002368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800236a:	f003 fe20 	bl	8005fae <osThreadTerminate>
    osDelay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f003 fe4a 	bl	8006008 <osDelay>
  {
 8002374:	e70e      	b.n	8002194 <StartTellerTask02+0x1c>
 8002376:	bf00      	nop
 8002378:	20000358 	.word	0x20000358
 800237c:	2000022c 	.word	0x2000022c
 8002380:	10624dd3 	.word	0x10624dd3
 8002384:	9d414457 	.word	0x9d414457
 8002388:	200001fc 	.word	0x200001fc

0800238c <StartTellerTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTellerTask03 */
void StartTellerTask03(void *argument)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b08b      	sub	sp, #44	; 0x2c
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTellerTask03 */
	osThreadId id;                                           // id for the currently running thread
	id = osThreadGetId ();
 8002394:	f003 fe00 	bl	8005f98 <osThreadGetId>
 8002398:	6278      	str	r0, [r7, #36]	; 0x24
	TELLER *t = &tellers[2];
 800239a:	4b7c      	ldr	r3, [pc, #496]	; (800258c <StartTellerTask03+0x200>)
 800239c:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
	t->wait_start = htim2.Instance->CNT;
 800239e:	4b7c      	ldr	r3, [pc, #496]	; (8002590 <StartTellerTask03+0x204>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	605a      	str	r2, [r3, #4]
  for(;;)
  {
	  if (check_btn3()){
 80023a8:	f7fe fd9e 	bl	8000ee8 <check_btn3>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <StartTellerTask03+0x30>
	  		t->status = BREAK;
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80023ba:	e0cc      	b.n	8002556 <StartTellerTask03+0x1ca>
	  	}
	  	else{
	  		t->status=AVAIL;
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  		if (t->break_set && htim2.Instance->CNT >= t->next_break){
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d051      	beq.n	8002470 <StartTellerTask03+0xe4>
 80023cc:	4b70      	ldr	r3, [pc, #448]	; (8002590 <StartTellerTask03+0x204>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d34a      	bcc.n	8002470 <StartTellerTask03+0xe4>
	  			uint32_t break_len = RAND_BREAK_LENGTH;
 80023da:	21f0      	movs	r1, #240	; 0xf0
 80023dc:	203c      	movs	r0, #60	; 0x3c
 80023de:	f7ff fa03 	bl	80017e8 <random_distance>
 80023e2:	4603      	mov	r3, r0
 80023e4:	61fb      	str	r3, [r7, #28]
	  			t->status = BREAK;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  			osDelay(SIM_SEC_TO_US(break_len) / 1000);
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f240 6283 	movw	r2, #1667	; 0x683
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	4a66      	ldr	r2, [pc, #408]	; (8002594 <StartTellerTask03+0x208>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	099b      	lsrs	r3, r3, #6
 8002400:	4618      	mov	r0, r3
 8002402:	f003 fe01 	bl	8006008 <osDelay>
	  			t->status = AVAIL;
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  			t->next_break = htim2.Instance->CNT + SIM_SEC_TO_US(RAND_NEXT_BREAK);
 800240e:	4b60      	ldr	r3, [pc, #384]	; (8002590 <StartTellerTask03+0x204>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002414:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002418:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 800241c:	f7ff f9e4 	bl	80017e8 <random_distance>
 8002420:	4603      	mov	r3, r0
 8002422:	f240 6283 	movw	r2, #1667	; 0x683
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	18e2      	adds	r2, r4, r3
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	619a      	str	r2, [r3, #24]
	  			t->total_break_time += break_len;
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	461a      	mov	r2, r3
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	461a      	mov	r2, r3
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	621a      	str	r2, [r3, #32]
	  			t->num_breaks++;
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	61da      	str	r2, [r3, #28]
	  			if (break_len > t->max_break_time){
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	461a      	mov	r2, r3
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	4293      	cmp	r3, r2
 8002454:	d902      	bls.n	800245c <StartTellerTask03+0xd0>
	  				t->max_break_time = break_len;
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	625a      	str	r2, [r3, #36]	; 0x24
	  			}
	  			if (break_len < t->min_break_time){
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	461a      	mov	r2, r3
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	4293      	cmp	r3, r2
 8002466:	d275      	bcs.n	8002554 <StartTellerTask03+0x1c8>
	  				t->min_break_time = break_len;
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
	  		if (t->break_set && htim2.Instance->CNT >= t->next_break){
 800246e:	e071      	b.n	8002554 <StartTellerTask03+0x1c8>
	  			}
	  		}
	  		else{
	  			int err = customer_queue_pop();
 8002470:	f7fe feee 	bl	8001250 <customer_queue_pop>
 8002474:	61b8      	str	r0, [r7, #24]
	  			if(!err){
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d16c      	bne.n	8002556 <StartTellerTask03+0x1ca>
	  				uint32_t wait_time = htim2.Instance->CNT - t->wait_start;
 800247c:	4b44      	ldr	r3, [pc, #272]	; (8002590 <StartTellerTask03+0x204>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
	  				wait_time = US_TO_SIM_SEC(wait_time);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	4a42      	ldr	r2, [pc, #264]	; (8002598 <StartTellerTask03+0x20c>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0a9b      	lsrs	r3, r3, #10
 8002494:	617b      	str	r3, [r7, #20]
	  				t->total_wait_time += wait_time;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	441a      	add	r2, r3
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	60da      	str	r2, [r3, #12]
	  				if (wait_time > t->max_wait_time){
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	461a      	mov	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d902      	bls.n	80024b4 <StartTellerTask03+0x128>
	  					t->max_wait_time = wait_time;
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	609a      	str	r2, [r3, #8]
	  				}
	  				t->wait_start = 0;
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	2200      	movs	r2, #0
 80024b8:	605a      	str	r2, [r3, #4]
	  				t->status = BUSY;
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  				int transaction_time = RAND_TELLER_TIME;
 80024c2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80024c6:	201e      	movs	r0, #30
 80024c8:	f7ff f98e 	bl	80017e8 <random_distance>
 80024cc:	6138      	str	r0, [r7, #16]
	  				t->total_transaction_time += transaction_time;
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	441a      	add	r2, r3
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	615a      	str	r2, [r3, #20]
	  				if (transaction_time > t->max_transaction_time){
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	dd02      	ble.n	80024ea <StartTellerTask03+0x15e>
	  					t->max_transaction_time = transaction_time;
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	611a      	str	r2, [r3, #16]
	  				}
	  				osDelay(SIM_SEC_TO_US(transaction_time)/1000);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f240 6283 	movw	r2, #1667	; 0x683
 80024f0:	fb02 f303 	mul.w	r3, r2, r3
 80024f4:	4a27      	ldr	r2, [pc, #156]	; (8002594 <StartTellerTask03+0x208>)
 80024f6:	fb82 1203 	smull	r1, r2, r2, r3
 80024fa:	1192      	asrs	r2, r2, #6
 80024fc:	17db      	asrs	r3, r3, #31
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	4618      	mov	r0, r3
 8002502:	f003 fd81 	bl	8006008 <osDelay>
	  				t->wait_start = htim2.Instance->CNT;
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <StartTellerTask03+0x204>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	605a      	str	r2, [r3, #4]
	  				t->customers_served++;
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	601a      	str	r2, [r3, #0]
	  				t->status = AVAIL;
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  				if (!t->break_set){
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	2b00      	cmp	r3, #0
 8002528:	d115      	bne.n	8002556 <StartTellerTask03+0x1ca>
	  					t->next_break = htim2.Instance->CNT + SIM_SEC_TO_US(RAND_NEXT_BREAK);
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <StartTellerTask03+0x204>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002530:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002534:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8002538:	f7ff f956 	bl	80017e8 <random_distance>
 800253c:	4603      	mov	r3, r0
 800253e:	f240 6283 	movw	r2, #1667	; 0x683
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	18e2      	adds	r2, r4, r3
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	619a      	str	r2, [r3, #24]
	  					t->break_set = 1;
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	2201      	movs	r2, #1
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
 8002552:	e000      	b.n	8002556 <StartTellerTask03+0x1ca>
	  		if (t->break_set && htim2.Instance->CNT >= t->next_break){
 8002554:	bf00      	nop
	  				}
	  			}
	  		}

	  	}
	  	int sim_time_sec = US_TO_SIM_SEC(htim2.Instance->CNT);
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <StartTellerTask03+0x204>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	4a0e      	ldr	r2, [pc, #56]	; (8002598 <StartTellerTask03+0x20c>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	0a9b      	lsrs	r3, r3, #10
 8002564:	60fb      	str	r3, [r7, #12]
	  	if ((sim_time_sec > BANK_HOURS*60*60) && customer_queue.len == 0){
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f246 2270 	movw	r2, #25200	; 0x6270
 800256c:	4293      	cmp	r3, r2
 800256e:	f77f af1b 	ble.w	80023a8 <StartTellerTask03+0x1c>
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <StartTellerTask03+0x210>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f47f af16 	bne.w	80023a8 <StartTellerTask03+0x1c>
	  		osThreadTerminate(id);
 800257c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800257e:	f003 fd16 	bl	8005fae <osThreadTerminate>
    osDelay(1);
 8002582:	2001      	movs	r0, #1
 8002584:	f003 fd40 	bl	8006008 <osDelay>
  {
 8002588:	e70e      	b.n	80023a8 <StartTellerTask03+0x1c>
 800258a:	bf00      	nop
 800258c:	2000038c 	.word	0x2000038c
 8002590:	2000022c 	.word	0x2000022c
 8002594:	10624dd3 	.word	0x10624dd3
 8002598:	9d414457 	.word	0x9d414457
 800259c:	200001fc 	.word	0x200001fc

080025a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a4:	b672      	cpsid	i
}
 80025a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <Error_Handler+0x8>
	...

080025ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_MspInit+0x4c>)
 80025b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_MspInit+0x4c>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6613      	str	r3, [r2, #96]	; 0x60
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_MspInit+0x4c>)
 80025c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_MspInit+0x4c>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_MspInit+0x4c>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6593      	str	r3, [r2, #88]	; 0x58
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_MspInit+0x4c>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	210f      	movs	r1, #15
 80025e6:	f06f 0001 	mvn.w	r0, #1
 80025ea:	f000 fc32 	bl	8002e52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b0a6      	sub	sp, #152	; 0x98
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	2288      	movs	r2, #136	; 0x88
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f006 fee5 	bl	80093dc <memset>
  if(hrng->Instance==RNG)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a19      	ldr	r2, [pc, #100]	; (800267c <HAL_RNG_MspInit+0x80>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d12b      	bne.n	8002674 <HAL_RNG_MspInit+0x78>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800261c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002620:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8002622:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800262a:	2301      	movs	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800262e:	2301      	movs	r3, #1
 8002630:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002632:	2310      	movs	r3, #16
 8002634:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002636:	2307      	movs	r3, #7
 8002638:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800263a:	2302      	movs	r3, #2
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800263e:	2302      	movs	r3, #2
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002642:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	4618      	mov	r0, r3
 800264e:	f001 fc73 	bl	8003f38 <HAL_RCCEx_PeriphCLKConfig>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8002658:	f7ff ffa2 	bl	80025a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_RNG_MspInit+0x84>)
 800265e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_RNG_MspInit+0x84>)
 8002662:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RNG_MspInit+0x84>)
 800266a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002674:	bf00      	nop
 8002676:	3798      	adds	r7, #152	; 0x98
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	50060800 	.word	0x50060800
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002694:	d113      	bne.n	80026be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <HAL_TIM_Base_MspInit+0x44>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <HAL_TIM_Base_MspInit+0x44>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6593      	str	r3, [r2, #88]	; 0x58
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_TIM_Base_MspInit+0x44>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2105      	movs	r1, #5
 80026b2:	201c      	movs	r0, #28
 80026b4:	f000 fbcd 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026b8:	201c      	movs	r0, #28
 80026ba:	f000 fbe6 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000

080026cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b0ac      	sub	sp, #176	; 0xb0
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2288      	movs	r2, #136	; 0x88
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f006 fe75 	bl	80093dc <memset>
  if(huart->Instance==USART2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a21      	ldr	r2, [pc, #132]	; (800277c <HAL_UART_MspInit+0xb0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d13b      	bne.n	8002774 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026fc:	2302      	movs	r3, #2
 80026fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002700:	2300      	movs	r3, #0
 8002702:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4618      	mov	r0, r3
 800270a:	f001 fc15 	bl	8003f38 <HAL_RCCEx_PeriphCLKConfig>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002714:	f7ff ff44 	bl	80025a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_UART_MspInit+0xb4>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	4a18      	ldr	r2, [pc, #96]	; (8002780 <HAL_UART_MspInit+0xb4>)
 800271e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002722:	6593      	str	r3, [r2, #88]	; 0x58
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_UART_MspInit+0xb4>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_UART_MspInit+0xb4>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	4a12      	ldr	r2, [pc, #72]	; (8002780 <HAL_UART_MspInit+0xb4>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_UART_MspInit+0xb4>)
 800273e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002748:	230c      	movs	r3, #12
 800274a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274e:	2302      	movs	r3, #2
 8002750:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002760:	2307      	movs	r3, #7
 8002762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800276a:	4619      	mov	r1, r3
 800276c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002770:	f000 fba6 	bl	8002ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002774:	bf00      	nop
 8002776:	37b0      	adds	r7, #176	; 0xb0
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40004400 	.word	0x40004400
 8002780:	40021000 	.word	0x40021000

08002784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <NMI_Handler+0x4>

0800278a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278e:	e7fe      	b.n	800278e <HardFault_Handler+0x4>

08002790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002794:	e7fe      	b.n	8002794 <MemManage_Handler+0x4>

08002796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279a:	e7fe      	b.n	800279a <BusFault_Handler+0x4>

0800279c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <UsageFault_Handler+0x4>

080027a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b4:	f000 fa2e 	bl	8002c14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80027b8:	f005 fc40 	bl	800803c <xTaskGetSchedulerState>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d001      	beq.n	80027c6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80027c2:	f006 fb29 	bl	8008e18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <TIM2_IRQHandler+0x10>)
 80027d2:	f002 f9db 	bl	8004b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000022c 	.word	0x2000022c

080027e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <_kill>:

int _kill(int pid, int sig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027fa:	f006 fda5 	bl	8009348 <__errno>
 80027fe:	4603      	mov	r3, r0
 8002800:	2216      	movs	r2, #22
 8002802:	601a      	str	r2, [r3, #0]
  return -1;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_exit>:

void _exit (int status)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ffe7 	bl	80027f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002822:	e7fe      	b.n	8002822 <_exit+0x12>

08002824 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	e00a      	b.n	800284c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002836:	f3af 8000 	nop.w
 800283a:	4601      	mov	r1, r0
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	60ba      	str	r2, [r7, #8]
 8002842:	b2ca      	uxtb	r2, r1
 8002844:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	dbf0      	blt.n	8002836 <_read+0x12>
  }

  return len;
 8002854:	687b      	ldr	r3, [r7, #4]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b086      	sub	sp, #24
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e009      	b.n	8002884 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	60ba      	str	r2, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3301      	adds	r3, #1
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	429a      	cmp	r2, r3
 800288a:	dbf1      	blt.n	8002870 <_write+0x12>
  }
  return len;
 800288c:	687b      	ldr	r3, [r7, #4]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <_close>:

int _close(int file)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028be:	605a      	str	r2, [r3, #4]
  return 0;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <_isatty>:

int _isatty(int file)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028d6:	2301      	movs	r3, #1
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <_sbrk+0x5c>)
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <_sbrk+0x60>)
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <_sbrk+0x64>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <_sbrk+0x64>)
 800291e:	4a12      	ldr	r2, [pc, #72]	; (8002968 <_sbrk+0x68>)
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <_sbrk+0x64>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	429a      	cmp	r2, r3
 800292e:	d207      	bcs.n	8002940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002930:	f006 fd0a 	bl	8009348 <__errno>
 8002934:	4603      	mov	r3, r0
 8002936:	220c      	movs	r2, #12
 8002938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800293e:	e009      	b.n	8002954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <_sbrk+0x64>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <_sbrk+0x64>)
 8002950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20018000 	.word	0x20018000
 8002960:	00000400 	.word	0x00000400
 8002964:	20000320 	.word	0x20000320
 8002968:	200020c8 	.word	0x200020c8

0800296c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <SystemInit+0x5c>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <SystemInit+0x5c>)
 8002978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800297c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <SystemInit+0x60>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <SystemInit+0x60>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <SystemInit+0x60>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <SystemInit+0x60>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a0d      	ldr	r2, [pc, #52]	; (80029cc <SystemInit+0x60>)
 8002998:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800299c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80029a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <SystemInit+0x60>)
 80029a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <SystemInit+0x60>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a07      	ldr	r2, [pc, #28]	; (80029cc <SystemInit+0x60>)
 80029b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <SystemInit+0x60>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000ed00 	.word	0xe000ed00
 80029cc:	40021000 	.word	0x40021000

080029d0 <teller_init>:
#include "string.h"
#include "stdio.h"

TELLER tellers[NUM_TELLERS];

int teller_init(int num){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	//Create each teller
	for (int i = 0; i<NUM_TELLERS;i++){
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e033      	b.n	8002a46 <teller_init+0x76>
		TELLER *t = &tellers[i];
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2234      	movs	r2, #52	; 0x34
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <teller_init+0x88>)
 80029e8:	4413      	add	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
		memset(t, 0, sizeof(TELLER));
 80029ec:	2234      	movs	r2, #52	; 0x34
 80029ee:	2100      	movs	r1, #0
 80029f0:	68b8      	ldr	r0, [r7, #8]
 80029f2:	f006 fcf3 	bl	80093dc <memset>
		t->customers_served = 0;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
		t->wait_start = 0;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
		t->max_wait_time = 0;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
		t->total_wait_time = 0;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
		t->max_transaction_time = 0 ;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
		t->total_transaction_time = 0;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2200      	movs	r2, #0
 8002a18:	615a      	str	r2, [r3, #20]
		t->num_breaks = 0;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	61da      	str	r2, [r3, #28]
		t->total_break_time = 0;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2200      	movs	r2, #0
 8002a24:	621a      	str	r2, [r3, #32]
		t->max_break_time = TELLER_BREAK_MIN;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	223c      	movs	r2, #60	; 0x3c
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
		t->min_break_time = TELLER_BREAK_MAX;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	22f0      	movs	r2, #240	; 0xf0
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
		t->break_set = 0;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
		t->status = AVAIL;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (int i = 0; i<NUM_TELLERS;i++){
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3301      	adds	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	ddc8      	ble.n	80029de <teller_init+0xe>
	}
	return 0;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000324 	.word	0x20000324

08002a5c <teller_end>:

int teller_end(int num){
 8002a5c:	b4b0      	push	{r4, r5, r7}
 8002a5e:	b091      	sub	sp, #68	; 0x44
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	if (customer_queue.len != 0){return 0;}
 8002a64:	4b15      	ldr	r3, [pc, #84]	; (8002abc <teller_end+0x60>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <teller_end+0x14>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e020      	b.n	8002ab2 <teller_end+0x56>
	else{
		for (int ii = 0; ii < NUM_TELLERS; ii++){
 8002a70:	2300      	movs	r3, #0
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a74:	e019      	b.n	8002aaa <teller_end+0x4e>
			TELLER t = tellers[ii];
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <teller_end+0x64>)
 8002a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a7a:	2134      	movs	r1, #52	; 0x34
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	f107 0408 	add.w	r4, r7, #8
 8002a86:	461d      	mov	r5, r3
 8002a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	6023      	str	r3, [r4, #0]
			if (t.status != AVAIL){
 8002a98:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <teller_end+0x48>
				//failure, all tellers aren't done
				return 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e006      	b.n	8002ab2 <teller_end+0x56>
		for (int ii = 0; ii < NUM_TELLERS; ii++){
 8002aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	dde2      	ble.n	8002a76 <teller_end+0x1a>
			}
		}
	}
	//Success, All tellers are done
	return 1;
 8002ab0:	2301      	movs	r3, #1
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3744      	adds	r7, #68	; 0x44
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bcb0      	pop	{r4, r5, r7}
 8002aba:	4770      	bx	lr
 8002abc:	200001fc 	.word	0x200001fc
 8002ac0:	20000324 	.word	0x20000324

08002ac4 <get_status_name>:

char* get_status_name(enum teller_status status){
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
	switch(status)
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d00a      	beq.n	8002aea <get_status_name+0x26>
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	dc0a      	bgt.n	8002aee <get_status_name+0x2a>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <get_status_name+0x1e>
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d002      	beq.n	8002ae6 <get_status_name+0x22>
 8002ae0:	e005      	b.n	8002aee <get_status_name+0x2a>
	{
		case AVAIL: return"AVAIL";
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <get_status_name+0x38>)
 8002ae4:	e004      	b.n	8002af0 <get_status_name+0x2c>
		case BUSY: return "BUSY";
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <get_status_name+0x3c>)
 8002ae8:	e002      	b.n	8002af0 <get_status_name+0x2c>
		case BREAK: return "BREAK";
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <get_status_name+0x40>)
 8002aec:	e000      	b.n	8002af0 <get_status_name+0x2c>
		default: return "BUSY";
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <get_status_name+0x3c>)
	}

}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	0800c550 	.word	0x0800c550
 8002b00:	0800c558 	.word	0x0800c558
 8002b04:	0800c560 	.word	0x0800c560

08002b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b0c:	f7ff ff2e 	bl	800296c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b12:	e003      	b.n	8002b1c <LoopCopyDataInit>

08002b14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b1a:	3104      	adds	r1, #4

08002b1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b1c:	480a      	ldr	r0, [pc, #40]	; (8002b48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b24:	d3f6      	bcc.n	8002b14 <CopyDataInit>
	ldr	r2, =_sbss
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b28:	e002      	b.n	8002b30 <LoopFillZerobss>

08002b2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b2c:	f842 3b04 	str.w	r3, [r2], #4

08002b30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <LoopForever+0x16>)
	cmp	r2, r3
 8002b32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b34:	d3f9      	bcc.n	8002b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b36:	f006 fc1f 	bl	8009378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b3a:	f7fe fbed 	bl	8001318 <main>

08002b3e <LoopForever>:

LoopForever:
    b LoopForever
 8002b3e:	e7fe      	b.n	8002b3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b40:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002b44:	0800ca88 	.word	0x0800ca88
	ldr	r0, =_sdata
 8002b48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b4c:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8002b50:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8002b54:	200020c4 	.word	0x200020c4

08002b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b58:	e7fe      	b.n	8002b58 <ADC1_2_IRQHandler>
	...

08002b5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_Init+0x3c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <HAL_Init+0x3c>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b72:	2003      	movs	r0, #3
 8002b74:	f000 f962 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b78:	200f      	movs	r0, #15
 8002b7a:	f000 f80f 	bl	8002b9c <HAL_InitTick>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	71fb      	strb	r3, [r7, #7]
 8002b88:	e001      	b.n	8002b8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b8a:	f7ff fd0f 	bl	80025ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40022000 	.word	0x40022000

08002b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <HAL_InitTick+0x6c>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d023      	beq.n	8002bf8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_InitTick+0x70>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <HAL_InitTick+0x6c>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f96d 	bl	8002ea6 <HAL_SYSTICK_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b0f      	cmp	r3, #15
 8002bd6:	d809      	bhi.n	8002bec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002be0:	f000 f937 	bl	8002e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002be4:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <HAL_InitTick+0x74>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e007      	b.n	8002bfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e004      	b.n	8002bfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
 8002bf6:	e001      	b.n	8002bfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	20000004 	.word	0x20000004

08002c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_IncTick+0x20>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_IncTick+0x24>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <HAL_IncTick+0x24>)
 8002c26:	6013      	str	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000008 	.word	0x20000008
 8002c38:	200003c0 	.word	0x200003c0

08002c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_GetTick+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	200003c0 	.word	0x200003c0

08002c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff ffee 	bl	8002c3c <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c6c:	d005      	beq.n	8002c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_Delay+0x44>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c7a:	bf00      	nop
 8002c7c:	f7ff ffde 	bl	8002c3c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d8f7      	bhi.n	8002c7c <HAL_Delay+0x28>
  {
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000008 	.word	0x20000008

08002c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0b      	blt.n	8002d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4907      	ldr	r1, [pc, #28]	; (8002d38 <__NVIC_EnableIRQ+0x38>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e1c:	f7ff ff8e 	bl	8002d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff29 	bl	8002c9c <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff3e 	bl	8002ce4 <__NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff8e 	bl	8002d90 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff5d 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff31 	bl	8002d00 <__NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ffa2 	bl	8002df8 <SysTick_Config>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ece:	e17f      	b.n	80031d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8002edc:	4013      	ands	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8171 	beq.w	80031ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d00b      	beq.n	8002f08 <HAL_GPIO_Init+0x48>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d007      	beq.n	8002f08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002efc:	2b11      	cmp	r3, #17
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b12      	cmp	r3, #18
 8002f06:	d130      	bne.n	8002f6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	2203      	movs	r2, #3
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f3e:	2201      	movs	r2, #1
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f003 0201 	and.w	r2, r3, #1
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d118      	bne.n	8002fa8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	08db      	lsrs	r3, r3, #3
 8002f92:	f003 0201 	and.w	r2, r3, #1
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x128>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b12      	cmp	r3, #18
 8002fe6:	d123      	bne.n	8003030 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	08da      	lsrs	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3208      	adds	r2, #8
 8002ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	08da      	lsrs	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3208      	adds	r2, #8
 800302a:	6939      	ldr	r1, [r7, #16]
 800302c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0203 	and.w	r2, r3, #3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80ac 	beq.w	80031ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003072:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <HAL_GPIO_Init+0x330>)
 8003074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003076:	4a5e      	ldr	r2, [pc, #376]	; (80031f0 <HAL_GPIO_Init+0x330>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6613      	str	r3, [r2, #96]	; 0x60
 800307e:	4b5c      	ldr	r3, [pc, #368]	; (80031f0 <HAL_GPIO_Init+0x330>)
 8003080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800308a:	4a5a      	ldr	r2, [pc, #360]	; (80031f4 <HAL_GPIO_Init+0x334>)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030b4:	d025      	beq.n	8003102 <HAL_GPIO_Init+0x242>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4f      	ldr	r2, [pc, #316]	; (80031f8 <HAL_GPIO_Init+0x338>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01f      	beq.n	80030fe <HAL_GPIO_Init+0x23e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4e      	ldr	r2, [pc, #312]	; (80031fc <HAL_GPIO_Init+0x33c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d019      	beq.n	80030fa <HAL_GPIO_Init+0x23a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4d      	ldr	r2, [pc, #308]	; (8003200 <HAL_GPIO_Init+0x340>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_GPIO_Init+0x236>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4c      	ldr	r2, [pc, #304]	; (8003204 <HAL_GPIO_Init+0x344>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00d      	beq.n	80030f2 <HAL_GPIO_Init+0x232>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4b      	ldr	r2, [pc, #300]	; (8003208 <HAL_GPIO_Init+0x348>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <HAL_GPIO_Init+0x22e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4a      	ldr	r2, [pc, #296]	; (800320c <HAL_GPIO_Init+0x34c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_GPIO_Init+0x22a>
 80030e6:	2306      	movs	r3, #6
 80030e8:	e00c      	b.n	8003104 <HAL_GPIO_Init+0x244>
 80030ea:	2307      	movs	r3, #7
 80030ec:	e00a      	b.n	8003104 <HAL_GPIO_Init+0x244>
 80030ee:	2305      	movs	r3, #5
 80030f0:	e008      	b.n	8003104 <HAL_GPIO_Init+0x244>
 80030f2:	2304      	movs	r3, #4
 80030f4:	e006      	b.n	8003104 <HAL_GPIO_Init+0x244>
 80030f6:	2303      	movs	r3, #3
 80030f8:	e004      	b.n	8003104 <HAL_GPIO_Init+0x244>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e002      	b.n	8003104 <HAL_GPIO_Init+0x244>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_GPIO_Init+0x244>
 8003102:	2300      	movs	r3, #0
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	f002 0203 	and.w	r2, r2, #3
 800310a:	0092      	lsls	r2, r2, #2
 800310c:	4093      	lsls	r3, r2
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003114:	4937      	ldr	r1, [pc, #220]	; (80031f4 <HAL_GPIO_Init+0x334>)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	089b      	lsrs	r3, r3, #2
 800311a:	3302      	adds	r3, #2
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003122:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <HAL_GPIO_Init+0x350>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43db      	mvns	r3, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003146:	4a32      	ldr	r2, [pc, #200]	; (8003210 <HAL_GPIO_Init+0x350>)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800314c:	4b30      	ldr	r3, [pc, #192]	; (8003210 <HAL_GPIO_Init+0x350>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <HAL_GPIO_Init+0x350>)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003176:	4b26      	ldr	r3, [pc, #152]	; (8003210 <HAL_GPIO_Init+0x350>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800319a:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <HAL_GPIO_Init+0x350>)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_GPIO_Init+0x350>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031c4:	4a12      	ldr	r2, [pc, #72]	; (8003210 <HAL_GPIO_Init+0x350>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	3301      	adds	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa22 f303 	lsr.w	r3, r2, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f47f ae78 	bne.w	8002ed0 <HAL_GPIO_Init+0x10>
  }
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40010000 	.word	0x40010000
 80031f8:	48000400 	.word	0x48000400
 80031fc:	48000800 	.word	0x48000800
 8003200:	48000c00 	.word	0x48000c00
 8003204:	48001000 	.word	0x48001000
 8003208:	48001400 	.word	0x48001400
 800320c:	48001800 	.word	0x48001800
 8003210:	40010400 	.word	0x40010400

08003214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	887b      	ldrh	r3, [r7, #2]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	e001      	b.n	8003236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
 8003250:	4613      	mov	r3, r2
 8003252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003254:	787b      	ldrb	r3, [r7, #1]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003260:	e002      	b.n	8003268 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a04      	ldr	r2, [pc, #16]	; (8003290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003282:	6013      	str	r3, [r2, #0]
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40007000 	.word	0x40007000

08003294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <HAL_PWREx_GetVoltageRange+0x18>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40007000 	.word	0x40007000

080032b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032be:	d130      	bne.n	8003322 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032c0:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032cc:	d038      	beq.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d6:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2232      	movs	r2, #50	; 0x32
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0c9b      	lsrs	r3, r3, #18
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f4:	e002      	b.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fc:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003308:	d102      	bne.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x60>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f2      	bne.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331c:	d110      	bne.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e00f      	b.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332e:	d007      	beq.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003338:	4a05      	ldr	r2, [pc, #20]	; (8003350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40007000 	.word	0x40007000
 8003354:	20000000 	.word	0x20000000
 8003358:	431bde83 	.word	0x431bde83

0800335c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e3d8      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336e:	4b97      	ldr	r3, [pc, #604]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003378:	4b94      	ldr	r3, [pc, #592]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80e4 	beq.w	8003558 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4a>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b0c      	cmp	r3, #12
 800339a:	f040 808b 	bne.w	80034b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	f040 8087 	bne.w	80034b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033a6:	4b89      	ldr	r3, [pc, #548]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_RCC_OscConfig+0x62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e3b0      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1a      	ldr	r2, [r3, #32]
 80033c2:	4b82      	ldr	r3, [pc, #520]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <HAL_RCC_OscConfig+0x7c>
 80033ce:	4b7f      	ldr	r3, [pc, #508]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d6:	e005      	b.n	80033e4 <HAL_RCC_OscConfig+0x88>
 80033d8:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d223      	bcs.n	8003430 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fd43 	bl	8003e78 <RCC_SetFlashLatencyFromMSIRange>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e391      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033fc:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a72      	ldr	r2, [pc, #456]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003402:	f043 0308 	orr.w	r3, r3, #8
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b70      	ldr	r3, [pc, #448]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	496d      	ldr	r1, [pc, #436]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800341a:	4b6c      	ldr	r3, [pc, #432]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	4968      	ldr	r1, [pc, #416]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
 800342e:	e025      	b.n	800347c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003430:	4b66      	ldr	r3, [pc, #408]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a65      	ldr	r2, [pc, #404]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003436:	f043 0308 	orr.w	r3, r3, #8
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4960      	ldr	r1, [pc, #384]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800344e:	4b5f      	ldr	r3, [pc, #380]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	495b      	ldr	r1, [pc, #364]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fd03 	bl	8003e78 <RCC_SetFlashLatencyFromMSIRange>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e351      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800347c:	f000 fc38 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	4b52      	ldr	r3, [pc, #328]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	4950      	ldr	r1, [pc, #320]	; (80035d0 <HAL_RCC_OscConfig+0x274>)
 800348e:	5ccb      	ldrb	r3, [r1, r3]
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
 8003498:	4a4e      	ldr	r2, [pc, #312]	; (80035d4 <HAL_RCC_OscConfig+0x278>)
 800349a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800349c:	4b4e      	ldr	r3, [pc, #312]	; (80035d8 <HAL_RCC_OscConfig+0x27c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fb7b 	bl	8002b9c <HAL_InitTick>
 80034a6:	4603      	mov	r3, r0
 80034a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d052      	beq.n	8003556 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	e335      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d032      	beq.n	8003522 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034bc:	4b43      	ldr	r3, [pc, #268]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a42      	ldr	r2, [pc, #264]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034c8:	f7ff fbb8 	bl	8002c3c <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d0:	f7ff fbb4 	bl	8002c3c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e31e      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e2:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ee:	4b37      	ldr	r3, [pc, #220]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a36      	ldr	r2, [pc, #216]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034f4:	f043 0308 	orr.w	r3, r3, #8
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4931      	ldr	r1, [pc, #196]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350c:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	492c      	ldr	r1, [pc, #176]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
 8003520:	e01a      	b.n	8003558 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003522:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a29      	ldr	r2, [pc, #164]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800352e:	f7ff fb85 	bl	8002c3c <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003536:	f7ff fb81 	bl	8002c3c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e2eb      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003548:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <HAL_RCC_OscConfig+0x1da>
 8003554:	e000      	b.n	8003558 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003556:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d074      	beq.n	800364e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b08      	cmp	r3, #8
 8003568:	d005      	beq.n	8003576 <HAL_RCC_OscConfig+0x21a>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b0c      	cmp	r3, #12
 800356e:	d10e      	bne.n	800358e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b03      	cmp	r3, #3
 8003574:	d10b      	bne.n	800358e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d064      	beq.n	800364c <HAL_RCC_OscConfig+0x2f0>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d160      	bne.n	800364c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e2c8      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x24a>
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e026      	b.n	80035f4 <HAL_RCC_OscConfig+0x298>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ae:	d115      	bne.n	80035dc <HAL_RCC_OscConfig+0x280>
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a05      	ldr	r2, [pc, #20]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a02      	ldr	r2, [pc, #8]	; (80035cc <HAL_RCC_OscConfig+0x270>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e014      	b.n	80035f4 <HAL_RCC_OscConfig+0x298>
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	0800c654 	.word	0x0800c654
 80035d4:	20000000 	.word	0x20000000
 80035d8:	20000004 	.word	0x20000004
 80035dc:	4ba0      	ldr	r3, [pc, #640]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a9f      	ldr	r2, [pc, #636]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b9d      	ldr	r3, [pc, #628]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a9c      	ldr	r2, [pc, #624]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7ff fb1e 	bl	8002c3c <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7ff fb1a 	bl	8002c3c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e284      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003616:	4b92      	ldr	r3, [pc, #584]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x2a8>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7ff fb0a 	bl	8002c3c <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7ff fb06 	bl	8002c3c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e270      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800363e:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x2d0>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d060      	beq.n	800371c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b04      	cmp	r3, #4
 800365e:	d005      	beq.n	800366c <HAL_RCC_OscConfig+0x310>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d119      	bne.n	800369a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d116      	bne.n	800369a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800366c:	4b7c      	ldr	r3, [pc, #496]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_OscConfig+0x328>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e24d      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b76      	ldr	r3, [pc, #472]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	4973      	ldr	r1, [pc, #460]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003698:	e040      	b.n	800371c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d023      	beq.n	80036ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a2:	4b6f      	ldr	r3, [pc, #444]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6e      	ldr	r2, [pc, #440]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7ff fac5 	bl	8002c3c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7ff fac1 	bl	8002c3c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e22b      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c8:	4b65      	ldr	r3, [pc, #404]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4b62      	ldr	r3, [pc, #392]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	061b      	lsls	r3, r3, #24
 80036e2:	495f      	ldr	r1, [pc, #380]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	604b      	str	r3, [r1, #4]
 80036e8:	e018      	b.n	800371c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ea:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a5c      	ldr	r2, [pc, #368]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80036f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7ff faa1 	bl	8002c3c <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fe:	f7ff fa9d 	bl	8002c3c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e207      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d03c      	beq.n	80037a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01c      	beq.n	800376a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003730:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003736:	4a4a      	ldr	r2, [pc, #296]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003740:	f7ff fa7c 	bl	8002c3c <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003748:	f7ff fa78 	bl	8002c3c <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1e2      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800375a:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800375c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ef      	beq.n	8003748 <HAL_RCC_OscConfig+0x3ec>
 8003768:	e01b      	b.n	80037a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800376c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003770:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7ff fa5f 	bl	8002c3c <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003782:	f7ff fa5b 	bl	8002c3c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e1c5      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1ef      	bne.n	8003782 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80a6 	beq.w	80038fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b0:	2300      	movs	r3, #0
 80037b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	4a26      	ldr	r2, [pc, #152]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ca:	6593      	str	r3, [r2, #88]	; 0x58
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d8:	2301      	movs	r3, #1
 80037da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d118      	bne.n	800381a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e8:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f4:	f7ff fa22 	bl	8002c3c <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fc:	f7ff fa1e 	bl	8002c3c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e188      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <HAL_RCC_OscConfig+0x508>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d108      	bne.n	8003834 <HAL_RCC_OscConfig+0x4d8>
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003832:	e029      	b.n	8003888 <HAL_RCC_OscConfig+0x52c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b05      	cmp	r3, #5
 800383a:	d115      	bne.n	8003868 <HAL_RCC_OscConfig+0x50c>
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a07      	ldr	r2, [pc, #28]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	4a03      	ldr	r2, [pc, #12]	; (8003860 <HAL_RCC_OscConfig+0x504>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800385c:	e014      	b.n	8003888 <HAL_RCC_OscConfig+0x52c>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	40007000 	.word	0x40007000
 8003868:	4b91      	ldr	r3, [pc, #580]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	4a90      	ldr	r2, [pc, #576]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003878:	4b8d      	ldr	r3, [pc, #564]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	4a8c      	ldr	r2, [pc, #560]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d016      	beq.n	80038be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7ff f9d4 	bl	8002c3c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7ff f9d0 	bl	8002c3c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e138      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ae:	4b80      	ldr	r3, [pc, #512]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ed      	beq.n	8003898 <HAL_RCC_OscConfig+0x53c>
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7ff f9bd 	bl	8002c3c <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7ff f9b9 	bl	8002c3c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e121      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038dc:	4b74      	ldr	r3, [pc, #464]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ed      	bne.n	80038c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ea:	7ffb      	ldrb	r3, [r7, #31]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f0:	4b6f      	ldr	r3, [pc, #444]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	4a6e      	ldr	r2, [pc, #440]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 80038f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 810c 	beq.w	8003b1e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2b02      	cmp	r3, #2
 800390c:	f040 80d4 	bne.w	8003ab8 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003910:	4b67      	ldr	r3, [pc, #412]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f003 0203 	and.w	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	429a      	cmp	r2, r3
 8003922:	d130      	bne.n	8003986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	3b01      	subs	r3, #1
 8003930:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d127      	bne.n	8003986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d11f      	bne.n	8003986 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003950:	2a07      	cmp	r2, #7
 8003952:	bf14      	ite	ne
 8003954:	2201      	movne	r2, #1
 8003956:	2200      	moveq	r2, #0
 8003958:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800395a:	4293      	cmp	r3, r2
 800395c:	d113      	bne.n	8003986 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	3b01      	subs	r3, #1
 800396c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d109      	bne.n	8003986 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d06e      	beq.n	8003a64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b0c      	cmp	r3, #12
 800398a:	d069      	beq.n	8003a60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800398c:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003998:	4b45      	ldr	r3, [pc, #276]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0bb      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039a8:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a40      	ldr	r2, [pc, #256]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 80039ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039b4:	f7ff f942 	bl	8002c3c <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7ff f93e 	bl	8002c3c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e0a8      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ce:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039da:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <HAL_RCC_OscConfig+0x758>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039ea:	3a01      	subs	r2, #1
 80039ec:	0112      	lsls	r2, r2, #4
 80039ee:	4311      	orrs	r1, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039f4:	0212      	lsls	r2, r2, #8
 80039f6:	4311      	orrs	r1, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039fc:	0852      	lsrs	r2, r2, #1
 80039fe:	3a01      	subs	r2, #1
 8003a00:	0552      	lsls	r2, r2, #21
 8003a02:	4311      	orrs	r1, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a08:	0852      	lsrs	r2, r2, #1
 8003a0a:	3a01      	subs	r2, #1
 8003a0c:	0652      	lsls	r2, r2, #25
 8003a0e:	4311      	orrs	r1, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a14:	0912      	lsrs	r2, r2, #4
 8003a16:	0452      	lsls	r2, r2, #17
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	4925      	ldr	r1, [pc, #148]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a20:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a22      	ldr	r2, [pc, #136]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a2c:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a38:	f7ff f900 	bl	8002c3c <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7ff f8fc 	bl	8002c3c <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e066      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a52:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a5e:	e05e      	b.n	8003b1e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e05d      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a64:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d156      	bne.n	8003b1e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0e      	ldr	r2, [pc, #56]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4a0b      	ldr	r2, [pc, #44]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a88:	f7ff f8d8 	bl	8002c3c <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a90:	f7ff f8d4 	bl	8002c3c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e03e      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa2:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <HAL_RCC_OscConfig+0x754>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x734>
 8003aae:	e036      	b.n	8003b1e <HAL_RCC_OscConfig+0x7c2>
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d02d      	beq.n	8003b1a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_RCC_OscConfig+0x7cc>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <HAL_RCC_OscConfig+0x7cc>)
 8003ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003aca:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <HAL_RCC_OscConfig+0x7cc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_RCC_OscConfig+0x7cc>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <HAL_RCC_OscConfig+0x7cc>)
 8003adc:	f023 0303 	bic.w	r3, r3, #3
 8003ae0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_RCC_OscConfig+0x7cc>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <HAL_RCC_OscConfig+0x7cc>)
 8003ae8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7ff f8a3 	bl	8002c3c <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afa:	f7ff f89f 	bl	8002c3c <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e009      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_RCC_OscConfig+0x7cc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x79e>
 8003b18:	e001      	b.n	8003b1e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000

08003b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0c8      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b40:	4b66      	ldr	r3, [pc, #408]	; (8003cdc <HAL_RCC_ClockConfig+0x1b0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d910      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b63      	ldr	r3, [pc, #396]	; (8003cdc <HAL_RCC_ClockConfig+0x1b0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 0207 	bic.w	r2, r3, #7
 8003b56:	4961      	ldr	r1, [pc, #388]	; (8003cdc <HAL_RCC_ClockConfig+0x1b0>)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b5f      	ldr	r3, [pc, #380]	; (8003cdc <HAL_RCC_ClockConfig+0x1b0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0b0      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d04c      	beq.n	8003c16 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d107      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b84:	4b56      	ldr	r3, [pc, #344]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d121      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e09e      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d107      	bne.n	8003bac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9c:	4b50      	ldr	r3, [pc, #320]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d115      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e092      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bb4:	4b4a      	ldr	r3, [pc, #296]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e086      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc4:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e07e      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bd4:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 0203 	bic.w	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	493f      	ldr	r1, [pc, #252]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be6:	f7ff f829 	bl	8002c3c <HAL_GetTick>
 8003bea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bec:	e00a      	b.n	8003c04 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bee:	f7ff f825 	bl	8002c3c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e066      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c04:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 020c 	and.w	r2, r3, #12
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d1eb      	bne.n	8003bee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c22:	4b2f      	ldr	r3, [pc, #188]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	492c      	ldr	r1, [pc, #176]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c34:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <HAL_RCC_ClockConfig+0x1b0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d210      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <HAL_RCC_ClockConfig+0x1b0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 0207 	bic.w	r2, r3, #7
 8003c4a:	4924      	ldr	r1, [pc, #144]	; (8003cdc <HAL_RCC_ClockConfig+0x1b0>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <HAL_RCC_ClockConfig+0x1b0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e036      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4918      	ldr	r1, [pc, #96]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4910      	ldr	r1, [pc, #64]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ca2:	f000 f825 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	490c      	ldr	r1, [pc, #48]	; (8003ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb4:	5ccb      	ldrb	r3, [r1, r3]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbe:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x1c0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe ff68 	bl	8002b9c <HAL_InitTick>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	0800c654 	.word	0x0800c654
 8003ce8:	20000000 	.word	0x20000000
 8003cec:	20000004 	.word	0x20000004

08003cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b089      	sub	sp, #36	; 0x24
 8003cf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cfe:	4b3e      	ldr	r3, [pc, #248]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d08:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x34>
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b0c      	cmp	r3, #12
 8003d1c:	d121      	bne.n	8003d62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d11e      	bne.n	8003d62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d24:	4b34      	ldr	r3, [pc, #208]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d30:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e005      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d40:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d4c:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10d      	bne.n	8003d78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d60:	e00a      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d102      	bne.n	8003d6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	e004      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d74:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	d134      	bne.n	8003de8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d003      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d003      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0xac>
 8003d94:	e005      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d96:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d98:	617b      	str	r3, [r7, #20]
      break;
 8003d9a:	e005      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d9c:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d9e:	617b      	str	r3, [r7, #20]
      break;
 8003da0:	e002      	b.n	8003da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	617b      	str	r3, [r7, #20]
      break;
 8003da6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003da8:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	3301      	adds	r3, #1
 8003db4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	fb03 f202 	mul.w	r2, r3, r2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dce:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	0e5b      	lsrs	r3, r3, #25
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	3301      	adds	r3, #1
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003de8:	69bb      	ldr	r3, [r7, #24]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3724      	adds	r7, #36	; 0x24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	0800c66c 	.word	0x0800c66c
 8003e00:	00f42400 	.word	0x00f42400
 8003e04:	007a1200 	.word	0x007a1200

08003e08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000000 	.word	0x20000000

08003e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e24:	f7ff fff0 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	4904      	ldr	r1, [pc, #16]	; (8003e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40021000 	.word	0x40021000
 8003e48:	0800c664 	.word	0x0800c664

08003e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e50:	f7ff ffda 	bl	8003e08 <HAL_RCC_GetHCLKFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	0adb      	lsrs	r3, r3, #11
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4904      	ldr	r1, [pc, #16]	; (8003e74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40021000 	.word	0x40021000
 8003e74:	0800c664 	.word	0x0800c664

08003e78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e84:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e90:	f7ff fa00 	bl	8003294 <HAL_PWREx_GetVoltageRange>
 8003e94:	6178      	str	r0, [r7, #20]
 8003e96:	e014      	b.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	4a24      	ldr	r2, [pc, #144]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ea4:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003eb0:	f7ff f9f0 	bl	8003294 <HAL_PWREx_GetVoltageRange>
 8003eb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec8:	d10b      	bne.n	8003ee2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b80      	cmp	r3, #128	; 0x80
 8003ece:	d919      	bls.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ed4:	d902      	bls.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	e013      	b.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003edc:	2301      	movs	r3, #1
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	e010      	b.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d902      	bls.n	8003eee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ee8:	2303      	movs	r3, #3
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	e00a      	b.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	d102      	bne.n	8003efa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	e004      	b.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b70      	cmp	r3, #112	; 0x70
 8003efe:	d101      	bne.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f00:	2301      	movs	r3, #1
 8003f02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 0207 	bic.w	r2, r3, #7
 8003f0c:	4909      	ldr	r1, [pc, #36]	; (8003f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d001      	beq.n	8003f26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40022000 	.word	0x40022000

08003f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f40:	2300      	movs	r3, #0
 8003f42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f44:	2300      	movs	r3, #0
 8003f46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d041      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f5c:	d02a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f62:	d824      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f68:	d008      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f6e:	d81e      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f78:	d010      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f7a:	e018      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f7c:	4b86      	ldr	r3, [pc, #536]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a85      	ldr	r2, [pc, #532]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f88:	e015      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 facb 	bl	800452c <RCCEx_PLLSAI1_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f9a:	e00c      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3320      	adds	r3, #32
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fbb6 	bl	8004714 <RCCEx_PLLSAI2_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fac:	e003      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	74fb      	strb	r3, [r7, #19]
      break;
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb6:	7cfb      	ldrb	r3, [r7, #19]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fbc:	4b76      	ldr	r3, [pc, #472]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fca:	4973      	ldr	r1, [pc, #460]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fd2:	e001      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d041      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fec:	d02a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ff2:	d824      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ff8:	d008      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ffe:	d81e      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004008:	d010      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800400a:	e018      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800400c:	4b62      	ldr	r3, [pc, #392]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a61      	ldr	r2, [pc, #388]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004016:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004018:	e015      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	2100      	movs	r1, #0
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fa83 	bl	800452c <RCCEx_PLLSAI1_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800402a:	e00c      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3320      	adds	r3, #32
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fb6e 	bl	8004714 <RCCEx_PLLSAI2_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800403c:	e003      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	74fb      	strb	r3, [r7, #19]
      break;
 8004042:	e000      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800404c:	4b52      	ldr	r3, [pc, #328]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800405a:	494f      	ldr	r1, [pc, #316]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004062:	e001      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80a0 	beq.w	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004076:	2300      	movs	r3, #0
 8004078:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800407a:	4b47      	ldr	r3, [pc, #284]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004090:	4b41      	ldr	r3, [pc, #260]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004094:	4a40      	ldr	r2, [pc, #256]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409a:	6593      	str	r3, [r2, #88]	; 0x58
 800409c:	4b3e      	ldr	r3, [pc, #248]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a8:	2301      	movs	r3, #1
 80040aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ac:	4b3b      	ldr	r3, [pc, #236]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a3a      	ldr	r2, [pc, #232]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040b8:	f7fe fdc0 	bl	8002c3c <HAL_GetTick>
 80040bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040be:	e009      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c0:	f7fe fdbc 	bl	8002c3c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d902      	bls.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	74fb      	strb	r3, [r7, #19]
        break;
 80040d2:	e005      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040d4:	4b31      	ldr	r3, [pc, #196]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0ef      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d15c      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040e6:	4b2c      	ldr	r3, [pc, #176]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01f      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	429a      	cmp	r2, r3
 8004102:	d019      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004110:	4b21      	ldr	r3, [pc, #132]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	4a20      	ldr	r2, [pc, #128]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004120:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	4a1c      	ldr	r2, [pc, #112]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004130:	4a19      	ldr	r2, [pc, #100]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fe fd7b 	bl	8002c3c <HAL_GetTick>
 8004146:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004148:	e00b      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7fe fd77 	bl	8002c3c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f241 3288 	movw	r2, #5000	; 0x1388
 8004158:	4293      	cmp	r3, r2
 800415a:	d902      	bls.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	74fb      	strb	r3, [r7, #19]
            break;
 8004160:	e006      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0ec      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10c      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004186:	4904      	ldr	r1, [pc, #16]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800418e:	e009      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	74bb      	strb	r3, [r7, #18]
 8004194:	e006      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041a4:	7c7b      	ldrb	r3, [r7, #17]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d105      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041aa:	4b9e      	ldr	r3, [pc, #632]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	4a9d      	ldr	r2, [pc, #628]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041c2:	4b98      	ldr	r3, [pc, #608]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f023 0203 	bic.w	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	4994      	ldr	r1, [pc, #592]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041e4:	4b8f      	ldr	r3, [pc, #572]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f023 020c 	bic.w	r2, r3, #12
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	498c      	ldr	r1, [pc, #560]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004206:	4b87      	ldr	r3, [pc, #540]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	4983      	ldr	r1, [pc, #524]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004228:	4b7e      	ldr	r3, [pc, #504]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	497b      	ldr	r1, [pc, #492]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800424a:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004258:	4972      	ldr	r1, [pc, #456]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800426c:	4b6d      	ldr	r3, [pc, #436]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	496a      	ldr	r1, [pc, #424]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800428e:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429c:	4961      	ldr	r1, [pc, #388]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042b0:	4b5c      	ldr	r3, [pc, #368]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042be:	4959      	ldr	r1, [pc, #356]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042d2:	4b54      	ldr	r3, [pc, #336]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e0:	4950      	ldr	r1, [pc, #320]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042f4:	4b4b      	ldr	r3, [pc, #300]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	4948      	ldr	r1, [pc, #288]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004316:	4b43      	ldr	r3, [pc, #268]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	493f      	ldr	r1, [pc, #252]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d028      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004338:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004346:	4937      	ldr	r1, [pc, #220]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004356:	d106      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004358:	4b32      	ldr	r3, [pc, #200]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a31      	ldr	r2, [pc, #196]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800435e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004362:	60d3      	str	r3, [r2, #12]
 8004364:	e011      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800436e:	d10c      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	2101      	movs	r1, #1
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f8d8 	bl	800452c <RCCEx_PLLSAI1_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004380:	7cfb      	ldrb	r3, [r7, #19]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004386:	7cfb      	ldrb	r3, [r7, #19]
 8004388:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d028      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004396:	4b23      	ldr	r3, [pc, #140]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	491f      	ldr	r1, [pc, #124]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043b4:	d106      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b6:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	4a1a      	ldr	r2, [pc, #104]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c0:	60d3      	str	r3, [r2, #12]
 80043c2:	e011      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3304      	adds	r3, #4
 80043d2:	2101      	movs	r1, #1
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f8a9 	bl	800452c <RCCEx_PLLSAI1_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043de:	7cfb      	ldrb	r3, [r7, #19]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d02b      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004402:	4908      	ldr	r1, [pc, #32]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004412:	d109      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a02      	ldr	r2, [pc, #8]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441e:	60d3      	str	r3, [r2, #12]
 8004420:	e014      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004430:	d10c      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3304      	adds	r3, #4
 8004436:	2101      	movs	r1, #1
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f877 	bl	800452c <RCCEx_PLLSAI1_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d02f      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004458:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004466:	4928      	ldr	r1, [pc, #160]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004476:	d10d      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3304      	adds	r3, #4
 800447c:	2102      	movs	r1, #2
 800447e:	4618      	mov	r0, r3
 8004480:	f000 f854 	bl	800452c <RCCEx_PLLSAI1_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d014      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	74bb      	strb	r3, [r7, #18]
 8004492:	e011      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800449c:	d10c      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3320      	adds	r3, #32
 80044a2:	2102      	movs	r1, #2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 f935 	bl	8004714 <RCCEx_PLLSAI2_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044ae:	7cfb      	ldrb	r3, [r7, #19]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044b4:	7cfb      	ldrb	r3, [r7, #19]
 80044b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044c4:	4b10      	ldr	r3, [pc, #64]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044d2:	490d      	ldr	r1, [pc, #52]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f6:	4904      	ldr	r1, [pc, #16]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000

0800450c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004516:	f043 0304 	orr.w	r3, r3, #4
 800451a:	6013      	str	r3, [r2, #0]
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000

0800452c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800453a:	4b75      	ldr	r3, [pc, #468]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d018      	beq.n	8004578 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004546:	4b72      	ldr	r3, [pc, #456]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0203 	and.w	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d10d      	bne.n	8004572 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
       ||
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800455e:	4b6c      	ldr	r3, [pc, #432]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
       ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d047      	beq.n	8004602 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
 8004576:	e044      	b.n	8004602 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d018      	beq.n	80045b2 <RCCEx_PLLSAI1_Config+0x86>
 8004580:	2b03      	cmp	r3, #3
 8004582:	d825      	bhi.n	80045d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004584:	2b01      	cmp	r3, #1
 8004586:	d002      	beq.n	800458e <RCCEx_PLLSAI1_Config+0x62>
 8004588:	2b02      	cmp	r3, #2
 800458a:	d009      	beq.n	80045a0 <RCCEx_PLLSAI1_Config+0x74>
 800458c:	e020      	b.n	80045d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800458e:	4b60      	ldr	r3, [pc, #384]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11d      	bne.n	80045d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800459e:	e01a      	b.n	80045d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045a0:	4b5b      	ldr	r3, [pc, #364]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d116      	bne.n	80045da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b0:	e013      	b.n	80045da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045b2:	4b57      	ldr	r3, [pc, #348]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10f      	bne.n	80045de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045be:	4b54      	ldr	r3, [pc, #336]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045ce:	e006      	b.n	80045de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
      break;
 80045d4:	e004      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045d6:	bf00      	nop
 80045d8:	e002      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045de:	bf00      	nop
    }

    if(status == HAL_OK)
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10d      	bne.n	8004602 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045e6:	4b4a      	ldr	r3, [pc, #296]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6819      	ldr	r1, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	430b      	orrs	r3, r1
 80045fc:	4944      	ldr	r1, [pc, #272]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d17d      	bne.n	8004704 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004608:	4b41      	ldr	r3, [pc, #260]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a40      	ldr	r2, [pc, #256]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004614:	f7fe fb12 	bl	8002c3c <HAL_GetTick>
 8004618:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800461a:	e009      	b.n	8004630 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800461c:	f7fe fb0e 	bl	8002c3c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d902      	bls.n	8004630 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	73fb      	strb	r3, [r7, #15]
        break;
 800462e:	e005      	b.n	800463c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004630:	4b37      	ldr	r3, [pc, #220]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ef      	bne.n	800461c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d160      	bne.n	8004704 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d111      	bne.n	800466c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004648:	4b31      	ldr	r3, [pc, #196]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6892      	ldr	r2, [r2, #8]
 8004658:	0211      	lsls	r1, r2, #8
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68d2      	ldr	r2, [r2, #12]
 800465e:	0912      	lsrs	r2, r2, #4
 8004660:	0452      	lsls	r2, r2, #17
 8004662:	430a      	orrs	r2, r1
 8004664:	492a      	ldr	r1, [pc, #168]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004666:	4313      	orrs	r3, r2
 8004668:	610b      	str	r3, [r1, #16]
 800466a:	e027      	b.n	80046bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d112      	bne.n	8004698 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004672:	4b27      	ldr	r3, [pc, #156]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800467a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6892      	ldr	r2, [r2, #8]
 8004682:	0211      	lsls	r1, r2, #8
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6912      	ldr	r2, [r2, #16]
 8004688:	0852      	lsrs	r2, r2, #1
 800468a:	3a01      	subs	r2, #1
 800468c:	0552      	lsls	r2, r2, #21
 800468e:	430a      	orrs	r2, r1
 8004690:	491f      	ldr	r1, [pc, #124]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004692:	4313      	orrs	r3, r2
 8004694:	610b      	str	r3, [r1, #16]
 8004696:	e011      	b.n	80046bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6892      	ldr	r2, [r2, #8]
 80046a8:	0211      	lsls	r1, r2, #8
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6952      	ldr	r2, [r2, #20]
 80046ae:	0852      	lsrs	r2, r2, #1
 80046b0:	3a01      	subs	r2, #1
 80046b2:	0652      	lsls	r2, r2, #25
 80046b4:	430a      	orrs	r2, r1
 80046b6:	4916      	ldr	r1, [pc, #88]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046bc:	4b14      	ldr	r3, [pc, #80]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a13      	ldr	r2, [pc, #76]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fe fab8 	bl	8002c3c <HAL_GetTick>
 80046cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046ce:	e009      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d0:	f7fe fab4 	bl	8002c3c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d902      	bls.n	80046e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	73fb      	strb	r3, [r7, #15]
          break;
 80046e2:	e005      	b.n	80046f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ef      	beq.n	80046d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	4904      	ldr	r1, [pc, #16]	; (8004710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004700:	4313      	orrs	r3, r2
 8004702:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004704:	7bfb      	ldrb	r3, [r7, #15]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000

08004714 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004722:	4b6a      	ldr	r3, [pc, #424]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d018      	beq.n	8004760 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800472e:	4b67      	ldr	r3, [pc, #412]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f003 0203 	and.w	r2, r3, #3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d10d      	bne.n	800475a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
       ||
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004746:	4b61      	ldr	r3, [pc, #388]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	091b      	lsrs	r3, r3, #4
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
       ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d047      	beq.n	80047ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
 800475e:	e044      	b.n	80047ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b03      	cmp	r3, #3
 8004766:	d018      	beq.n	800479a <RCCEx_PLLSAI2_Config+0x86>
 8004768:	2b03      	cmp	r3, #3
 800476a:	d825      	bhi.n	80047b8 <RCCEx_PLLSAI2_Config+0xa4>
 800476c:	2b01      	cmp	r3, #1
 800476e:	d002      	beq.n	8004776 <RCCEx_PLLSAI2_Config+0x62>
 8004770:	2b02      	cmp	r3, #2
 8004772:	d009      	beq.n	8004788 <RCCEx_PLLSAI2_Config+0x74>
 8004774:	e020      	b.n	80047b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004776:	4b55      	ldr	r3, [pc, #340]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d11d      	bne.n	80047be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004786:	e01a      	b.n	80047be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004788:	4b50      	ldr	r3, [pc, #320]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d116      	bne.n	80047c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004798:	e013      	b.n	80047c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800479a:	4b4c      	ldr	r3, [pc, #304]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047a6:	4b49      	ldr	r3, [pc, #292]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047b6:	e006      	b.n	80047c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
      break;
 80047bc:	e004      	b.n	80047c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047be:	bf00      	nop
 80047c0:	e002      	b.n	80047c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047c2:	bf00      	nop
 80047c4:	e000      	b.n	80047c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10d      	bne.n	80047ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	430b      	orrs	r3, r1
 80047e4:	4939      	ldr	r1, [pc, #228]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d167      	bne.n	80048c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047f0:	4b36      	ldr	r3, [pc, #216]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a35      	ldr	r2, [pc, #212]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fc:	f7fe fa1e 	bl	8002c3c <HAL_GetTick>
 8004800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004802:	e009      	b.n	8004818 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004804:	f7fe fa1a 	bl	8002c3c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d902      	bls.n	8004818 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	73fb      	strb	r3, [r7, #15]
        break;
 8004816:	e005      	b.n	8004824 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004818:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1ef      	bne.n	8004804 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d14a      	bne.n	80048c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d111      	bne.n	8004854 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6892      	ldr	r2, [r2, #8]
 8004840:	0211      	lsls	r1, r2, #8
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	68d2      	ldr	r2, [r2, #12]
 8004846:	0912      	lsrs	r2, r2, #4
 8004848:	0452      	lsls	r2, r2, #17
 800484a:	430a      	orrs	r2, r1
 800484c:	491f      	ldr	r1, [pc, #124]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800484e:	4313      	orrs	r3, r2
 8004850:	614b      	str	r3, [r1, #20]
 8004852:	e011      	b.n	8004878 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800485c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6892      	ldr	r2, [r2, #8]
 8004864:	0211      	lsls	r1, r2, #8
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6912      	ldr	r2, [r2, #16]
 800486a:	0852      	lsrs	r2, r2, #1
 800486c:	3a01      	subs	r2, #1
 800486e:	0652      	lsls	r2, r2, #25
 8004870:	430a      	orrs	r2, r1
 8004872:	4916      	ldr	r1, [pc, #88]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004874:	4313      	orrs	r3, r2
 8004876:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004878:	4b14      	ldr	r3, [pc, #80]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a13      	ldr	r2, [pc, #76]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800487e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004882:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004884:	f7fe f9da 	bl	8002c3c <HAL_GetTick>
 8004888:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800488a:	e009      	b.n	80048a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800488c:	f7fe f9d6 	bl	8002c3c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d902      	bls.n	80048a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	73fb      	strb	r3, [r7, #15]
          break;
 800489e:	e005      	b.n	80048ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0ef      	beq.n	800488c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	4904      	ldr	r1, [pc, #16]	; (80048cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000

080048d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e042      	b.n	8004968 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	795b      	ldrb	r3, [r3, #5]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d105      	bne.n	80048f8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fd fe82 	bl	80025fc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0204 	orr.w	r2, r2, #4
 800490c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004918:	2b40      	cmp	r3, #64	; 0x40
 800491a:	d104      	bne.n	8004926 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2204      	movs	r2, #4
 8004920:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e020      	b.n	8004968 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004926:	f7fe f989 	bl	8002c3c <HAL_GetTick>
 800492a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800492c:	e00e      	b.n	800494c <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800492e:	f7fe f985 	bl	8002c3c <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d907      	bls.n	800494c <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2204      	movs	r2, #4
 8004940:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e00d      	b.n	8004968 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b04      	cmp	r3, #4
 8004958:	d0e9      	beq.n	800492e <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	791b      	ldrb	r3, [r3, #4]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_RNG_GenerateRandomNumber+0x1a>
 8004986:	2302      	movs	r3, #2
 8004988:	e03d      	b.n	8004a06 <HAL_RNG_GenerateRandomNumber+0x96>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	795b      	ldrb	r3, [r3, #5]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d12c      	bne.n	80049f4 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049a0:	f7fe f94c 	bl	8002c3c <HAL_GetTick>
 80049a4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80049a6:	e011      	b.n	80049cc <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80049a8:	f7fe f948 	bl	8002c3c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d90a      	bls.n	80049cc <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e01c      	b.n	8004a06 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d1e6      	bne.n	80049a8 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	715a      	strb	r2, [r3, #5]
 80049f2:	e004      	b.n	80049fe <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2204      	movs	r2, #4
 80049f8:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	711a      	strb	r2, [r3, #4]

  return status;
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e049      	b.n	8004ab4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fd fe25 	bl	8002684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f000 fab5 	bl	8004fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d001      	beq.n	8004ad4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e047      	b.n	8004b64 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a23      	ldr	r2, [pc, #140]	; (8004b70 <HAL_TIM_Base_Start+0xb4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01d      	beq.n	8004b22 <HAL_TIM_Base_Start+0x66>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aee:	d018      	beq.n	8004b22 <HAL_TIM_Base_Start+0x66>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1f      	ldr	r2, [pc, #124]	; (8004b74 <HAL_TIM_Base_Start+0xb8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <HAL_TIM_Base_Start+0x66>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <HAL_TIM_Base_Start+0xbc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_TIM_Base_Start+0x66>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <HAL_TIM_Base_Start+0xc0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_TIM_Base_Start+0x66>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <HAL_TIM_Base_Start+0xc4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_TIM_Base_Start+0x66>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a19      	ldr	r2, [pc, #100]	; (8004b84 <HAL_TIM_Base_Start+0xc8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d115      	bne.n	8004b4e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <HAL_TIM_Base_Start+0xcc>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b06      	cmp	r3, #6
 8004b32:	d015      	beq.n	8004b60 <HAL_TIM_Base_Start+0xa4>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3a:	d011      	beq.n	8004b60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4c:	e008      	b.n	8004b60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e000      	b.n	8004b62 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40013400 	.word	0x40013400
 8004b84:	40014000 	.word	0x40014000
 8004b88:	00010007 	.word	0x00010007

08004b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d122      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d11b      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0202 	mvn.w	r2, #2
 8004bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f9d5 	bl	8004f7e <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9c7 	bl	8004f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f9d8 	bl	8004f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d122      	bne.n	8004c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d11b      	bne.n	8004c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0204 	mvn.w	r2, #4
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f9ab 	bl	8004f7e <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f99d 	bl	8004f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f9ae 	bl	8004f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d122      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d11b      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0208 	mvn.w	r2, #8
 8004c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2204      	movs	r2, #4
 8004c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f981 	bl	8004f7e <HAL_TIM_IC_CaptureCallback>
 8004c7c:	e005      	b.n	8004c8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f973 	bl	8004f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f984 	bl	8004f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d122      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d11b      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0210 	mvn.w	r2, #16
 8004cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2208      	movs	r2, #8
 8004cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f957 	bl	8004f7e <HAL_TIM_IC_CaptureCallback>
 8004cd0:	e005      	b.n	8004cde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f949 	bl	8004f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f95a 	bl	8004f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d10e      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d107      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0201 	mvn.w	r2, #1
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f923 	bl	8004f56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d10e      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d28:	2b80      	cmp	r3, #128	; 0x80
 8004d2a:	d107      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fb06 	bl	8005348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4a:	d10e      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d56:	2b80      	cmp	r3, #128	; 0x80
 8004d58:	d107      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 faf9 	bl	800535c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	d10e      	bne.n	8004d96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	d107      	bne.n	8004d96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f908 	bl	8004fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d10e      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d107      	bne.n	8004dc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f06f 0220 	mvn.w	r2, #32
 8004dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fab9 	bl	8005334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_ConfigClockSource+0x18>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e0b5      	b.n	8004f4e <HAL_TIM_ConfigClockSource+0x184>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e04:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e0c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1e:	d03e      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0xd4>
 8004e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e24:	f200 8087 	bhi.w	8004f36 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2c:	f000 8085 	beq.w	8004f3a <HAL_TIM_ConfigClockSource+0x170>
 8004e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e34:	d87f      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x16c>
 8004e36:	2b70      	cmp	r3, #112	; 0x70
 8004e38:	d01a      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0xa6>
 8004e3a:	2b70      	cmp	r3, #112	; 0x70
 8004e3c:	d87b      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x16c>
 8004e3e:	2b60      	cmp	r3, #96	; 0x60
 8004e40:	d050      	beq.n	8004ee4 <HAL_TIM_ConfigClockSource+0x11a>
 8004e42:	2b60      	cmp	r3, #96	; 0x60
 8004e44:	d877      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x16c>
 8004e46:	2b50      	cmp	r3, #80	; 0x50
 8004e48:	d03c      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0xfa>
 8004e4a:	2b50      	cmp	r3, #80	; 0x50
 8004e4c:	d873      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x16c>
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d058      	beq.n	8004f04 <HAL_TIM_ConfigClockSource+0x13a>
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d86f      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x16c>
 8004e56:	2b30      	cmp	r3, #48	; 0x30
 8004e58:	d064      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0x15a>
 8004e5a:	2b30      	cmp	r3, #48	; 0x30
 8004e5c:	d86b      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x16c>
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d060      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0x15a>
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d867      	bhi.n	8004f36 <HAL_TIM_ConfigClockSource+0x16c>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d05c      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0x15a>
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d05a      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e6e:	e062      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6899      	ldr	r1, [r3, #8]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f000 f9b0 	bl	80051e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	609a      	str	r2, [r3, #8]
      break;
 8004e9c:	e04e      	b.n	8004f3c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6899      	ldr	r1, [r3, #8]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f000 f999 	bl	80051e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ec0:	609a      	str	r2, [r3, #8]
      break;
 8004ec2:	e03b      	b.n	8004f3c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f000 f90d 	bl	80050f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2150      	movs	r1, #80	; 0x50
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f966 	bl	80051ae <TIM_ITRx_SetConfig>
      break;
 8004ee2:	e02b      	b.n	8004f3c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6859      	ldr	r1, [r3, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f000 f92c 	bl	800514e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2160      	movs	r1, #96	; 0x60
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 f956 	bl	80051ae <TIM_ITRx_SetConfig>
      break;
 8004f02:	e01b      	b.n	8004f3c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	6859      	ldr	r1, [r3, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	461a      	mov	r2, r3
 8004f12:	f000 f8ed 	bl	80050f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2140      	movs	r1, #64	; 0x40
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 f946 	bl	80051ae <TIM_ITRx_SetConfig>
      break;
 8004f22:	e00b      	b.n	8004f3c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f000 f93d 	bl	80051ae <TIM_ITRx_SetConfig>
        break;
 8004f34:	e002      	b.n	8004f3c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004f36:	bf00      	nop
 8004f38:	e000      	b.n	8004f3c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004f3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a40      	ldr	r2, [pc, #256]	; (80050d0 <TIM_Base_SetConfig+0x114>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d013      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fda:	d00f      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a3d      	ldr	r2, [pc, #244]	; (80050d4 <TIM_Base_SetConfig+0x118>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a3c      	ldr	r2, [pc, #240]	; (80050d8 <TIM_Base_SetConfig+0x11c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a3b      	ldr	r2, [pc, #236]	; (80050dc <TIM_Base_SetConfig+0x120>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a3a      	ldr	r2, [pc, #232]	; (80050e0 <TIM_Base_SetConfig+0x124>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d108      	bne.n	800500e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2f      	ldr	r2, [pc, #188]	; (80050d0 <TIM_Base_SetConfig+0x114>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01f      	beq.n	8005056 <TIM_Base_SetConfig+0x9a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d01b      	beq.n	8005056 <TIM_Base_SetConfig+0x9a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <TIM_Base_SetConfig+0x118>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d017      	beq.n	8005056 <TIM_Base_SetConfig+0x9a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2b      	ldr	r2, [pc, #172]	; (80050d8 <TIM_Base_SetConfig+0x11c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <TIM_Base_SetConfig+0x9a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2a      	ldr	r2, [pc, #168]	; (80050dc <TIM_Base_SetConfig+0x120>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00f      	beq.n	8005056 <TIM_Base_SetConfig+0x9a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a29      	ldr	r2, [pc, #164]	; (80050e0 <TIM_Base_SetConfig+0x124>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_Base_SetConfig+0x9a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a28      	ldr	r2, [pc, #160]	; (80050e4 <TIM_Base_SetConfig+0x128>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_Base_SetConfig+0x9a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a27      	ldr	r2, [pc, #156]	; (80050e8 <TIM_Base_SetConfig+0x12c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_Base_SetConfig+0x9a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a26      	ldr	r2, [pc, #152]	; (80050ec <TIM_Base_SetConfig+0x130>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d108      	bne.n	8005068 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <TIM_Base_SetConfig+0x114>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00f      	beq.n	80050b4 <TIM_Base_SetConfig+0xf8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a12      	ldr	r2, [pc, #72]	; (80050e0 <TIM_Base_SetConfig+0x124>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00b      	beq.n	80050b4 <TIM_Base_SetConfig+0xf8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a11      	ldr	r2, [pc, #68]	; (80050e4 <TIM_Base_SetConfig+0x128>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d007      	beq.n	80050b4 <TIM_Base_SetConfig+0xf8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a10      	ldr	r2, [pc, #64]	; (80050e8 <TIM_Base_SetConfig+0x12c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_Base_SetConfig+0xf8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a0f      	ldr	r2, [pc, #60]	; (80050ec <TIM_Base_SetConfig+0x130>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d103      	bne.n	80050bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	615a      	str	r2, [r3, #20]
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40013400 	.word	0x40013400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800

080050f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f023 0201 	bic.w	r2, r3, #1
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f023 030a 	bic.w	r3, r3, #10
 800512c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800514e:	b480      	push	{r7}
 8005150:	b087      	sub	sp, #28
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f023 0210 	bic.w	r2, r3, #16
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	031b      	lsls	r3, r3, #12
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800518a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f043 0307 	orr.w	r3, r3, #7
 80051d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	609a      	str	r2, [r3, #8]
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	021a      	lsls	r2, r3, #8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	431a      	orrs	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4313      	orrs	r3, r2
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	609a      	str	r2, [r3, #8]
}
 8005218:	bf00      	nop
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005238:	2302      	movs	r3, #2
 800523a:	e068      	b.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2e      	ldr	r2, [pc, #184]	; (800531c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2d      	ldr	r2, [pc, #180]	; (8005320 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d108      	bne.n	8005282 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005276:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005288:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1e      	ldr	r2, [pc, #120]	; (800531c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01d      	beq.n	80052e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ae:	d018      	beq.n	80052e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d013      	beq.n	80052e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1a      	ldr	r2, [pc, #104]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00e      	beq.n	80052e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a18      	ldr	r2, [pc, #96]	; (800532c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d009      	beq.n	80052e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a13      	ldr	r2, [pc, #76]	; (8005320 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d004      	beq.n	80052e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a14      	ldr	r2, [pc, #80]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d10c      	bne.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40012c00 	.word	0x40012c00
 8005320:	40013400 	.word	0x40013400
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40014000 	.word	0x40014000

08005334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e040      	b.n	8005404 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fd f99a 	bl	80026cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2224      	movs	r2, #36	; 0x24
 800539c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f8c0 	bl	8005534 <UART_SetConfig>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e022      	b.n	8005404 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fb6e 	bl	8005aa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fbf5 	bl	8005bec <UART_CheckIdleState>
 8005402:	4603      	mov	r3, r0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005420:	2b20      	cmp	r3, #32
 8005422:	f040 8082 	bne.w	800552a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_UART_Transmit+0x26>
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e07a      	b.n	800552c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_UART_Transmit+0x38>
 8005440:	2302      	movs	r3, #2
 8005442:	e073      	b.n	800552c <HAL_UART_Transmit+0x120>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2221      	movs	r2, #33	; 0x21
 8005458:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800545a:	f7fd fbef 	bl	8002c3c <HAL_GetTick>
 800545e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005478:	d108      	bne.n	800548c <HAL_UART_Transmit+0x80>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	e003      	b.n	8005494 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800549c:	e02d      	b.n	80054fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2200      	movs	r2, #0
 80054a6:	2180      	movs	r1, #128	; 0x80
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fbe8 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e039      	b.n	800552c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10b      	bne.n	80054d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	881a      	ldrh	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ca:	b292      	uxth	r2, r2
 80054cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	3302      	adds	r3, #2
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	e008      	b.n	80054e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	781a      	ldrb	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	b292      	uxth	r2, r2
 80054e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	3301      	adds	r3, #1
 80054e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1cb      	bne.n	800549e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2200      	movs	r2, #0
 800550e:	2140      	movs	r1, #64	; 0x40
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 fbb4 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e005      	b.n	800552c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2220      	movs	r2, #32
 8005524:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	e000      	b.n	800552c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800552a:	2302      	movs	r3, #2
  }
}
 800552c:	4618      	mov	r0, r3
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005538:	b08a      	sub	sp, #40	; 0x28
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	431a      	orrs	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	431a      	orrs	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	4313      	orrs	r3, r2
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4ba4      	ldr	r3, [pc, #656]	; (80057f4 <UART_SetConfig+0x2c0>)
 8005564:	4013      	ands	r3, r2
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800556c:	430b      	orrs	r3, r1
 800556e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a99      	ldr	r2, [pc, #612]	; (80057f8 <UART_SetConfig+0x2c4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559c:	4313      	orrs	r3, r2
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b0:	430a      	orrs	r2, r1
 80055b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a90      	ldr	r2, [pc, #576]	; (80057fc <UART_SetConfig+0x2c8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d126      	bne.n	800560c <UART_SetConfig+0xd8>
 80055be:	4b90      	ldr	r3, [pc, #576]	; (8005800 <UART_SetConfig+0x2cc>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d81b      	bhi.n	8005604 <UART_SetConfig+0xd0>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0xa0>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	080055f5 	.word	0x080055f5
 80055dc:	080055ed 	.word	0x080055ed
 80055e0:	080055fd 	.word	0x080055fd
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ea:	e116      	b.n	800581a <UART_SetConfig+0x2e6>
 80055ec:	2302      	movs	r3, #2
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f2:	e112      	b.n	800581a <UART_SetConfig+0x2e6>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fa:	e10e      	b.n	800581a <UART_SetConfig+0x2e6>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005602:	e10a      	b.n	800581a <UART_SetConfig+0x2e6>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560a:	e106      	b.n	800581a <UART_SetConfig+0x2e6>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a7c      	ldr	r2, [pc, #496]	; (8005804 <UART_SetConfig+0x2d0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d138      	bne.n	8005688 <UART_SetConfig+0x154>
 8005616:	4b7a      	ldr	r3, [pc, #488]	; (8005800 <UART_SetConfig+0x2cc>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f003 030c 	and.w	r3, r3, #12
 8005620:	2b0c      	cmp	r3, #12
 8005622:	d82d      	bhi.n	8005680 <UART_SetConfig+0x14c>
 8005624:	a201      	add	r2, pc, #4	; (adr r2, 800562c <UART_SetConfig+0xf8>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	08005661 	.word	0x08005661
 8005630:	08005681 	.word	0x08005681
 8005634:	08005681 	.word	0x08005681
 8005638:	08005681 	.word	0x08005681
 800563c:	08005671 	.word	0x08005671
 8005640:	08005681 	.word	0x08005681
 8005644:	08005681 	.word	0x08005681
 8005648:	08005681 	.word	0x08005681
 800564c:	08005669 	.word	0x08005669
 8005650:	08005681 	.word	0x08005681
 8005654:	08005681 	.word	0x08005681
 8005658:	08005681 	.word	0x08005681
 800565c:	08005679 	.word	0x08005679
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005666:	e0d8      	b.n	800581a <UART_SetConfig+0x2e6>
 8005668:	2302      	movs	r3, #2
 800566a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566e:	e0d4      	b.n	800581a <UART_SetConfig+0x2e6>
 8005670:	2304      	movs	r3, #4
 8005672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005676:	e0d0      	b.n	800581a <UART_SetConfig+0x2e6>
 8005678:	2308      	movs	r3, #8
 800567a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567e:	e0cc      	b.n	800581a <UART_SetConfig+0x2e6>
 8005680:	2310      	movs	r3, #16
 8005682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005686:	e0c8      	b.n	800581a <UART_SetConfig+0x2e6>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a5e      	ldr	r2, [pc, #376]	; (8005808 <UART_SetConfig+0x2d4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d125      	bne.n	80056de <UART_SetConfig+0x1aa>
 8005692:	4b5b      	ldr	r3, [pc, #364]	; (8005800 <UART_SetConfig+0x2cc>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800569c:	2b30      	cmp	r3, #48	; 0x30
 800569e:	d016      	beq.n	80056ce <UART_SetConfig+0x19a>
 80056a0:	2b30      	cmp	r3, #48	; 0x30
 80056a2:	d818      	bhi.n	80056d6 <UART_SetConfig+0x1a2>
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d00a      	beq.n	80056be <UART_SetConfig+0x18a>
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d814      	bhi.n	80056d6 <UART_SetConfig+0x1a2>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <UART_SetConfig+0x182>
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	d008      	beq.n	80056c6 <UART_SetConfig+0x192>
 80056b4:	e00f      	b.n	80056d6 <UART_SetConfig+0x1a2>
 80056b6:	2300      	movs	r3, #0
 80056b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056bc:	e0ad      	b.n	800581a <UART_SetConfig+0x2e6>
 80056be:	2302      	movs	r3, #2
 80056c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c4:	e0a9      	b.n	800581a <UART_SetConfig+0x2e6>
 80056c6:	2304      	movs	r3, #4
 80056c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056cc:	e0a5      	b.n	800581a <UART_SetConfig+0x2e6>
 80056ce:	2308      	movs	r3, #8
 80056d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d4:	e0a1      	b.n	800581a <UART_SetConfig+0x2e6>
 80056d6:	2310      	movs	r3, #16
 80056d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056dc:	e09d      	b.n	800581a <UART_SetConfig+0x2e6>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a4a      	ldr	r2, [pc, #296]	; (800580c <UART_SetConfig+0x2d8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d125      	bne.n	8005734 <UART_SetConfig+0x200>
 80056e8:	4b45      	ldr	r3, [pc, #276]	; (8005800 <UART_SetConfig+0x2cc>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056f2:	2bc0      	cmp	r3, #192	; 0xc0
 80056f4:	d016      	beq.n	8005724 <UART_SetConfig+0x1f0>
 80056f6:	2bc0      	cmp	r3, #192	; 0xc0
 80056f8:	d818      	bhi.n	800572c <UART_SetConfig+0x1f8>
 80056fa:	2b80      	cmp	r3, #128	; 0x80
 80056fc:	d00a      	beq.n	8005714 <UART_SetConfig+0x1e0>
 80056fe:	2b80      	cmp	r3, #128	; 0x80
 8005700:	d814      	bhi.n	800572c <UART_SetConfig+0x1f8>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <UART_SetConfig+0x1d8>
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d008      	beq.n	800571c <UART_SetConfig+0x1e8>
 800570a:	e00f      	b.n	800572c <UART_SetConfig+0x1f8>
 800570c:	2300      	movs	r3, #0
 800570e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005712:	e082      	b.n	800581a <UART_SetConfig+0x2e6>
 8005714:	2302      	movs	r3, #2
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571a:	e07e      	b.n	800581a <UART_SetConfig+0x2e6>
 800571c:	2304      	movs	r3, #4
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005722:	e07a      	b.n	800581a <UART_SetConfig+0x2e6>
 8005724:	2308      	movs	r3, #8
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572a:	e076      	b.n	800581a <UART_SetConfig+0x2e6>
 800572c:	2310      	movs	r3, #16
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005732:	e072      	b.n	800581a <UART_SetConfig+0x2e6>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a35      	ldr	r2, [pc, #212]	; (8005810 <UART_SetConfig+0x2dc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d12a      	bne.n	8005794 <UART_SetConfig+0x260>
 800573e:	4b30      	ldr	r3, [pc, #192]	; (8005800 <UART_SetConfig+0x2cc>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005748:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800574c:	d01a      	beq.n	8005784 <UART_SetConfig+0x250>
 800574e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005752:	d81b      	bhi.n	800578c <UART_SetConfig+0x258>
 8005754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005758:	d00c      	beq.n	8005774 <UART_SetConfig+0x240>
 800575a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575e:	d815      	bhi.n	800578c <UART_SetConfig+0x258>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <UART_SetConfig+0x238>
 8005764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005768:	d008      	beq.n	800577c <UART_SetConfig+0x248>
 800576a:	e00f      	b.n	800578c <UART_SetConfig+0x258>
 800576c:	2300      	movs	r3, #0
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005772:	e052      	b.n	800581a <UART_SetConfig+0x2e6>
 8005774:	2302      	movs	r3, #2
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577a:	e04e      	b.n	800581a <UART_SetConfig+0x2e6>
 800577c:	2304      	movs	r3, #4
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005782:	e04a      	b.n	800581a <UART_SetConfig+0x2e6>
 8005784:	2308      	movs	r3, #8
 8005786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578a:	e046      	b.n	800581a <UART_SetConfig+0x2e6>
 800578c:	2310      	movs	r3, #16
 800578e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005792:	e042      	b.n	800581a <UART_SetConfig+0x2e6>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <UART_SetConfig+0x2c4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d13a      	bne.n	8005814 <UART_SetConfig+0x2e0>
 800579e:	4b18      	ldr	r3, [pc, #96]	; (8005800 <UART_SetConfig+0x2cc>)
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057ac:	d01a      	beq.n	80057e4 <UART_SetConfig+0x2b0>
 80057ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057b2:	d81b      	bhi.n	80057ec <UART_SetConfig+0x2b8>
 80057b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b8:	d00c      	beq.n	80057d4 <UART_SetConfig+0x2a0>
 80057ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057be:	d815      	bhi.n	80057ec <UART_SetConfig+0x2b8>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <UART_SetConfig+0x298>
 80057c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c8:	d008      	beq.n	80057dc <UART_SetConfig+0x2a8>
 80057ca:	e00f      	b.n	80057ec <UART_SetConfig+0x2b8>
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d2:	e022      	b.n	800581a <UART_SetConfig+0x2e6>
 80057d4:	2302      	movs	r3, #2
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057da:	e01e      	b.n	800581a <UART_SetConfig+0x2e6>
 80057dc:	2304      	movs	r3, #4
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e2:	e01a      	b.n	800581a <UART_SetConfig+0x2e6>
 80057e4:	2308      	movs	r3, #8
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ea:	e016      	b.n	800581a <UART_SetConfig+0x2e6>
 80057ec:	2310      	movs	r3, #16
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f2:	e012      	b.n	800581a <UART_SetConfig+0x2e6>
 80057f4:	efff69f3 	.word	0xefff69f3
 80057f8:	40008000 	.word	0x40008000
 80057fc:	40013800 	.word	0x40013800
 8005800:	40021000 	.word	0x40021000
 8005804:	40004400 	.word	0x40004400
 8005808:	40004800 	.word	0x40004800
 800580c:	40004c00 	.word	0x40004c00
 8005810:	40005000 	.word	0x40005000
 8005814:	2310      	movs	r3, #16
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4aa0      	ldr	r2, [pc, #640]	; (8005aa0 <UART_SetConfig+0x56c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d17a      	bne.n	800591a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005824:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005828:	2b08      	cmp	r3, #8
 800582a:	d824      	bhi.n	8005876 <UART_SetConfig+0x342>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x300>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005859 	.word	0x08005859
 8005838:	08005877 	.word	0x08005877
 800583c:	08005861 	.word	0x08005861
 8005840:	08005877 	.word	0x08005877
 8005844:	08005867 	.word	0x08005867
 8005848:	08005877 	.word	0x08005877
 800584c:	08005877 	.word	0x08005877
 8005850:	08005877 	.word	0x08005877
 8005854:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fe fae2 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 800585c:	61f8      	str	r0, [r7, #28]
        break;
 800585e:	e010      	b.n	8005882 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b90      	ldr	r3, [pc, #576]	; (8005aa4 <UART_SetConfig+0x570>)
 8005862:	61fb      	str	r3, [r7, #28]
        break;
 8005864:	e00d      	b.n	8005882 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7fe fa43 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 800586a:	61f8      	str	r0, [r7, #28]
        break;
 800586c:	e009      	b.n	8005882 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005872:	61fb      	str	r3, [r7, #28]
        break;
 8005874:	e005      	b.n	8005882 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005880:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80fd 	beq.w	8005a84 <UART_SetConfig+0x550>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	4413      	add	r3, r2
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	429a      	cmp	r2, r3
 8005898:	d305      	bcc.n	80058a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d903      	bls.n	80058ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058ac:	e0ea      	b.n	8005a84 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2200      	movs	r2, #0
 80058b2:	461c      	mov	r4, r3
 80058b4:	4615      	mov	r5, r2
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	022b      	lsls	r3, r5, #8
 80058c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80058c4:	0222      	lsls	r2, r4, #8
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	6849      	ldr	r1, [r1, #4]
 80058ca:	0849      	lsrs	r1, r1, #1
 80058cc:	2000      	movs	r0, #0
 80058ce:	4688      	mov	r8, r1
 80058d0:	4681      	mov	r9, r0
 80058d2:	eb12 0a08 	adds.w	sl, r2, r8
 80058d6:	eb43 0b09 	adc.w	fp, r3, r9
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	603b      	str	r3, [r7, #0]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058e8:	4650      	mov	r0, sl
 80058ea:	4659      	mov	r1, fp
 80058ec:	f7fb f95c 	bl	8000ba8 <__aeabi_uldivmod>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4613      	mov	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058fe:	d308      	bcc.n	8005912 <UART_SetConfig+0x3de>
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005906:	d204      	bcs.n	8005912 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	60da      	str	r2, [r3, #12]
 8005910:	e0b8      	b.n	8005a84 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005918:	e0b4      	b.n	8005a84 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005922:	d15f      	bne.n	80059e4 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8005924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005928:	2b08      	cmp	r3, #8
 800592a:	d828      	bhi.n	800597e <UART_SetConfig+0x44a>
 800592c:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <UART_SetConfig+0x400>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005959 	.word	0x08005959
 8005938:	08005961 	.word	0x08005961
 800593c:	08005969 	.word	0x08005969
 8005940:	0800597f 	.word	0x0800597f
 8005944:	0800596f 	.word	0x0800596f
 8005948:	0800597f 	.word	0x0800597f
 800594c:	0800597f 	.word	0x0800597f
 8005950:	0800597f 	.word	0x0800597f
 8005954:	08005977 	.word	0x08005977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005958:	f7fe fa62 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 800595c:	61f8      	str	r0, [r7, #28]
        break;
 800595e:	e014      	b.n	800598a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005960:	f7fe fa74 	bl	8003e4c <HAL_RCC_GetPCLK2Freq>
 8005964:	61f8      	str	r0, [r7, #28]
        break;
 8005966:	e010      	b.n	800598a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005968:	4b4e      	ldr	r3, [pc, #312]	; (8005aa4 <UART_SetConfig+0x570>)
 800596a:	61fb      	str	r3, [r7, #28]
        break;
 800596c:	e00d      	b.n	800598a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800596e:	f7fe f9bf 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8005972:	61f8      	str	r0, [r7, #28]
        break;
 8005974:	e009      	b.n	800598a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800597a:	61fb      	str	r3, [r7, #28]
        break;
 800597c:	e005      	b.n	800598a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005988:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d079      	beq.n	8005a84 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	005a      	lsls	r2, r3, #1
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	441a      	add	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b0f      	cmp	r3, #15
 80059ac:	d916      	bls.n	80059dc <UART_SetConfig+0x4a8>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b4:	d212      	bcs.n	80059dc <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f023 030f 	bic.w	r3, r3, #15
 80059be:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	8afb      	ldrh	r3, [r7, #22]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	8afa      	ldrh	r2, [r7, #22]
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	e053      	b.n	8005a84 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059e2:	e04f      	b.n	8005a84 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d828      	bhi.n	8005a3e <UART_SetConfig+0x50a>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <UART_SetConfig+0x4c0>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a19 	.word	0x08005a19
 80059f8:	08005a21 	.word	0x08005a21
 80059fc:	08005a29 	.word	0x08005a29
 8005a00:	08005a3f 	.word	0x08005a3f
 8005a04:	08005a2f 	.word	0x08005a2f
 8005a08:	08005a3f 	.word	0x08005a3f
 8005a0c:	08005a3f 	.word	0x08005a3f
 8005a10:	08005a3f 	.word	0x08005a3f
 8005a14:	08005a37 	.word	0x08005a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a18:	f7fe fa02 	bl	8003e20 <HAL_RCC_GetPCLK1Freq>
 8005a1c:	61f8      	str	r0, [r7, #28]
        break;
 8005a1e:	e014      	b.n	8005a4a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a20:	f7fe fa14 	bl	8003e4c <HAL_RCC_GetPCLK2Freq>
 8005a24:	61f8      	str	r0, [r7, #28]
        break;
 8005a26:	e010      	b.n	8005a4a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a28:	4b1e      	ldr	r3, [pc, #120]	; (8005aa4 <UART_SetConfig+0x570>)
 8005a2a:	61fb      	str	r3, [r7, #28]
        break;
 8005a2c:	e00d      	b.n	8005a4a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a2e:	f7fe f95f 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8005a32:	61f8      	str	r0, [r7, #28]
        break;
 8005a34:	e009      	b.n	8005a4a <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a3a:	61fb      	str	r3, [r7, #28]
        break;
 8005a3c:	e005      	b.n	8005a4a <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a48:	bf00      	nop
    }

    if (pclk != 0U)
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d019      	beq.n	8005a84 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	085a      	lsrs	r2, r3, #1
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	441a      	add	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b0f      	cmp	r3, #15
 8005a6a:	d908      	bls.n	8005a7e <UART_SetConfig+0x54a>
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a72:	d204      	bcs.n	8005a7e <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	60da      	str	r2, [r3, #12]
 8005a7c:	e002      	b.n	8005a84 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3728      	adds	r7, #40	; 0x28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40008000 	.word	0x40008000
 8005aa4:	00f42400 	.word	0x00f42400

08005aa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01a      	beq.n	8005bbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba6:	d10a      	bne.n	8005bbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bfc:	f7fd f81e 	bl	8002c3c <HAL_GetTick>
 8005c00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d10e      	bne.n	8005c2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f82d 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e023      	b.n	8005c76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d10e      	bne.n	8005c5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f817 	bl	8005c7e <UART_WaitOnFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e00d      	b.n	8005c76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	603b      	str	r3, [r7, #0]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8e:	e05e      	b.n	8005d4e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c96:	d05a      	beq.n	8005d4e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c98:	f7fc ffd0 	bl	8002c3c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d302      	bcc.n	8005cae <UART_WaitOnFlagUntilTimeout+0x30>
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d11b      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cbc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e043      	b.n	8005d6e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d02c      	beq.n	8005d4e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d02:	d124      	bne.n	8005d4e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d0c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d1c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e00f      	b.n	8005d6e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69da      	ldr	r2, [r3, #28]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4013      	ands	r3, r2
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	bf0c      	ite	eq
 8005d5e:	2301      	moveq	r3, #1
 8005d60:	2300      	movne	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d091      	beq.n	8005c90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <__NVIC_SetPriority>:
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	6039      	str	r1, [r7, #0]
 8005d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	db0a      	blt.n	8005da2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	490c      	ldr	r1, [pc, #48]	; (8005dc4 <__NVIC_SetPriority+0x4c>)
 8005d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d96:	0112      	lsls	r2, r2, #4
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	440b      	add	r3, r1
 8005d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005da0:	e00a      	b.n	8005db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	4908      	ldr	r1, [pc, #32]	; (8005dc8 <__NVIC_SetPriority+0x50>)
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	3b04      	subs	r3, #4
 8005db0:	0112      	lsls	r2, r2, #4
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	440b      	add	r3, r1
 8005db6:	761a      	strb	r2, [r3, #24]
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	e000e100 	.word	0xe000e100
 8005dc8:	e000ed00 	.word	0xe000ed00

08005dcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	f06f 0004 	mvn.w	r0, #4
 8005dd6:	f7ff ffcf 	bl	8005d78 <__NVIC_SetPriority>
#endif
}
 8005dda:	bf00      	nop
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de6:	f3ef 8305 	mrs	r3, IPSR
 8005dea:	603b      	str	r3, [r7, #0]
  return(result);
 8005dec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005df2:	f06f 0305 	mvn.w	r3, #5
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	e00c      	b.n	8005e14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <osKernelInitialize+0x44>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d105      	bne.n	8005e0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <osKernelInitialize+0x44>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	607b      	str	r3, [r7, #4]
 8005e0c:	e002      	b.n	8005e14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e14:	687b      	ldr	r3, [r7, #4]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	200003c4 	.word	0x200003c4

08005e28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e2e:	f3ef 8305 	mrs	r3, IPSR
 8005e32:	603b      	str	r3, [r7, #0]
  return(result);
 8005e34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e3a:	f06f 0305 	mvn.w	r3, #5
 8005e3e:	607b      	str	r3, [r7, #4]
 8005e40:	e010      	b.n	8005e64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <osKernelStart+0x48>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d109      	bne.n	8005e5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e4a:	f7ff ffbf 	bl	8005dcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e4e:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <osKernelStart+0x48>)
 8005e50:	2202      	movs	r2, #2
 8005e52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e54:	f001 fc98 	bl	8007788 <vTaskStartScheduler>
      stat = osOK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	607b      	str	r3, [r7, #4]
 8005e5c:	e002      	b.n	8005e64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e64:	687b      	ldr	r3, [r7, #4]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	200003c4 	.word	0x200003c4

08005e74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08e      	sub	sp, #56	; 0x38
 8005e78:	af04      	add	r7, sp, #16
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e84:	f3ef 8305 	mrs	r3, IPSR
 8005e88:	617b      	str	r3, [r7, #20]
  return(result);
 8005e8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d17e      	bne.n	8005f8e <osThreadNew+0x11a>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d07b      	beq.n	8005f8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e96:	2380      	movs	r3, #128	; 0x80
 8005e98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e9a:	2318      	movs	r3, #24
 8005e9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ea6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d045      	beq.n	8005f3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <osThreadNew+0x48>
        name = attr->name;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <osThreadNew+0x6e>
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2b38      	cmp	r3, #56	; 0x38
 8005ed4:	d805      	bhi.n	8005ee2 <osThreadNew+0x6e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <osThreadNew+0x72>
        return (NULL);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e054      	b.n	8005f90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	089b      	lsrs	r3, r3, #2
 8005ef4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00e      	beq.n	8005f1c <osThreadNew+0xa8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	2b5b      	cmp	r3, #91	; 0x5b
 8005f04:	d90a      	bls.n	8005f1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d006      	beq.n	8005f1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <osThreadNew+0xa8>
        mem = 1;
 8005f16:	2301      	movs	r3, #1
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e010      	b.n	8005f3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10c      	bne.n	8005f3e <osThreadNew+0xca>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d108      	bne.n	8005f3e <osThreadNew+0xca>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <osThreadNew+0xca>
          mem = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	e001      	b.n	8005f3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d110      	bne.n	8005f66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f4c:	9202      	str	r2, [sp, #8]
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6a3a      	ldr	r2, [r7, #32]
 8005f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f001 f966 	bl	800722c <xTaskCreateStatic>
 8005f60:	4603      	mov	r3, r0
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	e013      	b.n	8005f8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d110      	bne.n	8005f8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	f107 0310 	add.w	r3, r7, #16
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f001 f9b1 	bl	80072e6 <xTaskCreate>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d001      	beq.n	8005f8e <osThreadNew+0x11a>
            hTask = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f8e:	693b      	ldr	r3, [r7, #16]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3728      	adds	r7, #40	; 0x28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8005f9e:	f002 f83d 	bl	800801c <xTaskGetCurrentTaskHandle>
 8005fa2:	6078      	str	r0, [r7, #4]

  return (id);
 8005fa4:	687b      	ldr	r3, [r7, #4]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b086      	sub	sp, #24
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fba:	f3ef 8305 	mrs	r3, IPSR
 8005fbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <osThreadTerminate+0x20>
    stat = osErrorISR;
 8005fc6:	f06f 0305 	mvn.w	r3, #5
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	e017      	b.n	8005ffe <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d103      	bne.n	8005fdc <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8005fd4:	f06f 0303 	mvn.w	r3, #3
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	e010      	b.n	8005ffe <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8005fdc:	6938      	ldr	r0, [r7, #16]
 8005fde:	f001 fb6d 	bl	80076bc <eTaskGetState>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d005      	beq.n	8005ff8 <osThreadTerminate+0x4a>
      stat = osOK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8005ff0:	6938      	ldr	r0, [r7, #16]
 8005ff2:	f001 fabd 	bl	8007570 <vTaskDelete>
 8005ff6:	e002      	b.n	8005ffe <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8005ff8:	f06f 0302 	mvn.w	r3, #2
 8005ffc:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8005ffe:	697b      	ldr	r3, [r7, #20]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006010:	f3ef 8305 	mrs	r3, IPSR
 8006014:	60bb      	str	r3, [r7, #8]
  return(result);
 8006016:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <osDelay+0x1c>
    stat = osErrorISR;
 800601c:	f06f 0305 	mvn.w	r3, #5
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e007      	b.n	8006034 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <osDelay+0x2c>
      vTaskDelay(ticks);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 fb10 	bl	8007654 <vTaskDelay>
    }
  }

  return (stat);
 8006034:	68fb      	ldr	r3, [r7, #12]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800603e:	b580      	push	{r7, lr}
 8006040:	b088      	sub	sp, #32
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800604a:	f3ef 8305 	mrs	r3, IPSR
 800604e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006050:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006052:	2b00      	cmp	r3, #0
 8006054:	d174      	bne.n	8006140 <osMutexNew+0x102>
    if (attr != NULL) {
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <osMutexNew+0x26>
      type = attr->attr_bits;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	e001      	b.n	8006068 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <osMutexNew+0x3a>
      rmtx = 1U;
 8006072:	2301      	movs	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	e001      	b.n	800607c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d15c      	bne.n	8006140 <osMutexNew+0x102>
      mem = -1;
 8006086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800608a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d015      	beq.n	80060be <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d006      	beq.n	80060a8 <osMutexNew+0x6a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	2b4f      	cmp	r3, #79	; 0x4f
 80060a0:	d902      	bls.n	80060a8 <osMutexNew+0x6a>
          mem = 1;
 80060a2:	2301      	movs	r3, #1
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	e00c      	b.n	80060c2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d108      	bne.n	80060c2 <osMutexNew+0x84>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <osMutexNew+0x84>
            mem = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	e001      	b.n	80060c2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d112      	bne.n	80060ee <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	4619      	mov	r1, r3
 80060d4:	2004      	movs	r0, #4
 80060d6:	f000 fb18 	bl	800670a <xQueueCreateMutexStatic>
 80060da:	61f8      	str	r0, [r7, #28]
 80060dc:	e016      	b.n	800610c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	4619      	mov	r1, r3
 80060e4:	2001      	movs	r0, #1
 80060e6:	f000 fb10 	bl	800670a <xQueueCreateMutexStatic>
 80060ea:	61f8      	str	r0, [r7, #28]
 80060ec:	e00e      	b.n	800610c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10b      	bne.n	800610c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80060fa:	2004      	movs	r0, #4
 80060fc:	f000 faed 	bl	80066da <xQueueCreateMutex>
 8006100:	61f8      	str	r0, [r7, #28]
 8006102:	e003      	b.n	800610c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006104:	2001      	movs	r0, #1
 8006106:	f000 fae8 	bl	80066da <xQueueCreateMutex>
 800610a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00c      	beq.n	800612c <osMutexNew+0xee>
        if (attr != NULL) {
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <osMutexNew+0xe2>
          name = attr->name;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	e001      	b.n	8006124 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006124:	68f9      	ldr	r1, [r7, #12]
 8006126:	69f8      	ldr	r0, [r7, #28]
 8006128:	f001 f822 	bl	8007170 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d006      	beq.n	8006140 <osMutexNew+0x102>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006140:	69fb      	ldr	r3, [r7, #28]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800614a:	b580      	push	{r7, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006168:	f3ef 8305 	mrs	r3, IPSR
 800616c:	60bb      	str	r3, [r7, #8]
  return(result);
 800616e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006174:	f06f 0305 	mvn.w	r3, #5
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	e02c      	b.n	80061d6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d103      	bne.n	800618a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006182:	f06f 0303 	mvn.w	r3, #3
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	e025      	b.n	80061d6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d011      	beq.n	80061b4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	6938      	ldr	r0, [r7, #16]
 8006194:	f000 fb08 	bl	80067a8 <xQueueTakeMutexRecursive>
 8006198:	4603      	mov	r3, r0
 800619a:	2b01      	cmp	r3, #1
 800619c:	d01b      	beq.n	80061d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80061a4:	f06f 0301 	mvn.w	r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e014      	b.n	80061d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80061ac:	f06f 0302 	mvn.w	r3, #2
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	e010      	b.n	80061d6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6938      	ldr	r0, [r7, #16]
 80061b8:	f000 fda6 	bl	8006d08 <xQueueSemaphoreTake>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d009      	beq.n	80061d6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80061c8:	f06f 0301 	mvn.w	r3, #1
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	e002      	b.n	80061d6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80061d0:	f06f 0302 	mvn.w	r3, #2
 80061d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80061d6:	697b      	ldr	r3, [r7, #20]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f023 0301 	bic.w	r3, r3, #1
 80061ee:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061fc:	f3ef 8305 	mrs	r3, IPSR
 8006200:	60bb      	str	r3, [r7, #8]
  return(result);
 8006202:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006208:	f06f 0305 	mvn.w	r3, #5
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	e01f      	b.n	8006250 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d103      	bne.n	800621e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006216:	f06f 0303 	mvn.w	r3, #3
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e018      	b.n	8006250 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d009      	beq.n	8006238 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006224:	6938      	ldr	r0, [r7, #16]
 8006226:	f000 fa8b 	bl	8006740 <xQueueGiveMutexRecursive>
 800622a:	4603      	mov	r3, r0
 800622c:	2b01      	cmp	r3, #1
 800622e:	d00f      	beq.n	8006250 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006230:	f06f 0302 	mvn.w	r3, #2
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e00b      	b.n	8006250 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006238:	2300      	movs	r3, #0
 800623a:	2200      	movs	r2, #0
 800623c:	2100      	movs	r1, #0
 800623e:	6938      	ldr	r0, [r7, #16]
 8006240:	f000 fae8 	bl	8006814 <xQueueGenericSend>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d002      	beq.n	8006250 <osMutexRelease+0x70>
        stat = osErrorResource;
 800624a:	f06f 0302 	mvn.w	r3, #2
 800624e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006250:	697b      	ldr	r3, [r7, #20]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4a07      	ldr	r2, [pc, #28]	; (8006288 <vApplicationGetIdleTaskMemory+0x2c>)
 800626c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a06      	ldr	r2, [pc, #24]	; (800628c <vApplicationGetIdleTaskMemory+0x30>)
 8006272:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2280      	movs	r2, #128	; 0x80
 8006278:	601a      	str	r2, [r3, #0]
}
 800627a:	bf00      	nop
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	200003c8 	.word	0x200003c8
 800628c:	20000424 	.word	0x20000424

08006290 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a07      	ldr	r2, [pc, #28]	; (80062bc <vApplicationGetTimerTaskMemory+0x2c>)
 80062a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4a06      	ldr	r2, [pc, #24]	; (80062c0 <vApplicationGetTimerTaskMemory+0x30>)
 80062a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062ae:	601a      	str	r2, [r3, #0]
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	20000624 	.word	0x20000624
 80062c0:	20000680 	.word	0x20000680

080062c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f103 0208 	add.w	r2, r3, #8
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f103 0208 	add.w	r2, r3, #8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f103 0208 	add.w	r2, r3, #8
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	601a      	str	r2, [r3, #0]
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800637c:	d103      	bne.n	8006386 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e00c      	b.n	80063a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3308      	adds	r3, #8
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	e002      	b.n	8006394 <vListInsert+0x2e>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	429a      	cmp	r2, r3
 800639e:	d2f6      	bcs.n	800638e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	601a      	str	r2, [r3, #0]
}
 80063cc:	bf00      	nop
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6892      	ldr	r2, [r2, #8]
 80063ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6852      	ldr	r2, [r2, #4]
 80063f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d103      	bne.n	800640c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	1e5a      	subs	r2, r3, #1
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006456:	f002 fc4d 	bl	8008cf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	68f9      	ldr	r1, [r7, #12]
 8006464:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006466:	fb01 f303 	mul.w	r3, r1, r3
 800646a:	441a      	add	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006486:	3b01      	subs	r3, #1
 8006488:	68f9      	ldr	r1, [r7, #12]
 800648a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800648c:	fb01 f303 	mul.w	r3, r1, r3
 8006490:	441a      	add	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	22ff      	movs	r2, #255	; 0xff
 800649a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	22ff      	movs	r2, #255	; 0xff
 80064a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d114      	bne.n	80064d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01a      	beq.n	80064ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3310      	adds	r3, #16
 80064b8:	4618      	mov	r0, r3
 80064ba:	f001 fbef 	bl	8007c9c <xTaskRemoveFromEventList>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d012      	beq.n	80064ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064c4:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <xQueueGenericReset+0xcc>)
 80064c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	e009      	b.n	80064ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3310      	adds	r3, #16
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff fef2 	bl	80062c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3324      	adds	r3, #36	; 0x24
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff feed 	bl	80062c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064ea:	f002 fc33 	bl	8008d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064ee:	2301      	movs	r3, #1
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08e      	sub	sp, #56	; 0x38
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <xQueueGenericCreateStatic+0x52>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <xQueueGenericCreateStatic+0x56>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <xQueueGenericCreateStatic+0x58>
 8006552:	2300      	movs	r3, #0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	623b      	str	r3, [r7, #32]
}
 800656a:	bf00      	nop
 800656c:	e7fe      	b.n	800656c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <xQueueGenericCreateStatic+0x7e>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <xQueueGenericCreateStatic+0x82>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <xQueueGenericCreateStatic+0x84>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	61fb      	str	r3, [r7, #28]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800659a:	2350      	movs	r3, #80	; 0x50
 800659c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b50      	cmp	r3, #80	; 0x50
 80065a2:	d00a      	beq.n	80065ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	61bb      	str	r3, [r7, #24]
}
 80065b6:	bf00      	nop
 80065b8:	e7fe      	b.n	80065b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00d      	beq.n	80065e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	4613      	mov	r3, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f83f 	bl	8006660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3730      	adds	r7, #48	; 0x30
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08a      	sub	sp, #40	; 0x28
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	613b      	str	r3, [r7, #16]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	fb02 f303 	mul.w	r3, r2, r3
 800661e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	3350      	adds	r3, #80	; 0x50
 8006624:	4618      	mov	r0, r3
 8006626:	f002 fc87 	bl	8008f38 <pvPortMalloc>
 800662a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d011      	beq.n	8006656 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	3350      	adds	r3, #80	; 0x50
 800663a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006644:	79fa      	ldrb	r2, [r7, #7]
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	4613      	mov	r3, r2
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f805 	bl	8006660 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006656:	69bb      	ldr	r3, [r7, #24]
	}
 8006658:	4618      	mov	r0, r3
 800665a:	3720      	adds	r7, #32
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	e002      	b.n	8006682 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800668e:	2101      	movs	r1, #1
 8006690:	69b8      	ldr	r0, [r7, #24]
 8006692:	f7ff fecb 	bl	800642c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	78fa      	ldrb	r2, [r7, #3]
 800669a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00e      	beq.n	80066d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80066c6:	2300      	movs	r3, #0
 80066c8:	2200      	movs	r2, #0
 80066ca:	2100      	movs	r1, #0
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f8a1 	bl	8006814 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b086      	sub	sp, #24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	4603      	mov	r3, r0
 80066e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066e4:	2301      	movs	r3, #1
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	2300      	movs	r3, #0
 80066ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6939      	ldr	r1, [r7, #16]
 80066f2:	6978      	ldr	r0, [r7, #20]
 80066f4:	f7ff ff7a 	bl	80065ec <xQueueGenericCreate>
 80066f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff ffd3 	bl	80066a6 <prvInitialiseMutex>

		return xNewQueue;
 8006700:	68fb      	ldr	r3, [r7, #12]
	}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800670a:	b580      	push	{r7, lr}
 800670c:	b088      	sub	sp, #32
 800670e:	af02      	add	r7, sp, #8
 8006710:	4603      	mov	r3, r0
 8006712:	6039      	str	r1, [r7, #0]
 8006714:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006716:	2301      	movs	r3, #1
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	2300      	movs	r3, #0
 800671c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2200      	movs	r2, #0
 8006726:	6939      	ldr	r1, [r7, #16]
 8006728:	6978      	ldr	r0, [r7, #20]
 800672a:	f7ff fee7 	bl	80064fc <xQueueGenericCreateStatic>
 800672e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff ffb8 	bl	80066a6 <prvInitialiseMutex>

		return xNewQueue;
 8006736:	68fb      	ldr	r3, [r7, #12]
	}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006740:	b590      	push	{r4, r7, lr}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	60fb      	str	r3, [r7, #12]
}
 8006764:	bf00      	nop
 8006766:	e7fe      	b.n	8006766 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	689c      	ldr	r4, [r3, #8]
 800676c:	f001 fc56 	bl	800801c <xTaskGetCurrentTaskHandle>
 8006770:	4603      	mov	r3, r0
 8006772:	429c      	cmp	r4, r3
 8006774:	d111      	bne.n	800679a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	1e5a      	subs	r2, r3, #1
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d105      	bne.n	8006794 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006788:	2300      	movs	r3, #0
 800678a:	2200      	movs	r2, #0
 800678c:	2100      	movs	r1, #0
 800678e:	6938      	ldr	r0, [r7, #16]
 8006790:	f000 f840 	bl	8006814 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006794:	2301      	movs	r3, #1
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	e001      	b.n	800679e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800679e:	697b      	ldr	r3, [r7, #20]
	}
 80067a0:	4618      	mov	r0, r3
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd90      	pop	{r4, r7, pc}

080067a8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80067a8:	b590      	push	{r4, r7, lr}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	60fb      	str	r3, [r7, #12]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	689c      	ldr	r4, [r3, #8]
 80067d6:	f001 fc21 	bl	800801c <xTaskGetCurrentTaskHandle>
 80067da:	4603      	mov	r3, r0
 80067dc:	429c      	cmp	r4, r3
 80067de:	d107      	bne.n	80067f0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80067ea:	2301      	movs	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	e00c      	b.n	800680a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6938      	ldr	r0, [r7, #16]
 80067f4:	f000 fa88 	bl	8006d08 <xQueueSemaphoreTake>
 80067f8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d004      	beq.n	800680a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800680a:	697b      	ldr	r3, [r7, #20]
	}
 800680c:	4618      	mov	r0, r3
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	bd90      	pop	{r4, r7, pc}

08006814 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08e      	sub	sp, #56	; 0x38
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006822:	2300      	movs	r3, #0
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <xQueueGenericSend+0x32>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d103      	bne.n	8006854 <xQueueGenericSend+0x40>
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <xQueueGenericSend+0x44>
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <xQueueGenericSend+0x46>
 8006858:	2300      	movs	r3, #0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <xQueueGenericSend+0x60>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d103      	bne.n	8006882 <xQueueGenericSend+0x6e>
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <xQueueGenericSend+0x72>
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <xQueueGenericSend+0x74>
 8006886:	2300      	movs	r3, #0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	623b      	str	r3, [r7, #32]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068a2:	f001 fbcb 	bl	800803c <xTaskGetSchedulerState>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d102      	bne.n	80068b2 <xQueueGenericSend+0x9e>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <xQueueGenericSend+0xa2>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e000      	b.n	80068b8 <xQueueGenericSend+0xa4>
 80068b6:	2300      	movs	r3, #0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	61fb      	str	r3, [r7, #28]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068d2:	f002 fa0f 	bl	8008cf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068de:	429a      	cmp	r2, r3
 80068e0:	d302      	bcc.n	80068e8 <xQueueGenericSend+0xd4>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d129      	bne.n	800693c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068ee:	f000 fb2f 	bl	8006f50 <prvCopyDataToQueue>
 80068f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d010      	beq.n	800691e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	3324      	adds	r3, #36	; 0x24
 8006900:	4618      	mov	r0, r3
 8006902:	f001 f9cb 	bl	8007c9c <xTaskRemoveFromEventList>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d013      	beq.n	8006934 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800690c:	4b3f      	ldr	r3, [pc, #252]	; (8006a0c <xQueueGenericSend+0x1f8>)
 800690e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	e00a      	b.n	8006934 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d007      	beq.n	8006934 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006924:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <xQueueGenericSend+0x1f8>)
 8006926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006934:	f002 fa0e 	bl	8008d54 <vPortExitCritical>
				return pdPASS;
 8006938:	2301      	movs	r3, #1
 800693a:	e063      	b.n	8006a04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d103      	bne.n	800694a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006942:	f002 fa07 	bl	8008d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006946:	2300      	movs	r3, #0
 8006948:	e05c      	b.n	8006a04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800694a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694c:	2b00      	cmp	r3, #0
 800694e:	d106      	bne.n	800695e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006950:	f107 0314 	add.w	r3, r7, #20
 8006954:	4618      	mov	r0, r3
 8006956:	f001 fa05 	bl	8007d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800695a:	2301      	movs	r3, #1
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800695e:	f002 f9f9 	bl	8008d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006962:	f000 ff77 	bl	8007854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006966:	f002 f9c5 	bl	8008cf4 <vPortEnterCritical>
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006970:	b25b      	sxtb	r3, r3
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006976:	d103      	bne.n	8006980 <xQueueGenericSend+0x16c>
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006986:	b25b      	sxtb	r3, r3
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800698c:	d103      	bne.n	8006996 <xQueueGenericSend+0x182>
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006996:	f002 f9dd 	bl	8008d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800699a:	1d3a      	adds	r2, r7, #4
 800699c:	f107 0314 	add.w	r3, r7, #20
 80069a0:	4611      	mov	r1, r2
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 f9f4 	bl	8007d90 <xTaskCheckForTimeOut>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d124      	bne.n	80069f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069b0:	f000 fbc6 	bl	8007140 <prvIsQueueFull>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d018      	beq.n	80069ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	3310      	adds	r3, #16
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	4611      	mov	r1, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 f91a 	bl	8007bfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ca:	f000 fb51 	bl	8007070 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069ce:	f000 ff4f 	bl	8007870 <xTaskResumeAll>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f47f af7c 	bne.w	80068d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80069da:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <xQueueGenericSend+0x1f8>)
 80069dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	e772      	b.n	80068d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069ee:	f000 fb3f 	bl	8007070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069f2:	f000 ff3d 	bl	8007870 <xTaskResumeAll>
 80069f6:	e76c      	b.n	80068d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069fa:	f000 fb39 	bl	8007070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069fe:	f000 ff37 	bl	8007870 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3738      	adds	r7, #56	; 0x38
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	e000ed04 	.word	0xe000ed04

08006a10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b090      	sub	sp, #64	; 0x40
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10a      	bne.n	8006a3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a3a:	bf00      	nop
 8006a3c:	e7fe      	b.n	8006a3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d103      	bne.n	8006a4c <xQueueGenericSendFromISR+0x3c>
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <xQueueGenericSendFromISR+0x40>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <xQueueGenericSendFromISR+0x42>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10a      	bne.n	8006a6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d103      	bne.n	8006a7a <xQueueGenericSendFromISR+0x6a>
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <xQueueGenericSendFromISR+0x6e>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <xQueueGenericSendFromISR+0x70>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	623b      	str	r3, [r7, #32]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a9a:	f002 fa0d 	bl	8008eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a9e:	f3ef 8211 	mrs	r2, BASEPRI
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	61fa      	str	r2, [r7, #28]
 8006ab4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d302      	bcc.n	8006acc <xQueueGenericSendFromISR+0xbc>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d12f      	bne.n	8006b2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ae2:	f000 fa35 	bl	8006f50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ae6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aee:	d112      	bne.n	8006b16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d016      	beq.n	8006b26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	3324      	adds	r3, #36	; 0x24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f001 f8cd 	bl	8007c9c <xTaskRemoveFromEventList>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00e      	beq.n	8006b26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e007      	b.n	8006b26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	b25a      	sxtb	r2, r3
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b26:	2301      	movs	r3, #1
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006b2a:	e001      	b.n	8006b30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3740      	adds	r7, #64	; 0x40
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08c      	sub	sp, #48	; 0x30
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <xQueueReceive+0x30>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	623b      	str	r3, [r7, #32]
}
 8006b74:	bf00      	nop
 8006b76:	e7fe      	b.n	8006b76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <xQueueReceive+0x3e>
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <xQueueReceive+0x42>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <xQueueReceive+0x44>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <xQueueReceive+0x5e>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	61fb      	str	r3, [r7, #28]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ba6:	f001 fa49 	bl	800803c <xTaskGetSchedulerState>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <xQueueReceive+0x6e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <xQueueReceive+0x72>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <xQueueReceive+0x74>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <xQueueReceive+0x8e>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	61bb      	str	r3, [r7, #24]
}
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bd6:	f002 f88d 	bl	8008cf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01f      	beq.n	8006c26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bea:	f000 fa1b 	bl	8007024 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	1e5a      	subs	r2, r3, #1
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00f      	beq.n	8006c1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	3310      	adds	r3, #16
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 f84a 	bl	8007c9c <xTaskRemoveFromEventList>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c0e:	4b3d      	ldr	r3, [pc, #244]	; (8006d04 <xQueueReceive+0x1bc>)
 8006c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c1e:	f002 f899 	bl	8008d54 <vPortExitCritical>
				return pdPASS;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e069      	b.n	8006cfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d103      	bne.n	8006c34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c2c:	f002 f892 	bl	8008d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e062      	b.n	8006cfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c3a:	f107 0310 	add.w	r3, r7, #16
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 f890 	bl	8007d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c44:	2301      	movs	r3, #1
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c48:	f002 f884 	bl	8008d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c4c:	f000 fe02 	bl	8007854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c50:	f002 f850 	bl	8008cf4 <vPortEnterCritical>
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c5a:	b25b      	sxtb	r3, r3
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c60:	d103      	bne.n	8006c6a <xQueueReceive+0x122>
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c70:	b25b      	sxtb	r3, r3
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c76:	d103      	bne.n	8006c80 <xQueueReceive+0x138>
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c80:	f002 f868 	bl	8008d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c84:	1d3a      	adds	r2, r7, #4
 8006c86:	f107 0310 	add.w	r3, r7, #16
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 f87f 	bl	8007d90 <xTaskCheckForTimeOut>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d123      	bne.n	8006ce0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c9a:	f000 fa3b 	bl	8007114 <prvIsQueueEmpty>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d017      	beq.n	8006cd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	3324      	adds	r3, #36	; 0x24
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	4611      	mov	r1, r2
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 ffa5 	bl	8007bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb4:	f000 f9dc 	bl	8007070 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cb8:	f000 fdda 	bl	8007870 <xTaskResumeAll>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d189      	bne.n	8006bd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006cc2:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <xQueueReceive+0x1bc>)
 8006cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	e780      	b.n	8006bd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd6:	f000 f9cb 	bl	8007070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cda:	f000 fdc9 	bl	8007870 <xTaskResumeAll>
 8006cde:	e77a      	b.n	8006bd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce2:	f000 f9c5 	bl	8007070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ce6:	f000 fdc3 	bl	8007870 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cec:	f000 fa12 	bl	8007114 <prvIsQueueEmpty>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f43f af6f 	beq.w	8006bd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3730      	adds	r7, #48	; 0x30
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08e      	sub	sp, #56	; 0x38
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d12:	2300      	movs	r3, #0
 8006d14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	623b      	str	r3, [r7, #32]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	61fb      	str	r3, [r7, #28]
}
 8006d54:	bf00      	nop
 8006d56:	e7fe      	b.n	8006d56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d58:	f001 f970 	bl	800803c <xTaskGetSchedulerState>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <xQueueSemaphoreTake+0x60>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <xQueueSemaphoreTake+0x64>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <xQueueSemaphoreTake+0x66>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10a      	bne.n	8006d88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	61bb      	str	r3, [r7, #24]
}
 8006d84:	bf00      	nop
 8006d86:	e7fe      	b.n	8006d86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d88:	f001 ffb4 	bl	8008cf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d024      	beq.n	8006de2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	1e5a      	subs	r2, r3, #1
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006da8:	f001 fabe 	bl	8008328 <pvTaskIncrementMutexHeldCount>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00f      	beq.n	8006dda <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	3310      	adds	r3, #16
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 ff6c 	bl	8007c9c <xTaskRemoveFromEventList>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d007      	beq.n	8006dda <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dca:	4b54      	ldr	r3, [pc, #336]	; (8006f1c <xQueueSemaphoreTake+0x214>)
 8006dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dda:	f001 ffbb 	bl	8008d54 <vPortExitCritical>
				return pdPASS;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e097      	b.n	8006f12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d111      	bne.n	8006e0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	617b      	str	r3, [r7, #20]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e04:	f001 ffa6 	bl	8008d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	e082      	b.n	8006f12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e12:	f107 030c 	add.w	r3, r7, #12
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 ffa4 	bl	8007d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e20:	f001 ff98 	bl	8008d54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e24:	f000 fd16 	bl	8007854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e28:	f001 ff64 	bl	8008cf4 <vPortEnterCritical>
 8006e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e32:	b25b      	sxtb	r3, r3
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e38:	d103      	bne.n	8006e42 <xQueueSemaphoreTake+0x13a>
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e48:	b25b      	sxtb	r3, r3
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e4e:	d103      	bne.n	8006e58 <xQueueSemaphoreTake+0x150>
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e58:	f001 ff7c 	bl	8008d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e5c:	463a      	mov	r2, r7
 8006e5e:	f107 030c 	add.w	r3, r7, #12
 8006e62:	4611      	mov	r1, r2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 ff93 	bl	8007d90 <xTaskCheckForTimeOut>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d132      	bne.n	8006ed6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e72:	f000 f94f 	bl	8007114 <prvIsQueueEmpty>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d026      	beq.n	8006eca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d109      	bne.n	8006e98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006e84:	f001 ff36 	bl	8008cf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 f8f3 	bl	8008078 <xTaskPriorityInherit>
 8006e92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006e94:	f001 ff5e 	bl	8008d54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	3324      	adds	r3, #36	; 0x24
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 feab 	bl	8007bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ea8:	f000 f8e2 	bl	8007070 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006eac:	f000 fce0 	bl	8007870 <xTaskResumeAll>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f47f af68 	bne.w	8006d88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006eb8:	4b18      	ldr	r3, [pc, #96]	; (8006f1c <xQueueSemaphoreTake+0x214>)
 8006eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	e75e      	b.n	8006d88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006eca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ecc:	f000 f8d0 	bl	8007070 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ed0:	f000 fcce 	bl	8007870 <xTaskResumeAll>
 8006ed4:	e758      	b.n	8006d88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006ed6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ed8:	f000 f8ca 	bl	8007070 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006edc:	f000 fcc8 	bl	8007870 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ee2:	f000 f917 	bl	8007114 <prvIsQueueEmpty>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f43f af4d 	beq.w	8006d88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00d      	beq.n	8006f10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006ef4:	f001 fefe 	bl	8008cf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006efa:	f000 f811 	bl	8006f20 <prvGetDisinheritPriorityAfterTimeout>
 8006efe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 f98c 	bl	8008224 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f0c:	f001 ff22 	bl	8008d54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3738      	adds	r7, #56	; 0x38
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	e000ed04 	.word	0xe000ed04

08006f20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d006      	beq.n	8006f3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	e001      	b.n	8006f42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006f42:	68fb      	ldr	r3, [r7, #12]
	}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10d      	bne.n	8006f8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d14d      	bne.n	8007012 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 f8e4 	bl	8008148 <xTaskPriorityDisinherit>
 8006f80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	609a      	str	r2, [r3, #8]
 8006f88:	e043      	b.n	8007012 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d119      	bne.n	8006fc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6858      	ldr	r0, [r3, #4]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	461a      	mov	r2, r3
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	f002 fa10 	bl	80093c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	441a      	add	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d32b      	bcc.n	8007012 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	605a      	str	r2, [r3, #4]
 8006fc2:	e026      	b.n	8007012 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	68d8      	ldr	r0, [r3, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	461a      	mov	r2, r3
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	f002 f9f6 	bl	80093c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fdc:	425b      	negs	r3, r3
 8006fde:	441a      	add	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d207      	bcs.n	8007000 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	425b      	negs	r3, r3
 8006ffa:	441a      	add	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d105      	bne.n	8007012 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	3b01      	subs	r3, #1
 8007010:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800701a:	697b      	ldr	r3, [r7, #20]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	d018      	beq.n	8007068 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	441a      	add	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	429a      	cmp	r2, r3
 800704e:	d303      	bcc.n	8007058 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68d9      	ldr	r1, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	461a      	mov	r2, r3
 8007062:	6838      	ldr	r0, [r7, #0]
 8007064:	f002 f9ac 	bl	80093c0 <memcpy>
	}
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007078:	f001 fe3c 	bl	8008cf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007082:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007084:	e011      	b.n	80070aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	d012      	beq.n	80070b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3324      	adds	r3, #36	; 0x24
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fe02 	bl	8007c9c <xTaskRemoveFromEventList>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800709e:	f000 fed9 	bl	8007e54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	dce9      	bgt.n	8007086 <prvUnlockQueue+0x16>
 80070b2:	e000      	b.n	80070b6 <prvUnlockQueue+0x46>
					break;
 80070b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	22ff      	movs	r2, #255	; 0xff
 80070ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070be:	f001 fe49 	bl	8008d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070c2:	f001 fe17 	bl	8008cf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070ce:	e011      	b.n	80070f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d012      	beq.n	80070fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3310      	adds	r3, #16
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fddd 	bl	8007c9c <xTaskRemoveFromEventList>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070e8:	f000 feb4 	bl	8007e54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	dce9      	bgt.n	80070d0 <prvUnlockQueue+0x60>
 80070fc:	e000      	b.n	8007100 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	22ff      	movs	r2, #255	; 0xff
 8007104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007108:	f001 fe24 	bl	8008d54 <vPortExitCritical>
}
 800710c:	bf00      	nop
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800711c:	f001 fdea 	bl	8008cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007128:	2301      	movs	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e001      	b.n	8007132 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800712e:	2300      	movs	r3, #0
 8007130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007132:	f001 fe0f 	bl	8008d54 <vPortExitCritical>

	return xReturn;
 8007136:	68fb      	ldr	r3, [r7, #12]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007148:	f001 fdd4 	bl	8008cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007154:	429a      	cmp	r2, r3
 8007156:	d102      	bne.n	800715e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007158:	2301      	movs	r3, #1
 800715a:	60fb      	str	r3, [r7, #12]
 800715c:	e001      	b.n	8007162 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007162:	f001 fdf7 	bl	8008d54 <vPortExitCritical>

	return xReturn;
 8007166:	68fb      	ldr	r3, [r7, #12]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	e014      	b.n	80071aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007180:	4a0f      	ldr	r2, [pc, #60]	; (80071c0 <vQueueAddToRegistry+0x50>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10b      	bne.n	80071a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800718c:	490c      	ldr	r1, [pc, #48]	; (80071c0 <vQueueAddToRegistry+0x50>)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007196:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <vQueueAddToRegistry+0x50>)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4413      	add	r3, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071a2:	e006      	b.n	80071b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3301      	adds	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b07      	cmp	r3, #7
 80071ae:	d9e7      	bls.n	8007180 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000a80 	.word	0x20000a80

080071c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071d4:	f001 fd8e 	bl	8008cf4 <vPortEnterCritical>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071de:	b25b      	sxtb	r3, r3
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e4:	d103      	bne.n	80071ee <vQueueWaitForMessageRestricted+0x2a>
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071f4:	b25b      	sxtb	r3, r3
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071fa:	d103      	bne.n	8007204 <vQueueWaitForMessageRestricted+0x40>
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007204:	f001 fda6 	bl	8008d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	2b00      	cmp	r3, #0
 800720e:	d106      	bne.n	800721e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	3324      	adds	r3, #36	; 0x24
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fd13 	bl	8007c44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800721e:	6978      	ldr	r0, [r7, #20]
 8007220:	f7ff ff26 	bl	8007070 <prvUnlockQueue>
	}
 8007224:	bf00      	nop
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08e      	sub	sp, #56	; 0x38
 8007230:	af04      	add	r7, sp, #16
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800723a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10a      	bne.n	8007256 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	623b      	str	r3, [r7, #32]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10a      	bne.n	8007272 <xTaskCreateStatic+0x46>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	61fb      	str	r3, [r7, #28]
}
 800726e:	bf00      	nop
 8007270:	e7fe      	b.n	8007270 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007272:	235c      	movs	r3, #92	; 0x5c
 8007274:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	2b5c      	cmp	r3, #92	; 0x5c
 800727a:	d00a      	beq.n	8007292 <xTaskCreateStatic+0x66>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	61bb      	str	r3, [r7, #24]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007292:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	2b00      	cmp	r3, #0
 8007298:	d01e      	beq.n	80072d8 <xTaskCreateStatic+0xac>
 800729a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01b      	beq.n	80072d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072b2:	2300      	movs	r3, #0
 80072b4:	9303      	str	r3, [sp, #12]
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	9302      	str	r3, [sp, #8]
 80072ba:	f107 0314 	add.w	r3, r7, #20
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f850 	bl	8007370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072d2:	f000 f8dd 	bl	8007490 <prvAddNewTaskToReadyList>
 80072d6:	e001      	b.n	80072dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072dc:	697b      	ldr	r3, [r7, #20]
	}
 80072de:	4618      	mov	r0, r3
 80072e0:	3728      	adds	r7, #40	; 0x28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b08c      	sub	sp, #48	; 0x30
 80072ea:	af04      	add	r7, sp, #16
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	603b      	str	r3, [r7, #0]
 80072f2:	4613      	mov	r3, r2
 80072f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 fe1c 	bl	8008f38 <pvPortMalloc>
 8007300:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00e      	beq.n	8007326 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007308:	205c      	movs	r0, #92	; 0x5c
 800730a:	f001 fe15 	bl	8008f38 <pvPortMalloc>
 800730e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	631a      	str	r2, [r3, #48]	; 0x30
 800731c:	e005      	b.n	800732a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800731e:	6978      	ldr	r0, [r7, #20]
 8007320:	f001 fed6 	bl	80090d0 <vPortFree>
 8007324:	e001      	b.n	800732a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d017      	beq.n	8007360 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007338:	88fa      	ldrh	r2, [r7, #6]
 800733a:	2300      	movs	r3, #0
 800733c:	9303      	str	r3, [sp, #12]
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f80e 	bl	8007370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007354:	69f8      	ldr	r0, [r7, #28]
 8007356:	f000 f89b 	bl	8007490 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800735a:	2301      	movs	r3, #1
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	e002      	b.n	8007366 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007364:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007366:	69bb      	ldr	r3, [r7, #24]
	}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	461a      	mov	r2, r3
 8007388:	21a5      	movs	r1, #165	; 0xa5
 800738a:	f002 f827 	bl	80093dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007398:	3b01      	subs	r3, #1
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f023 0307 	bic.w	r3, r3, #7
 80073a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	617b      	str	r3, [r7, #20]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d01f      	beq.n	800740e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073ce:	2300      	movs	r3, #0
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	e012      	b.n	80073fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	4413      	add	r3, r2
 80073da:	7819      	ldrb	r1, [r3, #0]
 80073dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	4413      	add	r3, r2
 80073e2:	3334      	adds	r3, #52	; 0x34
 80073e4:	460a      	mov	r2, r1
 80073e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d006      	beq.n	8007402 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	3301      	adds	r3, #1
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	2b0f      	cmp	r3, #15
 80073fe:	d9e9      	bls.n	80073d4 <prvInitialiseNewTask+0x64>
 8007400:	e000      	b.n	8007404 <prvInitialiseNewTask+0x94>
			{
				break;
 8007402:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800740c:	e003      	b.n	8007416 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	2b37      	cmp	r3, #55	; 0x37
 800741a:	d901      	bls.n	8007420 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800741c:	2337      	movs	r3, #55	; 0x37
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007424:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800742a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	2200      	movs	r2, #0
 8007430:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	3304      	adds	r3, #4
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe ff64 	bl	8006304 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	3318      	adds	r3, #24
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe ff5f 	bl	8006304 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800745a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	2200      	movs	r2, #0
 8007460:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	68f9      	ldr	r1, [r7, #12]
 800746e:	69b8      	ldr	r0, [r7, #24]
 8007470:	f001 fb10 	bl	8008a94 <pxPortInitialiseStack>
 8007474:	4602      	mov	r2, r0
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007486:	bf00      	nop
 8007488:	3720      	adds	r7, #32
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007498:	f001 fc2c 	bl	8008cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800749c:	4b2d      	ldr	r3, [pc, #180]	; (8007554 <prvAddNewTaskToReadyList+0xc4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3301      	adds	r3, #1
 80074a2:	4a2c      	ldr	r2, [pc, #176]	; (8007554 <prvAddNewTaskToReadyList+0xc4>)
 80074a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074a6:	4b2c      	ldr	r3, [pc, #176]	; (8007558 <prvAddNewTaskToReadyList+0xc8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d109      	bne.n	80074c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074ae:	4a2a      	ldr	r2, [pc, #168]	; (8007558 <prvAddNewTaskToReadyList+0xc8>)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074b4:	4b27      	ldr	r3, [pc, #156]	; (8007554 <prvAddNewTaskToReadyList+0xc4>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d110      	bne.n	80074de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074bc:	f000 fcf0 	bl	8007ea0 <prvInitialiseTaskLists>
 80074c0:	e00d      	b.n	80074de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074c2:	4b26      	ldr	r3, [pc, #152]	; (800755c <prvAddNewTaskToReadyList+0xcc>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d109      	bne.n	80074de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074ca:	4b23      	ldr	r3, [pc, #140]	; (8007558 <prvAddNewTaskToReadyList+0xc8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d802      	bhi.n	80074de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074d8:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <prvAddNewTaskToReadyList+0xc8>)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074de:	4b20      	ldr	r3, [pc, #128]	; (8007560 <prvAddNewTaskToReadyList+0xd0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3301      	adds	r3, #1
 80074e4:	4a1e      	ldr	r2, [pc, #120]	; (8007560 <prvAddNewTaskToReadyList+0xd0>)
 80074e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074e8:	4b1d      	ldr	r3, [pc, #116]	; (8007560 <prvAddNewTaskToReadyList+0xd0>)
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f4:	4b1b      	ldr	r3, [pc, #108]	; (8007564 <prvAddNewTaskToReadyList+0xd4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d903      	bls.n	8007504 <prvAddNewTaskToReadyList+0x74>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	4a18      	ldr	r2, [pc, #96]	; (8007564 <prvAddNewTaskToReadyList+0xd4>)
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4a15      	ldr	r2, [pc, #84]	; (8007568 <prvAddNewTaskToReadyList+0xd8>)
 8007512:	441a      	add	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3304      	adds	r3, #4
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f7fe feff 	bl	800631e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007520:	f001 fc18 	bl	8008d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007524:	4b0d      	ldr	r3, [pc, #52]	; (800755c <prvAddNewTaskToReadyList+0xcc>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00e      	beq.n	800754a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800752c:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <prvAddNewTaskToReadyList+0xc8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	429a      	cmp	r2, r3
 8007538:	d207      	bcs.n	800754a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <prvAddNewTaskToReadyList+0xdc>)
 800753c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800754a:	bf00      	nop
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20000f94 	.word	0x20000f94
 8007558:	20000ac0 	.word	0x20000ac0
 800755c:	20000fa0 	.word	0x20000fa0
 8007560:	20000fb0 	.word	0x20000fb0
 8007564:	20000f9c 	.word	0x20000f9c
 8007568:	20000ac4 	.word	0x20000ac4
 800756c:	e000ed04 	.word	0xe000ed04

08007570 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007578:	f001 fbbc 	bl	8008cf4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d102      	bne.n	8007588 <vTaskDelete+0x18>
 8007582:	4b2c      	ldr	r3, [pc, #176]	; (8007634 <vTaskDelete+0xc4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	e000      	b.n	800758a <vTaskDelete+0x1a>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3304      	adds	r3, #4
 8007590:	4618      	mov	r0, r3
 8007592:	f7fe ff21 	bl	80063d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	2b00      	cmp	r3, #0
 800759c:	d004      	beq.n	80075a8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3318      	adds	r3, #24
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe ff18 	bl	80063d8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80075a8:	4b23      	ldr	r3, [pc, #140]	; (8007638 <vTaskDelete+0xc8>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3301      	adds	r3, #1
 80075ae:	4a22      	ldr	r2, [pc, #136]	; (8007638 <vTaskDelete+0xc8>)
 80075b0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80075b2:	4b20      	ldr	r3, [pc, #128]	; (8007634 <vTaskDelete+0xc4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d10b      	bne.n	80075d4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3304      	adds	r3, #4
 80075c0:	4619      	mov	r1, r3
 80075c2:	481e      	ldr	r0, [pc, #120]	; (800763c <vTaskDelete+0xcc>)
 80075c4:	f7fe feab 	bl	800631e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80075c8:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <vTaskDelete+0xd0>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3301      	adds	r3, #1
 80075ce:	4a1c      	ldr	r2, [pc, #112]	; (8007640 <vTaskDelete+0xd0>)
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	e009      	b.n	80075e8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80075d4:	4b1b      	ldr	r3, [pc, #108]	; (8007644 <vTaskDelete+0xd4>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3b01      	subs	r3, #1
 80075da:	4a1a      	ldr	r2, [pc, #104]	; (8007644 <vTaskDelete+0xd4>)
 80075dc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fccc 	bl	8007f7c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80075e4:	f000 fcfa 	bl	8007fdc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80075e8:	f001 fbb4 	bl	8008d54 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80075ec:	4b16      	ldr	r3, [pc, #88]	; (8007648 <vTaskDelete+0xd8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01b      	beq.n	800762c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80075f4:	4b0f      	ldr	r3, [pc, #60]	; (8007634 <vTaskDelete+0xc4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d116      	bne.n	800762c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80075fe:	4b13      	ldr	r3, [pc, #76]	; (800764c <vTaskDelete+0xdc>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <vTaskDelete+0xac>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	60bb      	str	r3, [r7, #8]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800761c:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <vTaskDelete+0xe0>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800762c:	bf00      	nop
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20000ac0 	.word	0x20000ac0
 8007638:	20000fb0 	.word	0x20000fb0
 800763c:	20000f68 	.word	0x20000f68
 8007640:	20000f7c 	.word	0x20000f7c
 8007644:	20000f94 	.word	0x20000f94
 8007648:	20000fa0 	.word	0x20000fa0
 800764c:	20000fbc 	.word	0x20000fbc
 8007650:	e000ed04 	.word	0xe000ed04

08007654 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d017      	beq.n	8007696 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007666:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <vTaskDelay+0x60>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <vTaskDelay+0x30>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	60bb      	str	r3, [r7, #8]
}
 8007680:	bf00      	nop
 8007682:	e7fe      	b.n	8007682 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007684:	f000 f8e6 	bl	8007854 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007688:	2100      	movs	r1, #0
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fe60 	bl	8008350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007690:	f000 f8ee 	bl	8007870 <xTaskResumeAll>
 8007694:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d107      	bne.n	80076ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800769c:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <vTaskDelay+0x64>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076ac:	bf00      	nop
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20000fbc 	.word	0x20000fbc
 80076b8:	e000ed04 	.word	0xe000ed04

080076bc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <eTaskGetState+0x28>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	60bb      	str	r3, [r7, #8]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80076e4:	4b23      	ldr	r3, [pc, #140]	; (8007774 <eTaskGetState+0xb8>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d102      	bne.n	80076f4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80076ee:	2300      	movs	r3, #0
 80076f0:	77fb      	strb	r3, [r7, #31]
 80076f2:	e03a      	b.n	800776a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80076f4:	f001 fafe 	bl	8008cf4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80076fe:	4b1e      	ldr	r3, [pc, #120]	; (8007778 <eTaskGetState+0xbc>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8007704:	4b1d      	ldr	r3, [pc, #116]	; (800777c <eTaskGetState+0xc0>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800770a:	f001 fb23 	bl	8008d54 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	429a      	cmp	r2, r3
 8007714:	d003      	beq.n	800771e <eTaskGetState+0x62>
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	429a      	cmp	r2, r3
 800771c:	d102      	bne.n	8007724 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800771e:	2302      	movs	r3, #2
 8007720:	77fb      	strb	r3, [r7, #31]
 8007722:	e022      	b.n	800776a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	4a16      	ldr	r2, [pc, #88]	; (8007780 <eTaskGetState+0xc4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d112      	bne.n	8007752 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10b      	bne.n	800774c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d102      	bne.n	8007746 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8007740:	2302      	movs	r3, #2
 8007742:	77fb      	strb	r3, [r7, #31]
 8007744:	e011      	b.n	800776a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8007746:	2303      	movs	r3, #3
 8007748:	77fb      	strb	r3, [r7, #31]
 800774a:	e00e      	b.n	800776a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800774c:	2302      	movs	r3, #2
 800774e:	77fb      	strb	r3, [r7, #31]
 8007750:	e00b      	b.n	800776a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	4a0b      	ldr	r2, [pc, #44]	; (8007784 <eTaskGetState+0xc8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d002      	beq.n	8007760 <eTaskGetState+0xa4>
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d102      	bne.n	8007766 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8007760:	2304      	movs	r3, #4
 8007762:	77fb      	strb	r3, [r7, #31]
 8007764:	e001      	b.n	800776a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8007766:	2301      	movs	r3, #1
 8007768:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800776a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800776c:	4618      	mov	r0, r3
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20000ac0 	.word	0x20000ac0
 8007778:	20000f4c 	.word	0x20000f4c
 800777c:	20000f50 	.word	0x20000f50
 8007780:	20000f80 	.word	0x20000f80
 8007784:	20000f68 	.word	0x20000f68

08007788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	; 0x28
 800778c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007792:	2300      	movs	r3, #0
 8007794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007796:	463a      	mov	r2, r7
 8007798:	1d39      	adds	r1, r7, #4
 800779a:	f107 0308 	add.w	r3, r7, #8
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fd5c 	bl	800625c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	9202      	str	r2, [sp, #8]
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	2300      	movs	r3, #0
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	2300      	movs	r3, #0
 80077b4:	460a      	mov	r2, r1
 80077b6:	4921      	ldr	r1, [pc, #132]	; (800783c <vTaskStartScheduler+0xb4>)
 80077b8:	4821      	ldr	r0, [pc, #132]	; (8007840 <vTaskStartScheduler+0xb8>)
 80077ba:	f7ff fd37 	bl	800722c <xTaskCreateStatic>
 80077be:	4603      	mov	r3, r0
 80077c0:	4a20      	ldr	r2, [pc, #128]	; (8007844 <vTaskStartScheduler+0xbc>)
 80077c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077c4:	4b1f      	ldr	r3, [pc, #124]	; (8007844 <vTaskStartScheduler+0xbc>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077cc:	2301      	movs	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e001      	b.n	80077d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d102      	bne.n	80077e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80077dc:	f000 fe0c 	bl	80083f8 <xTimerCreateTimerTask>
 80077e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d116      	bne.n	8007816 <vTaskStartScheduler+0x8e>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	613b      	str	r3, [r7, #16]
}
 80077fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077fc:	4b12      	ldr	r3, [pc, #72]	; (8007848 <vTaskStartScheduler+0xc0>)
 80077fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007802:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007804:	4b11      	ldr	r3, [pc, #68]	; (800784c <vTaskStartScheduler+0xc4>)
 8007806:	2201      	movs	r2, #1
 8007808:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800780a:	4b11      	ldr	r3, [pc, #68]	; (8007850 <vTaskStartScheduler+0xc8>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007810:	f001 f9ce 	bl	8008bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007814:	e00e      	b.n	8007834 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800781c:	d10a      	bne.n	8007834 <vTaskStartScheduler+0xac>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	60fb      	str	r3, [r7, #12]
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <vTaskStartScheduler+0xaa>
}
 8007834:	bf00      	nop
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	0800c568 	.word	0x0800c568
 8007840:	08007e6d 	.word	0x08007e6d
 8007844:	20000fb8 	.word	0x20000fb8
 8007848:	20000fb4 	.word	0x20000fb4
 800784c:	20000fa0 	.word	0x20000fa0
 8007850:	20000f98 	.word	0x20000f98

08007854 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007858:	4b04      	ldr	r3, [pc, #16]	; (800786c <vTaskSuspendAll+0x18>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3301      	adds	r3, #1
 800785e:	4a03      	ldr	r2, [pc, #12]	; (800786c <vTaskSuspendAll+0x18>)
 8007860:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007862:	bf00      	nop
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	20000fbc 	.word	0x20000fbc

08007870 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800787a:	2300      	movs	r3, #0
 800787c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800787e:	4b42      	ldr	r3, [pc, #264]	; (8007988 <xTaskResumeAll+0x118>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <xTaskResumeAll+0x2c>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	603b      	str	r3, [r7, #0]
}
 8007898:	bf00      	nop
 800789a:	e7fe      	b.n	800789a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800789c:	f001 fa2a 	bl	8008cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078a0:	4b39      	ldr	r3, [pc, #228]	; (8007988 <xTaskResumeAll+0x118>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	4a38      	ldr	r2, [pc, #224]	; (8007988 <xTaskResumeAll+0x118>)
 80078a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078aa:	4b37      	ldr	r3, [pc, #220]	; (8007988 <xTaskResumeAll+0x118>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d162      	bne.n	8007978 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078b2:	4b36      	ldr	r3, [pc, #216]	; (800798c <xTaskResumeAll+0x11c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d05e      	beq.n	8007978 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ba:	e02f      	b.n	800791c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078bc:	4b34      	ldr	r3, [pc, #208]	; (8007990 <xTaskResumeAll+0x120>)
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3318      	adds	r3, #24
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fe fd85 	bl	80063d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3304      	adds	r3, #4
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe fd80 	bl	80063d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	4b2d      	ldr	r3, [pc, #180]	; (8007994 <xTaskResumeAll+0x124>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d903      	bls.n	80078ec <xTaskResumeAll+0x7c>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	4a2a      	ldr	r2, [pc, #168]	; (8007994 <xTaskResumeAll+0x124>)
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4a27      	ldr	r2, [pc, #156]	; (8007998 <xTaskResumeAll+0x128>)
 80078fa:	441a      	add	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3304      	adds	r3, #4
 8007900:	4619      	mov	r1, r3
 8007902:	4610      	mov	r0, r2
 8007904:	f7fe fd0b 	bl	800631e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790c:	4b23      	ldr	r3, [pc, #140]	; (800799c <xTaskResumeAll+0x12c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007912:	429a      	cmp	r2, r3
 8007914:	d302      	bcc.n	800791c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007916:	4b22      	ldr	r3, [pc, #136]	; (80079a0 <xTaskResumeAll+0x130>)
 8007918:	2201      	movs	r2, #1
 800791a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800791c:	4b1c      	ldr	r3, [pc, #112]	; (8007990 <xTaskResumeAll+0x120>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1cb      	bne.n	80078bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800792a:	f000 fb57 	bl	8007fdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800792e:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <xTaskResumeAll+0x134>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d010      	beq.n	800795c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800793a:	f000 f847 	bl	80079cc <xTaskIncrementTick>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007944:	4b16      	ldr	r3, [pc, #88]	; (80079a0 <xTaskResumeAll+0x130>)
 8007946:	2201      	movs	r2, #1
 8007948:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	3b01      	subs	r3, #1
 800794e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1f1      	bne.n	800793a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007956:	4b13      	ldr	r3, [pc, #76]	; (80079a4 <xTaskResumeAll+0x134>)
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800795c:	4b10      	ldr	r3, [pc, #64]	; (80079a0 <xTaskResumeAll+0x130>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d009      	beq.n	8007978 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007964:	2301      	movs	r3, #1
 8007966:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007968:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <xTaskResumeAll+0x138>)
 800796a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007978:	f001 f9ec 	bl	8008d54 <vPortExitCritical>

	return xAlreadyYielded;
 800797c:	68bb      	ldr	r3, [r7, #8]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000fbc 	.word	0x20000fbc
 800798c:	20000f94 	.word	0x20000f94
 8007990:	20000f54 	.word	0x20000f54
 8007994:	20000f9c 	.word	0x20000f9c
 8007998:	20000ac4 	.word	0x20000ac4
 800799c:	20000ac0 	.word	0x20000ac0
 80079a0:	20000fa8 	.word	0x20000fa8
 80079a4:	20000fa4 	.word	0x20000fa4
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079b2:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <xTaskGetTickCount+0x1c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079b8:	687b      	ldr	r3, [r7, #4]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	20000f98 	.word	0x20000f98

080079cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d6:	4b4f      	ldr	r3, [pc, #316]	; (8007b14 <xTaskIncrementTick+0x148>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f040 808f 	bne.w	8007afe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079e0:	4b4d      	ldr	r3, [pc, #308]	; (8007b18 <xTaskIncrementTick+0x14c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3301      	adds	r3, #1
 80079e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079e8:	4a4b      	ldr	r2, [pc, #300]	; (8007b18 <xTaskIncrementTick+0x14c>)
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d120      	bne.n	8007a36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80079f4:	4b49      	ldr	r3, [pc, #292]	; (8007b1c <xTaskIncrementTick+0x150>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <xTaskIncrementTick+0x48>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	603b      	str	r3, [r7, #0]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <xTaskIncrementTick+0x46>
 8007a14:	4b41      	ldr	r3, [pc, #260]	; (8007b1c <xTaskIncrementTick+0x150>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	4b41      	ldr	r3, [pc, #260]	; (8007b20 <xTaskIncrementTick+0x154>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a3f      	ldr	r2, [pc, #252]	; (8007b1c <xTaskIncrementTick+0x150>)
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	4a3f      	ldr	r2, [pc, #252]	; (8007b20 <xTaskIncrementTick+0x154>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	4b3e      	ldr	r3, [pc, #248]	; (8007b24 <xTaskIncrementTick+0x158>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	4a3d      	ldr	r2, [pc, #244]	; (8007b24 <xTaskIncrementTick+0x158>)
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	f000 fad3 	bl	8007fdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a36:	4b3c      	ldr	r3, [pc, #240]	; (8007b28 <xTaskIncrementTick+0x15c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d349      	bcc.n	8007ad4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a40:	4b36      	ldr	r3, [pc, #216]	; (8007b1c <xTaskIncrementTick+0x150>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d104      	bne.n	8007a54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a4a:	4b37      	ldr	r3, [pc, #220]	; (8007b28 <xTaskIncrementTick+0x15c>)
 8007a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a50:	601a      	str	r2, [r3, #0]
					break;
 8007a52:	e03f      	b.n	8007ad4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a54:	4b31      	ldr	r3, [pc, #196]	; (8007b1c <xTaskIncrementTick+0x150>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d203      	bcs.n	8007a74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a6c:	4a2e      	ldr	r2, [pc, #184]	; (8007b28 <xTaskIncrementTick+0x15c>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a72:	e02f      	b.n	8007ad4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe fcad 	bl	80063d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	3318      	adds	r3, #24
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fca4 	bl	80063d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a94:	4b25      	ldr	r3, [pc, #148]	; (8007b2c <xTaskIncrementTick+0x160>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d903      	bls.n	8007aa4 <xTaskIncrementTick+0xd8>
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	4a22      	ldr	r2, [pc, #136]	; (8007b2c <xTaskIncrementTick+0x160>)
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4a1f      	ldr	r2, [pc, #124]	; (8007b30 <xTaskIncrementTick+0x164>)
 8007ab2:	441a      	add	r2, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4610      	mov	r0, r2
 8007abc:	f7fe fc2f 	bl	800631e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac4:	4b1b      	ldr	r3, [pc, #108]	; (8007b34 <xTaskIncrementTick+0x168>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d3b8      	bcc.n	8007a40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ad2:	e7b5      	b.n	8007a40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ad4:	4b17      	ldr	r3, [pc, #92]	; (8007b34 <xTaskIncrementTick+0x168>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	4915      	ldr	r1, [pc, #84]	; (8007b30 <xTaskIncrementTick+0x164>)
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	440b      	add	r3, r1
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d901      	bls.n	8007af0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007aec:	2301      	movs	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007af0:	4b11      	ldr	r3, [pc, #68]	; (8007b38 <xTaskIncrementTick+0x16c>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d007      	beq.n	8007b08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007af8:	2301      	movs	r3, #1
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	e004      	b.n	8007b08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007afe:	4b0f      	ldr	r3, [pc, #60]	; (8007b3c <xTaskIncrementTick+0x170>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	4a0d      	ldr	r2, [pc, #52]	; (8007b3c <xTaskIncrementTick+0x170>)
 8007b06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b08:	697b      	ldr	r3, [r7, #20]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000fbc 	.word	0x20000fbc
 8007b18:	20000f98 	.word	0x20000f98
 8007b1c:	20000f4c 	.word	0x20000f4c
 8007b20:	20000f50 	.word	0x20000f50
 8007b24:	20000fac 	.word	0x20000fac
 8007b28:	20000fb4 	.word	0x20000fb4
 8007b2c:	20000f9c 	.word	0x20000f9c
 8007b30:	20000ac4 	.word	0x20000ac4
 8007b34:	20000ac0 	.word	0x20000ac0
 8007b38:	20000fa8 	.word	0x20000fa8
 8007b3c:	20000fa4 	.word	0x20000fa4

08007b40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b46:	4b28      	ldr	r3, [pc, #160]	; (8007be8 <vTaskSwitchContext+0xa8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b4e:	4b27      	ldr	r3, [pc, #156]	; (8007bec <vTaskSwitchContext+0xac>)
 8007b50:	2201      	movs	r2, #1
 8007b52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b54:	e041      	b.n	8007bda <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007b56:	4b25      	ldr	r3, [pc, #148]	; (8007bec <vTaskSwitchContext+0xac>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b5c:	4b24      	ldr	r3, [pc, #144]	; (8007bf0 <vTaskSwitchContext+0xb0>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	e010      	b.n	8007b86 <vTaskSwitchContext+0x46>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10a      	bne.n	8007b80 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	607b      	str	r3, [r7, #4]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <vTaskSwitchContext+0x3e>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]
 8007b86:	491b      	ldr	r1, [pc, #108]	; (8007bf4 <vTaskSwitchContext+0xb4>)
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0e4      	beq.n	8007b64 <vTaskSwitchContext+0x24>
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4a13      	ldr	r2, [pc, #76]	; (8007bf4 <vTaskSwitchContext+0xb4>)
 8007ba6:	4413      	add	r3, r2
 8007ba8:	60bb      	str	r3, [r7, #8]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	605a      	str	r2, [r3, #4]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d104      	bne.n	8007bca <vTaskSwitchContext+0x8a>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	605a      	str	r2, [r3, #4]
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	4a09      	ldr	r2, [pc, #36]	; (8007bf8 <vTaskSwitchContext+0xb8>)
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	4a06      	ldr	r2, [pc, #24]	; (8007bf0 <vTaskSwitchContext+0xb0>)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6013      	str	r3, [r2, #0]
}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20000fbc 	.word	0x20000fbc
 8007bec:	20000fa8 	.word	0x20000fa8
 8007bf0:	20000f9c 	.word	0x20000f9c
 8007bf4:	20000ac4 	.word	0x20000ac4
 8007bf8:	20000ac0 	.word	0x20000ac0

08007bfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	60fb      	str	r3, [r7, #12]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c22:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <vTaskPlaceOnEventList+0x44>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3318      	adds	r3, #24
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7fe fb9b 	bl	8006366 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c30:	2101      	movs	r1, #1
 8007c32:	6838      	ldr	r0, [r7, #0]
 8007c34:	f000 fb8c 	bl	8008350 <prvAddCurrentTaskToDelayedList>
}
 8007c38:	bf00      	nop
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000ac0 	.word	0x20000ac0

08007c44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10a      	bne.n	8007c6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	617b      	str	r3, [r7, #20]
}
 8007c68:	bf00      	nop
 8007c6a:	e7fe      	b.n	8007c6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3318      	adds	r3, #24
 8007c72:	4619      	mov	r1, r3
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f7fe fb52 	bl	800631e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	68b8      	ldr	r0, [r7, #8]
 8007c8a:	f000 fb61 	bl	8008350 <prvAddCurrentTaskToDelayedList>
	}
 8007c8e:	bf00      	nop
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20000ac0 	.word	0x20000ac0

08007c9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	60fb      	str	r3, [r7, #12]
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	3318      	adds	r3, #24
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fe fb83 	bl	80063d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cd2:	4b1e      	ldr	r3, [pc, #120]	; (8007d4c <xTaskRemoveFromEventList+0xb0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d11d      	bne.n	8007d16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe fb7a 	bl	80063d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce8:	4b19      	ldr	r3, [pc, #100]	; (8007d50 <xTaskRemoveFromEventList+0xb4>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d903      	bls.n	8007cf8 <xTaskRemoveFromEventList+0x5c>
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	4a16      	ldr	r2, [pc, #88]	; (8007d50 <xTaskRemoveFromEventList+0xb4>)
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <xTaskRemoveFromEventList+0xb8>)
 8007d06:	441a      	add	r2, r3
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4610      	mov	r0, r2
 8007d10:	f7fe fb05 	bl	800631e <vListInsertEnd>
 8007d14:	e005      	b.n	8007d22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	3318      	adds	r3, #24
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	480e      	ldr	r0, [pc, #56]	; (8007d58 <xTaskRemoveFromEventList+0xbc>)
 8007d1e:	f7fe fafe 	bl	800631e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d26:	4b0d      	ldr	r3, [pc, #52]	; (8007d5c <xTaskRemoveFromEventList+0xc0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d905      	bls.n	8007d3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d30:	2301      	movs	r3, #1
 8007d32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d34:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <xTaskRemoveFromEventList+0xc4>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	e001      	b.n	8007d40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d40:	697b      	ldr	r3, [r7, #20]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20000fbc 	.word	0x20000fbc
 8007d50:	20000f9c 	.word	0x20000f9c
 8007d54:	20000ac4 	.word	0x20000ac4
 8007d58:	20000f54 	.word	0x20000f54
 8007d5c:	20000ac0 	.word	0x20000ac0
 8007d60:	20000fa8 	.word	0x20000fa8

08007d64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <vTaskInternalSetTimeOutState+0x24>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <vTaskInternalSetTimeOutState+0x28>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	605a      	str	r2, [r3, #4]
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	20000fac 	.word	0x20000fac
 8007d8c:	20000f98 	.word	0x20000f98

08007d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	613b      	str	r3, [r7, #16]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10a      	bne.n	8007dd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	60fb      	str	r3, [r7, #12]
}
 8007dce:	bf00      	nop
 8007dd0:	e7fe      	b.n	8007dd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007dd2:	f000 ff8f 	bl	8008cf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dd6:	4b1d      	ldr	r3, [pc, #116]	; (8007e4c <xTaskCheckForTimeOut+0xbc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dee:	d102      	bne.n	8007df6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	e023      	b.n	8007e3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <xTaskCheckForTimeOut+0xc0>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d007      	beq.n	8007e12 <xTaskCheckForTimeOut+0x82>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d302      	bcc.n	8007e12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	61fb      	str	r3, [r7, #28]
 8007e10:	e015      	b.n	8007e3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d20b      	bcs.n	8007e34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	1ad2      	subs	r2, r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff ff9b 	bl	8007d64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
 8007e32:	e004      	b.n	8007e3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e3e:	f000 ff89 	bl	8008d54 <vPortExitCritical>

	return xReturn;
 8007e42:	69fb      	ldr	r3, [r7, #28]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3720      	adds	r7, #32
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000f98 	.word	0x20000f98
 8007e50:	20000fac 	.word	0x20000fac

08007e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e58:	4b03      	ldr	r3, [pc, #12]	; (8007e68 <vTaskMissedYield+0x14>)
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	20000fa8 	.word	0x20000fa8

08007e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e74:	f000 f854 	bl	8007f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e78:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <prvIdleTask+0x2c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d907      	bls.n	8007e90 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007e80:	4b06      	ldr	r3, [pc, #24]	; (8007e9c <prvIdleTask+0x30>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007e90:	f7f9 fa34 	bl	80012fc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007e94:	e7ee      	b.n	8007e74 <prvIdleTask+0x8>
 8007e96:	bf00      	nop
 8007e98:	20000ac4 	.word	0x20000ac4
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	607b      	str	r3, [r7, #4]
 8007eaa:	e00c      	b.n	8007ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4a12      	ldr	r2, [pc, #72]	; (8007f00 <prvInitialiseTaskLists+0x60>)
 8007eb8:	4413      	add	r3, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fa02 	bl	80062c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	607b      	str	r3, [r7, #4]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b37      	cmp	r3, #55	; 0x37
 8007eca:	d9ef      	bls.n	8007eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ecc:	480d      	ldr	r0, [pc, #52]	; (8007f04 <prvInitialiseTaskLists+0x64>)
 8007ece:	f7fe f9f9 	bl	80062c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ed2:	480d      	ldr	r0, [pc, #52]	; (8007f08 <prvInitialiseTaskLists+0x68>)
 8007ed4:	f7fe f9f6 	bl	80062c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ed8:	480c      	ldr	r0, [pc, #48]	; (8007f0c <prvInitialiseTaskLists+0x6c>)
 8007eda:	f7fe f9f3 	bl	80062c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ede:	480c      	ldr	r0, [pc, #48]	; (8007f10 <prvInitialiseTaskLists+0x70>)
 8007ee0:	f7fe f9f0 	bl	80062c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ee4:	480b      	ldr	r0, [pc, #44]	; (8007f14 <prvInitialiseTaskLists+0x74>)
 8007ee6:	f7fe f9ed 	bl	80062c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007eea:	4b0b      	ldr	r3, [pc, #44]	; (8007f18 <prvInitialiseTaskLists+0x78>)
 8007eec:	4a05      	ldr	r2, [pc, #20]	; (8007f04 <prvInitialiseTaskLists+0x64>)
 8007eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <prvInitialiseTaskLists+0x7c>)
 8007ef2:	4a05      	ldr	r2, [pc, #20]	; (8007f08 <prvInitialiseTaskLists+0x68>)
 8007ef4:	601a      	str	r2, [r3, #0]
}
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20000ac4 	.word	0x20000ac4
 8007f04:	20000f24 	.word	0x20000f24
 8007f08:	20000f38 	.word	0x20000f38
 8007f0c:	20000f54 	.word	0x20000f54
 8007f10:	20000f68 	.word	0x20000f68
 8007f14:	20000f80 	.word	0x20000f80
 8007f18:	20000f4c 	.word	0x20000f4c
 8007f1c:	20000f50 	.word	0x20000f50

08007f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f26:	e019      	b.n	8007f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f28:	f000 fee4 	bl	8008cf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2c:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <prvCheckTasksWaitingTermination+0x50>)
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fe fa4d 	bl	80063d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <prvCheckTasksWaitingTermination+0x54>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	4a0b      	ldr	r2, [pc, #44]	; (8007f74 <prvCheckTasksWaitingTermination+0x54>)
 8007f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f48:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <prvCheckTasksWaitingTermination+0x58>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <prvCheckTasksWaitingTermination+0x58>)
 8007f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f52:	f000 feff 	bl	8008d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f810 	bl	8007f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f5c:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <prvCheckTasksWaitingTermination+0x58>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e1      	bne.n	8007f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000f68 	.word	0x20000f68
 8007f74:	20000f94 	.word	0x20000f94
 8007f78:	20000f7c 	.word	0x20000f7c

08007f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d108      	bne.n	8007fa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f92:	4618      	mov	r0, r3
 8007f94:	f001 f89c 	bl	80090d0 <vPortFree>
				vPortFree( pxTCB );
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 f899 	bl	80090d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f9e:	e018      	b.n	8007fd2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d103      	bne.n	8007fb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 f890 	bl	80090d0 <vPortFree>
	}
 8007fb0:	e00f      	b.n	8007fd2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d00a      	beq.n	8007fd2 <prvDeleteTCB+0x56>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	60fb      	str	r3, [r7, #12]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <prvDeleteTCB+0x54>
	}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	; (8008014 <prvResetNextTaskUnblockTime+0x38>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d104      	bne.n	8007ff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <prvResetNextTaskUnblockTime+0x3c>)
 8007fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ff4:	e008      	b.n	8008008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff6:	4b07      	ldr	r3, [pc, #28]	; (8008014 <prvResetNextTaskUnblockTime+0x38>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	4a04      	ldr	r2, [pc, #16]	; (8008018 <prvResetNextTaskUnblockTime+0x3c>)
 8008006:	6013      	str	r3, [r2, #0]
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	20000f4c 	.word	0x20000f4c
 8008018:	20000fb4 	.word	0x20000fb4

0800801c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008022:	4b05      	ldr	r3, [pc, #20]	; (8008038 <xTaskGetCurrentTaskHandle+0x1c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008028:	687b      	ldr	r3, [r7, #4]
	}
 800802a:	4618      	mov	r0, r3
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	20000ac0 	.word	0x20000ac0

0800803c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <xTaskGetSchedulerState+0x34>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800804a:	2301      	movs	r3, #1
 800804c:	607b      	str	r3, [r7, #4]
 800804e:	e008      	b.n	8008062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008050:	4b08      	ldr	r3, [pc, #32]	; (8008074 <xTaskGetSchedulerState+0x38>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d102      	bne.n	800805e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008058:	2302      	movs	r3, #2
 800805a:	607b      	str	r3, [r7, #4]
 800805c:	e001      	b.n	8008062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008062:	687b      	ldr	r3, [r7, #4]
	}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	20000fa0 	.word	0x20000fa0
 8008074:	20000fbc 	.word	0x20000fbc

08008078 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d051      	beq.n	8008132 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008092:	4b2a      	ldr	r3, [pc, #168]	; (800813c <xTaskPriorityInherit+0xc4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	429a      	cmp	r2, r3
 800809a:	d241      	bcs.n	8008120 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	db06      	blt.n	80080b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a4:	4b25      	ldr	r3, [pc, #148]	; (800813c <xTaskPriorityInherit+0xc4>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6959      	ldr	r1, [r3, #20]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ba:	4613      	mov	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4a1f      	ldr	r2, [pc, #124]	; (8008140 <xTaskPriorityInherit+0xc8>)
 80080c4:	4413      	add	r3, r2
 80080c6:	4299      	cmp	r1, r3
 80080c8:	d122      	bne.n	8008110 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe f982 	bl	80063d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080d4:	4b19      	ldr	r3, [pc, #100]	; (800813c <xTaskPriorityInherit+0xc4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e2:	4b18      	ldr	r3, [pc, #96]	; (8008144 <xTaskPriorityInherit+0xcc>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d903      	bls.n	80080f2 <xTaskPriorityInherit+0x7a>
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	4a15      	ldr	r2, [pc, #84]	; (8008144 <xTaskPriorityInherit+0xcc>)
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4a10      	ldr	r2, [pc, #64]	; (8008140 <xTaskPriorityInherit+0xc8>)
 8008100:	441a      	add	r2, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7fe f908 	bl	800631e <vListInsertEnd>
 800810e:	e004      	b.n	800811a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008110:	4b0a      	ldr	r3, [pc, #40]	; (800813c <xTaskPriorityInherit+0xc4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800811a:	2301      	movs	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	e008      	b.n	8008132 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <xTaskPriorityInherit+0xc4>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	429a      	cmp	r2, r3
 800812c:	d201      	bcs.n	8008132 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800812e:	2301      	movs	r3, #1
 8008130:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008132:	68fb      	ldr	r3, [r7, #12]
	}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20000ac0 	.word	0x20000ac0
 8008140:	20000ac4 	.word	0x20000ac4
 8008144:	20000f9c 	.word	0x20000f9c

08008148 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008154:	2300      	movs	r3, #0
 8008156:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d056      	beq.n	800820c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800815e:	4b2e      	ldr	r3, [pc, #184]	; (8008218 <xTaskPriorityDisinherit+0xd0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	429a      	cmp	r2, r3
 8008166:	d00a      	beq.n	800817e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	60fb      	str	r3, [r7, #12]
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	60bb      	str	r3, [r7, #8]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a0:	1e5a      	subs	r2, r3, #1
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d02c      	beq.n	800820c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d128      	bne.n	800820c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	3304      	adds	r3, #4
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe f90a 	bl	80063d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081dc:	4b0f      	ldr	r3, [pc, #60]	; (800821c <xTaskPriorityDisinherit+0xd4>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d903      	bls.n	80081ec <xTaskPriorityDisinherit+0xa4>
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	4a0c      	ldr	r2, [pc, #48]	; (800821c <xTaskPriorityDisinherit+0xd4>)
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4a09      	ldr	r2, [pc, #36]	; (8008220 <xTaskPriorityDisinherit+0xd8>)
 80081fa:	441a      	add	r2, r3
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3304      	adds	r3, #4
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f7fe f88b 	bl	800631e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008208:	2301      	movs	r3, #1
 800820a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800820c:	697b      	ldr	r3, [r7, #20]
	}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20000ac0 	.word	0x20000ac0
 800821c:	20000f9c 	.word	0x20000f9c
 8008220:	20000ac4 	.word	0x20000ac4

08008224 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008232:	2301      	movs	r3, #1
 8008234:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d06a      	beq.n	8008312 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	60fb      	str	r3, [r7, #12]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d902      	bls.n	800826a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	61fb      	str	r3, [r7, #28]
 8008268:	e002      	b.n	8008270 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800826e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	69fa      	ldr	r2, [r7, #28]
 8008276:	429a      	cmp	r2, r3
 8008278:	d04b      	beq.n	8008312 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	429a      	cmp	r2, r3
 8008282:	d146      	bne.n	8008312 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008284:	4b25      	ldr	r3, [pc, #148]	; (800831c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	429a      	cmp	r2, r3
 800828c:	d10a      	bne.n	80082a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60bb      	str	r3, [r7, #8]
}
 80082a0:	bf00      	nop
 80082a2:	e7fe      	b.n	80082a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	69fa      	ldr	r2, [r7, #28]
 80082ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	db04      	blt.n	80082c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	6959      	ldr	r1, [r3, #20]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4a13      	ldr	r2, [pc, #76]	; (8008320 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80082d2:	4413      	add	r3, r2
 80082d4:	4299      	cmp	r1, r3
 80082d6:	d11c      	bne.n	8008312 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	3304      	adds	r3, #4
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe f87b 	bl	80063d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e6:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d903      	bls.n	80082f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f2:	4a0c      	ldr	r2, [pc, #48]	; (8008324 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fa:	4613      	mov	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4a07      	ldr	r2, [pc, #28]	; (8008320 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008304:	441a      	add	r2, r3
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	3304      	adds	r3, #4
 800830a:	4619      	mov	r1, r3
 800830c:	4610      	mov	r0, r2
 800830e:	f7fe f806 	bl	800631e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008312:	bf00      	nop
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20000ac0 	.word	0x20000ac0
 8008320:	20000ac4 	.word	0x20000ac4
 8008324:	20000f9c 	.word	0x20000f9c

08008328 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800832c:	4b07      	ldr	r3, [pc, #28]	; (800834c <pvTaskIncrementMutexHeldCount+0x24>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d004      	beq.n	800833e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <pvTaskIncrementMutexHeldCount+0x24>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800833a:	3201      	adds	r2, #1
 800833c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800833e:	4b03      	ldr	r3, [pc, #12]	; (800834c <pvTaskIncrementMutexHeldCount+0x24>)
 8008340:	681b      	ldr	r3, [r3, #0]
	}
 8008342:	4618      	mov	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	20000ac0 	.word	0x20000ac0

08008350 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800835a:	4b21      	ldr	r3, [pc, #132]	; (80083e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008360:	4b20      	ldr	r3, [pc, #128]	; (80083e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3304      	adds	r3, #4
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe f836 	bl	80063d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008372:	d10a      	bne.n	800838a <prvAddCurrentTaskToDelayedList+0x3a>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d007      	beq.n	800838a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800837a:	4b1a      	ldr	r3, [pc, #104]	; (80083e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3304      	adds	r3, #4
 8008380:	4619      	mov	r1, r3
 8008382:	4819      	ldr	r0, [pc, #100]	; (80083e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008384:	f7fd ffcb 	bl	800631e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008388:	e026      	b.n	80083d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4413      	add	r3, r2
 8008390:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008392:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d209      	bcs.n	80083b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083a2:	4b12      	ldr	r3, [pc, #72]	; (80083ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3304      	adds	r3, #4
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	f7fd ffd9 	bl	8006366 <vListInsert>
}
 80083b4:	e010      	b.n	80083d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083b6:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3304      	adds	r3, #4
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f7fd ffcf 	bl	8006366 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083c8:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d202      	bcs.n	80083d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083d2:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	6013      	str	r3, [r2, #0]
}
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20000f98 	.word	0x20000f98
 80083e4:	20000ac0 	.word	0x20000ac0
 80083e8:	20000f80 	.word	0x20000f80
 80083ec:	20000f50 	.word	0x20000f50
 80083f0:	20000f4c 	.word	0x20000f4c
 80083f4:	20000fb4 	.word	0x20000fb4

080083f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08a      	sub	sp, #40	; 0x28
 80083fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80083fe:	2300      	movs	r3, #0
 8008400:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008402:	f000 fb07 	bl	8008a14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008406:	4b1c      	ldr	r3, [pc, #112]	; (8008478 <xTimerCreateTimerTask+0x80>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d021      	beq.n	8008452 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800840e:	2300      	movs	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008412:	2300      	movs	r3, #0
 8008414:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008416:	1d3a      	adds	r2, r7, #4
 8008418:	f107 0108 	add.w	r1, r7, #8
 800841c:	f107 030c 	add.w	r3, r7, #12
 8008420:	4618      	mov	r0, r3
 8008422:	f7fd ff35 	bl	8006290 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	9202      	str	r2, [sp, #8]
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	2302      	movs	r3, #2
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	2300      	movs	r3, #0
 8008436:	460a      	mov	r2, r1
 8008438:	4910      	ldr	r1, [pc, #64]	; (800847c <xTimerCreateTimerTask+0x84>)
 800843a:	4811      	ldr	r0, [pc, #68]	; (8008480 <xTimerCreateTimerTask+0x88>)
 800843c:	f7fe fef6 	bl	800722c <xTaskCreateStatic>
 8008440:	4603      	mov	r3, r0
 8008442:	4a10      	ldr	r2, [pc, #64]	; (8008484 <xTimerCreateTimerTask+0x8c>)
 8008444:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008446:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <xTimerCreateTimerTask+0x8c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800844e:	2301      	movs	r3, #1
 8008450:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	613b      	str	r3, [r7, #16]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800846e:	697b      	ldr	r3, [r7, #20]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000ff0 	.word	0x20000ff0
 800847c:	0800c570 	.word	0x0800c570
 8008480:	080085bd 	.word	0x080085bd
 8008484:	20000ff4 	.word	0x20000ff4

08008488 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08a      	sub	sp, #40	; 0x28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008496:	2300      	movs	r3, #0
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10a      	bne.n	80084b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	623b      	str	r3, [r7, #32]
}
 80084b2:	bf00      	nop
 80084b4:	e7fe      	b.n	80084b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80084b6:	4b1a      	ldr	r3, [pc, #104]	; (8008520 <xTimerGenericCommand+0x98>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d02a      	beq.n	8008514 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b05      	cmp	r3, #5
 80084ce:	dc18      	bgt.n	8008502 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084d0:	f7ff fdb4 	bl	800803c <xTaskGetSchedulerState>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d109      	bne.n	80084ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084da:	4b11      	ldr	r3, [pc, #68]	; (8008520 <xTimerGenericCommand+0x98>)
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	f107 0110 	add.w	r1, r7, #16
 80084e2:	2300      	movs	r3, #0
 80084e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e6:	f7fe f995 	bl	8006814 <xQueueGenericSend>
 80084ea:	6278      	str	r0, [r7, #36]	; 0x24
 80084ec:	e012      	b.n	8008514 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084ee:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <xTimerGenericCommand+0x98>)
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	f107 0110 	add.w	r1, r7, #16
 80084f6:	2300      	movs	r3, #0
 80084f8:	2200      	movs	r2, #0
 80084fa:	f7fe f98b 	bl	8006814 <xQueueGenericSend>
 80084fe:	6278      	str	r0, [r7, #36]	; 0x24
 8008500:	e008      	b.n	8008514 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008502:	4b07      	ldr	r3, [pc, #28]	; (8008520 <xTimerGenericCommand+0x98>)
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f107 0110 	add.w	r1, r7, #16
 800850a:	2300      	movs	r3, #0
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	f7fe fa7f 	bl	8006a10 <xQueueGenericSendFromISR>
 8008512:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008516:	4618      	mov	r0, r3
 8008518:	3728      	adds	r7, #40	; 0x28
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000ff0 	.word	0x20000ff0

08008524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af02      	add	r7, sp, #8
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800852e:	4b22      	ldr	r3, [pc, #136]	; (80085b8 <prvProcessExpiredTimer+0x94>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	3304      	adds	r3, #4
 800853c:	4618      	mov	r0, r3
 800853e:	f7fd ff4b 	bl	80063d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	d022      	beq.n	8008596 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	699a      	ldr	r2, [r3, #24]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	18d1      	adds	r1, r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	6978      	ldr	r0, [r7, #20]
 800855e:	f000 f8d1 	bl	8008704 <prvInsertTimerInActiveList>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01f      	beq.n	80085a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008568:	2300      	movs	r3, #0
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	2300      	movs	r3, #0
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	2100      	movs	r1, #0
 8008572:	6978      	ldr	r0, [r7, #20]
 8008574:	f7ff ff88 	bl	8008488 <xTimerGenericCommand>
 8008578:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d113      	bne.n	80085a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	60fb      	str	r3, [r7, #12]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800859c:	f023 0301 	bic.w	r3, r3, #1
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6a1b      	ldr	r3, [r3, #32]
 80085ac:	6978      	ldr	r0, [r7, #20]
 80085ae:	4798      	blx	r3
}
 80085b0:	bf00      	nop
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	20000fe8 	.word	0x20000fe8

080085bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085c4:	f107 0308 	add.w	r3, r7, #8
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 f857 	bl	800867c <prvGetNextExpireTime>
 80085ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4619      	mov	r1, r3
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 f803 	bl	80085e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80085da:	f000 f8d5 	bl	8008788 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085de:	e7f1      	b.n	80085c4 <prvTimerTask+0x8>

080085e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085ea:	f7ff f933 	bl	8007854 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085ee:	f107 0308 	add.w	r3, r7, #8
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f866 	bl	80086c4 <prvSampleTimeNow>
 80085f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d130      	bne.n	8008662 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <prvProcessTimerOrBlockTask+0x3c>
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	429a      	cmp	r2, r3
 800860c:	d806      	bhi.n	800861c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800860e:	f7ff f92f 	bl	8007870 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008612:	68f9      	ldr	r1, [r7, #12]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7ff ff85 	bl	8008524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800861a:	e024      	b.n	8008666 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d008      	beq.n	8008634 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008622:	4b13      	ldr	r3, [pc, #76]	; (8008670 <prvProcessTimerOrBlockTask+0x90>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <prvProcessTimerOrBlockTask+0x50>
 800862c:	2301      	movs	r3, #1
 800862e:	e000      	b.n	8008632 <prvProcessTimerOrBlockTask+0x52>
 8008630:	2300      	movs	r3, #0
 8008632:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008634:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <prvProcessTimerOrBlockTask+0x94>)
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	4619      	mov	r1, r3
 8008642:	f7fe fdbf 	bl	80071c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008646:	f7ff f913 	bl	8007870 <xTaskResumeAll>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008650:	4b09      	ldr	r3, [pc, #36]	; (8008678 <prvProcessTimerOrBlockTask+0x98>)
 8008652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
}
 8008660:	e001      	b.n	8008666 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008662:	f7ff f905 	bl	8007870 <xTaskResumeAll>
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000fec 	.word	0x20000fec
 8008674:	20000ff0 	.word	0x20000ff0
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008684:	4b0e      	ldr	r3, [pc, #56]	; (80086c0 <prvGetNextExpireTime+0x44>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <prvGetNextExpireTime+0x16>
 800868e:	2201      	movs	r2, #1
 8008690:	e000      	b.n	8008694 <prvGetNextExpireTime+0x18>
 8008692:	2200      	movs	r2, #0
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d105      	bne.n	80086ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <prvGetNextExpireTime+0x44>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	e001      	b.n	80086b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086b0:	68fb      	ldr	r3, [r7, #12]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	20000fe8 	.word	0x20000fe8

080086c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80086cc:	f7ff f96e 	bl	80079ac <xTaskGetTickCount>
 80086d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80086d2:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <prvSampleTimeNow+0x3c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d205      	bcs.n	80086e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80086dc:	f000 f936 	bl	800894c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	e002      	b.n	80086ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086ee:	4a04      	ldr	r2, [pc, #16]	; (8008700 <prvSampleTimeNow+0x3c>)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086f4:	68fb      	ldr	r3, [r7, #12]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20000ff8 	.word	0x20000ff8

08008704 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	429a      	cmp	r2, r3
 8008728:	d812      	bhi.n	8008750 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	1ad2      	subs	r2, r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	429a      	cmp	r2, r3
 8008736:	d302      	bcc.n	800873e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008738:	2301      	movs	r3, #1
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e01b      	b.n	8008776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800873e:	4b10      	ldr	r3, [pc, #64]	; (8008780 <prvInsertTimerInActiveList+0x7c>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3304      	adds	r3, #4
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f7fd fe0c 	bl	8006366 <vListInsert>
 800874e:	e012      	b.n	8008776 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	429a      	cmp	r2, r3
 8008756:	d206      	bcs.n	8008766 <prvInsertTimerInActiveList+0x62>
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d302      	bcc.n	8008766 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008760:	2301      	movs	r3, #1
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	e007      	b.n	8008776 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008766:	4b07      	ldr	r3, [pc, #28]	; (8008784 <prvInsertTimerInActiveList+0x80>)
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3304      	adds	r3, #4
 800876e:	4619      	mov	r1, r3
 8008770:	4610      	mov	r0, r2
 8008772:	f7fd fdf8 	bl	8006366 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008776:	697b      	ldr	r3, [r7, #20]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20000fec 	.word	0x20000fec
 8008784:	20000fe8 	.word	0x20000fe8

08008788 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08e      	sub	sp, #56	; 0x38
 800878c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800878e:	e0ca      	b.n	8008926 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	da18      	bge.n	80087c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008796:	1d3b      	adds	r3, r7, #4
 8008798:	3304      	adds	r3, #4
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10a      	bne.n	80087b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	61fb      	str	r3, [r7, #28]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80087b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087be:	6850      	ldr	r0, [r2, #4]
 80087c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087c2:	6892      	ldr	r2, [r2, #8]
 80087c4:	4611      	mov	r1, r2
 80087c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f2c0 80aa 	blt.w	8008924 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d004      	beq.n	80087e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	3304      	adds	r3, #4
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fd fdf9 	bl	80063d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087e6:	463b      	mov	r3, r7
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff ff6b 	bl	80086c4 <prvSampleTimeNow>
 80087ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b09      	cmp	r3, #9
 80087f4:	f200 8097 	bhi.w	8008926 <prvProcessReceivedCommands+0x19e>
 80087f8:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <prvProcessReceivedCommands+0x78>)
 80087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fe:	bf00      	nop
 8008800:	08008829 	.word	0x08008829
 8008804:	08008829 	.word	0x08008829
 8008808:	08008829 	.word	0x08008829
 800880c:	0800889d 	.word	0x0800889d
 8008810:	080088b1 	.word	0x080088b1
 8008814:	080088fb 	.word	0x080088fb
 8008818:	08008829 	.word	0x08008829
 800881c:	08008829 	.word	0x08008829
 8008820:	0800889d 	.word	0x0800889d
 8008824:	080088b1 	.word	0x080088b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800882e:	f043 0301 	orr.w	r3, r3, #1
 8008832:	b2da      	uxtb	r2, r3
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	18d1      	adds	r1, r2, r3
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008848:	f7ff ff5c 	bl	8008704 <prvInsertTimerInActiveList>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d069      	beq.n	8008926 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008858:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d05e      	beq.n	8008926 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	441a      	add	r2, r3
 8008870:	2300      	movs	r3, #0
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	2300      	movs	r3, #0
 8008876:	2100      	movs	r1, #0
 8008878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800887a:	f7ff fe05 	bl	8008488 <xTimerGenericCommand>
 800887e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d14f      	bne.n	8008926 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	61bb      	str	r3, [r7, #24]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a2:	f023 0301 	bic.w	r3, r3, #1
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80088ae:	e03a      	b.n	8008926 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	617b      	str	r3, [r7, #20]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	18d1      	adds	r1, r2, r3
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f4:	f7ff ff06 	bl	8008704 <prvInsertTimerInActiveList>
					break;
 80088f8:	e015      	b.n	8008926 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800890a:	f000 fbe1 	bl	80090d0 <vPortFree>
 800890e:	e00a      	b.n	8008926 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008922:	e000      	b.n	8008926 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008924:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008926:	4b08      	ldr	r3, [pc, #32]	; (8008948 <prvProcessReceivedCommands+0x1c0>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	1d39      	adds	r1, r7, #4
 800892c:	2200      	movs	r2, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe f90a 	bl	8006b48 <xQueueReceive>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	f47f af2a 	bne.w	8008790 <prvProcessReceivedCommands+0x8>
	}
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	3730      	adds	r7, #48	; 0x30
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20000ff0 	.word	0x20000ff0

0800894c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008952:	e048      	b.n	80089e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008954:	4b2d      	ldr	r3, [pc, #180]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800895e:	4b2b      	ldr	r3, [pc, #172]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3304      	adds	r3, #4
 800896c:	4618      	mov	r0, r3
 800896e:	f7fd fd33 	bl	80063d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	d02e      	beq.n	80089e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4413      	add	r3, r2
 8008990:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	429a      	cmp	r2, r3
 8008998:	d90e      	bls.n	80089b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089a6:	4b19      	ldr	r3, [pc, #100]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f7fd fcd8 	bl	8006366 <vListInsert>
 80089b6:	e016      	b.n	80089e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089b8:	2300      	movs	r3, #0
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	2300      	movs	r3, #0
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	2100      	movs	r1, #0
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7ff fd60 	bl	8008488 <xTimerGenericCommand>
 80089c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10a      	bne.n	80089e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	603b      	str	r3, [r7, #0]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089e6:	4b09      	ldr	r3, [pc, #36]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1b1      	bne.n	8008954 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089f0:	4b06      	ldr	r3, [pc, #24]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80089f6:	4b06      	ldr	r3, [pc, #24]	; (8008a10 <prvSwitchTimerLists+0xc4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a04      	ldr	r2, [pc, #16]	; (8008a0c <prvSwitchTimerLists+0xc0>)
 80089fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089fe:	4a04      	ldr	r2, [pc, #16]	; (8008a10 <prvSwitchTimerLists+0xc4>)
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	6013      	str	r3, [r2, #0]
}
 8008a04:	bf00      	nop
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20000fe8 	.word	0x20000fe8
 8008a10:	20000fec 	.word	0x20000fec

08008a14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a1a:	f000 f96b 	bl	8008cf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a1e:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <prvCheckForValidListAndQueue+0x60>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d120      	bne.n	8008a68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a26:	4814      	ldr	r0, [pc, #80]	; (8008a78 <prvCheckForValidListAndQueue+0x64>)
 8008a28:	f7fd fc4c 	bl	80062c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a2c:	4813      	ldr	r0, [pc, #76]	; (8008a7c <prvCheckForValidListAndQueue+0x68>)
 8008a2e:	f7fd fc49 	bl	80062c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <prvCheckForValidListAndQueue+0x6c>)
 8008a34:	4a10      	ldr	r2, [pc, #64]	; (8008a78 <prvCheckForValidListAndQueue+0x64>)
 8008a36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a38:	4b12      	ldr	r3, [pc, #72]	; (8008a84 <prvCheckForValidListAndQueue+0x70>)
 8008a3a:	4a10      	ldr	r2, [pc, #64]	; (8008a7c <prvCheckForValidListAndQueue+0x68>)
 8008a3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <prvCheckForValidListAndQueue+0x74>)
 8008a44:	4a11      	ldr	r2, [pc, #68]	; (8008a8c <prvCheckForValidListAndQueue+0x78>)
 8008a46:	2110      	movs	r1, #16
 8008a48:	200a      	movs	r0, #10
 8008a4a:	f7fd fd57 	bl	80064fc <xQueueGenericCreateStatic>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4a08      	ldr	r2, [pc, #32]	; (8008a74 <prvCheckForValidListAndQueue+0x60>)
 8008a52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a54:	4b07      	ldr	r3, [pc, #28]	; (8008a74 <prvCheckForValidListAndQueue+0x60>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d005      	beq.n	8008a68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a5c:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <prvCheckForValidListAndQueue+0x60>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	490b      	ldr	r1, [pc, #44]	; (8008a90 <prvCheckForValidListAndQueue+0x7c>)
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe fb84 	bl	8007170 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a68:	f000 f974 	bl	8008d54 <vPortExitCritical>
}
 8008a6c:	bf00      	nop
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000ff0 	.word	0x20000ff0
 8008a78:	20000fc0 	.word	0x20000fc0
 8008a7c:	20000fd4 	.word	0x20000fd4
 8008a80:	20000fe8 	.word	0x20000fe8
 8008a84:	20000fec 	.word	0x20000fec
 8008a88:	2000109c 	.word	0x2000109c
 8008a8c:	20000ffc 	.word	0x20000ffc
 8008a90:	0800c578 	.word	0x0800c578

08008a94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3b04      	subs	r3, #4
 8008aa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3b04      	subs	r3, #4
 8008ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f023 0201 	bic.w	r2, r3, #1
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3b04      	subs	r3, #4
 8008ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ac4:	4a0c      	ldr	r2, [pc, #48]	; (8008af8 <pxPortInitialiseStack+0x64>)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3b14      	subs	r3, #20
 8008ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3b04      	subs	r3, #4
 8008ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f06f 0202 	mvn.w	r2, #2
 8008ae2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3b20      	subs	r3, #32
 8008ae8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008aea:	68fb      	ldr	r3, [r7, #12]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	08008afd 	.word	0x08008afd

08008afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b06:	4b12      	ldr	r3, [pc, #72]	; (8008b50 <prvTaskExitError+0x54>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b0e:	d00a      	beq.n	8008b26 <prvTaskExitError+0x2a>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	60fb      	str	r3, [r7, #12]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <prvTaskExitError+0x28>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	60bb      	str	r3, [r7, #8]
}
 8008b38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b3a:	bf00      	nop
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0fc      	beq.n	8008b3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	2000000c 	.word	0x2000000c
	...

08008b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b60:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <pxCurrentTCBConst2>)
 8008b62:	6819      	ldr	r1, [r3, #0]
 8008b64:	6808      	ldr	r0, [r1, #0]
 8008b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	f380 8809 	msr	PSP, r0
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f04f 0000 	mov.w	r0, #0
 8008b76:	f380 8811 	msr	BASEPRI, r0
 8008b7a:	4770      	bx	lr
 8008b7c:	f3af 8000 	nop.w

08008b80 <pxCurrentTCBConst2>:
 8008b80:	20000ac0 	.word	0x20000ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop

08008b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b88:	4808      	ldr	r0, [pc, #32]	; (8008bac <prvPortStartFirstTask+0x24>)
 8008b8a:	6800      	ldr	r0, [r0, #0]
 8008b8c:	6800      	ldr	r0, [r0, #0]
 8008b8e:	f380 8808 	msr	MSP, r0
 8008b92:	f04f 0000 	mov.w	r0, #0
 8008b96:	f380 8814 	msr	CONTROL, r0
 8008b9a:	b662      	cpsie	i
 8008b9c:	b661      	cpsie	f
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	df00      	svc	0
 8008ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008baa:	bf00      	nop
 8008bac:	e000ed08 	.word	0xe000ed08

08008bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bb6:	4b46      	ldr	r3, [pc, #280]	; (8008cd0 <xPortStartScheduler+0x120>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a46      	ldr	r2, [pc, #280]	; (8008cd4 <xPortStartScheduler+0x124>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d10a      	bne.n	8008bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	613b      	str	r3, [r7, #16]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bd6:	4b3e      	ldr	r3, [pc, #248]	; (8008cd0 <xPortStartScheduler+0x120>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a3f      	ldr	r2, [pc, #252]	; (8008cd8 <xPortStartScheduler+0x128>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d10a      	bne.n	8008bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	60fb      	str	r3, [r7, #12]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bf6:	4b39      	ldr	r3, [pc, #228]	; (8008cdc <xPortStartScheduler+0x12c>)
 8008bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	22ff      	movs	r2, #255	; 0xff
 8008c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	4b31      	ldr	r3, [pc, #196]	; (8008ce0 <xPortStartScheduler+0x130>)
 8008c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c1e:	4b31      	ldr	r3, [pc, #196]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c20:	2207      	movs	r2, #7
 8008c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c24:	e009      	b.n	8008c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c26:	4b2f      	ldr	r3, [pc, #188]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c42:	2b80      	cmp	r3, #128	; 0x80
 8008c44:	d0ef      	beq.n	8008c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c46:	4b27      	ldr	r3, [pc, #156]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f1c3 0307 	rsb	r3, r3, #7
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d00a      	beq.n	8008c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60bb      	str	r3, [r7, #8]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c68:	4b1e      	ldr	r3, [pc, #120]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c72:	4b1c      	ldr	r3, [pc, #112]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c86:	4b18      	ldr	r3, [pc, #96]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a17      	ldr	r2, [pc, #92]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c92:	4b15      	ldr	r3, [pc, #84]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a14      	ldr	r2, [pc, #80]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c9e:	f000 f8dd 	bl	8008e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ca2:	4b12      	ldr	r3, [pc, #72]	; (8008cec <xPortStartScheduler+0x13c>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ca8:	f000 f8fc 	bl	8008ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cac:	4b10      	ldr	r3, [pc, #64]	; (8008cf0 <xPortStartScheduler+0x140>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a0f      	ldr	r2, [pc, #60]	; (8008cf0 <xPortStartScheduler+0x140>)
 8008cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cb8:	f7ff ff66 	bl	8008b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cbc:	f7fe ff40 	bl	8007b40 <vTaskSwitchContext>
	prvTaskExitError();
 8008cc0:	f7ff ff1c 	bl	8008afc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	e000ed00 	.word	0xe000ed00
 8008cd4:	410fc271 	.word	0x410fc271
 8008cd8:	410fc270 	.word	0x410fc270
 8008cdc:	e000e400 	.word	0xe000e400
 8008ce0:	200010ec 	.word	0x200010ec
 8008ce4:	200010f0 	.word	0x200010f0
 8008ce8:	e000ed20 	.word	0xe000ed20
 8008cec:	2000000c 	.word	0x2000000c
 8008cf0:	e000ef34 	.word	0xe000ef34

08008cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	607b      	str	r3, [r7, #4]
}
 8008d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3301      	adds	r3, #1
 8008d14:	4a0d      	ldr	r2, [pc, #52]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d10f      	bne.n	8008d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d20:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <vPortEnterCritical+0x5c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	603b      	str	r3, [r7, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	e7fe      	b.n	8008d3e <vPortEnterCritical+0x4a>
	}
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	2000000c 	.word	0x2000000c
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d5a:	4b12      	ldr	r3, [pc, #72]	; (8008da4 <vPortExitCritical+0x50>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10a      	bne.n	8008d78 <vPortExitCritical+0x24>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	607b      	str	r3, [r7, #4]
}
 8008d74:	bf00      	nop
 8008d76:	e7fe      	b.n	8008d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d78:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <vPortExitCritical+0x50>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	4a09      	ldr	r2, [pc, #36]	; (8008da4 <vPortExitCritical+0x50>)
 8008d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d82:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <vPortExitCritical+0x50>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <vPortExitCritical+0x42>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	f383 8811 	msr	BASEPRI, r3
}
 8008d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	2000000c 	.word	0x2000000c
	...

08008db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008db0:	f3ef 8009 	mrs	r0, PSP
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	4b15      	ldr	r3, [pc, #84]	; (8008e10 <pxCurrentTCBConst>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	f01e 0f10 	tst.w	lr, #16
 8008dc0:	bf08      	it	eq
 8008dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dca:	6010      	str	r0, [r2, #0]
 8008dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008dd4:	f380 8811 	msr	BASEPRI, r0
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f7fe feae 	bl	8007b40 <vTaskSwitchContext>
 8008de4:	f04f 0000 	mov.w	r0, #0
 8008de8:	f380 8811 	msr	BASEPRI, r0
 8008dec:	bc09      	pop	{r0, r3}
 8008dee:	6819      	ldr	r1, [r3, #0]
 8008df0:	6808      	ldr	r0, [r1, #0]
 8008df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df6:	f01e 0f10 	tst.w	lr, #16
 8008dfa:	bf08      	it	eq
 8008dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e00:	f380 8809 	msr	PSP, r0
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	f3af 8000 	nop.w

08008e10 <pxCurrentTCBConst>:
 8008e10:	20000ac0 	.word	0x20000ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop

08008e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	607b      	str	r3, [r7, #4]
}
 8008e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e32:	f7fe fdcb 	bl	80079cc <xTaskIncrementTick>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <xPortSysTickHandler+0x40>)
 8008e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f383 8811 	msr	BASEPRI, r3
}
 8008e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e66:	4b0b      	ldr	r3, [pc, #44]	; (8008e94 <vPortSetupTimerInterrupt+0x38>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <vPortSetupTimerInterrupt+0x3c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <vPortSetupTimerInterrupt+0x40>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	099b      	lsrs	r3, r3, #6
 8008e78:	4a09      	ldr	r2, [pc, #36]	; (8008ea0 <vPortSetupTimerInterrupt+0x44>)
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e7e:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e80:	2207      	movs	r2, #7
 8008e82:	601a      	str	r2, [r3, #0]
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	e000e010 	.word	0xe000e010
 8008e94:	e000e018 	.word	0xe000e018
 8008e98:	20000000 	.word	0x20000000
 8008e9c:	10624dd3 	.word	0x10624dd3
 8008ea0:	e000e014 	.word	0xe000e014

08008ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008eb4 <vPortEnableVFP+0x10>
 8008ea8:	6801      	ldr	r1, [r0, #0]
 8008eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008eae:	6001      	str	r1, [r0, #0]
 8008eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed88 	.word	0xe000ed88

08008eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ebe:	f3ef 8305 	mrs	r3, IPSR
 8008ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d914      	bls.n	8008ef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eca:	4a17      	ldr	r2, [pc, #92]	; (8008f28 <vPortValidateInterruptPriority+0x70>)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ed4:	4b15      	ldr	r3, [pc, #84]	; (8008f2c <vPortValidateInterruptPriority+0x74>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	7afa      	ldrb	r2, [r7, #11]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d20a      	bcs.n	8008ef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	607b      	str	r3, [r7, #4]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ef4:	4b0e      	ldr	r3, [pc, #56]	; (8008f30 <vPortValidateInterruptPriority+0x78>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008efc:	4b0d      	ldr	r3, [pc, #52]	; (8008f34 <vPortValidateInterruptPriority+0x7c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d90a      	bls.n	8008f1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	603b      	str	r3, [r7, #0]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <vPortValidateInterruptPriority+0x60>
	}
 8008f1a:	bf00      	nop
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	e000e3f0 	.word	0xe000e3f0
 8008f2c:	200010ec 	.word	0x200010ec
 8008f30:	e000ed0c 	.word	0xe000ed0c
 8008f34:	200010f0 	.word	0x200010f0

08008f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08a      	sub	sp, #40	; 0x28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f44:	f7fe fc86 	bl	8007854 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f48:	4b5b      	ldr	r3, [pc, #364]	; (80090b8 <pvPortMalloc+0x180>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f50:	f000 f920 	bl	8009194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f54:	4b59      	ldr	r3, [pc, #356]	; (80090bc <pvPortMalloc+0x184>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f040 8093 	bne.w	8009088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d01d      	beq.n	8008fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f68:	2208      	movs	r2, #8
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f003 0307 	and.w	r3, r3, #7
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d014      	beq.n	8008fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f023 0307 	bic.w	r3, r3, #7
 8008f80:	3308      	adds	r3, #8
 8008f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	617b      	str	r3, [r7, #20]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d06e      	beq.n	8009088 <pvPortMalloc+0x150>
 8008faa:	4b45      	ldr	r3, [pc, #276]	; (80090c0 <pvPortMalloc+0x188>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d869      	bhi.n	8009088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fb4:	4b43      	ldr	r3, [pc, #268]	; (80090c4 <pvPortMalloc+0x18c>)
 8008fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fb8:	4b42      	ldr	r3, [pc, #264]	; (80090c4 <pvPortMalloc+0x18c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fbe:	e004      	b.n	8008fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d903      	bls.n	8008fdc <pvPortMalloc+0xa4>
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1f1      	bne.n	8008fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fdc:	4b36      	ldr	r3, [pc, #216]	; (80090b8 <pvPortMalloc+0x180>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d050      	beq.n	8009088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2208      	movs	r2, #8
 8008fec:	4413      	add	r3, r2
 8008fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	1ad2      	subs	r2, r2, r3
 8009000:	2308      	movs	r3, #8
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	429a      	cmp	r2, r3
 8009006:	d91f      	bls.n	8009048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4413      	add	r3, r2
 800900e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00a      	beq.n	8009030 <pvPortMalloc+0xf8>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	613b      	str	r3, [r7, #16]
}
 800902c:	bf00      	nop
 800902e:	e7fe      	b.n	800902e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	1ad2      	subs	r2, r2, r3
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009042:	69b8      	ldr	r0, [r7, #24]
 8009044:	f000 f908 	bl	8009258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009048:	4b1d      	ldr	r3, [pc, #116]	; (80090c0 <pvPortMalloc+0x188>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	4a1b      	ldr	r2, [pc, #108]	; (80090c0 <pvPortMalloc+0x188>)
 8009054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009056:	4b1a      	ldr	r3, [pc, #104]	; (80090c0 <pvPortMalloc+0x188>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4b1b      	ldr	r3, [pc, #108]	; (80090c8 <pvPortMalloc+0x190>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d203      	bcs.n	800906a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009062:	4b17      	ldr	r3, [pc, #92]	; (80090c0 <pvPortMalloc+0x188>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a18      	ldr	r2, [pc, #96]	; (80090c8 <pvPortMalloc+0x190>)
 8009068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	4b13      	ldr	r3, [pc, #76]	; (80090bc <pvPortMalloc+0x184>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	431a      	orrs	r2, r3
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	2200      	movs	r2, #0
 800907c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800907e:	4b13      	ldr	r3, [pc, #76]	; (80090cc <pvPortMalloc+0x194>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3301      	adds	r3, #1
 8009084:	4a11      	ldr	r2, [pc, #68]	; (80090cc <pvPortMalloc+0x194>)
 8009086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009088:	f7fe fbf2 	bl	8007870 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <pvPortMalloc+0x174>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	60fb      	str	r3, [r7, #12]
}
 80090a8:	bf00      	nop
 80090aa:	e7fe      	b.n	80090aa <pvPortMalloc+0x172>
	return pvReturn;
 80090ac:	69fb      	ldr	r3, [r7, #28]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3728      	adds	r7, #40	; 0x28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	2000209c 	.word	0x2000209c
 80090bc:	200020b0 	.word	0x200020b0
 80090c0:	200020a0 	.word	0x200020a0
 80090c4:	20002094 	.word	0x20002094
 80090c8:	200020a4 	.word	0x200020a4
 80090cc:	200020a8 	.word	0x200020a8

080090d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d04d      	beq.n	800917e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090e2:	2308      	movs	r3, #8
 80090e4:	425b      	negs	r3, r3
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	4413      	add	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	4b24      	ldr	r3, [pc, #144]	; (8009188 <vPortFree+0xb8>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4013      	ands	r3, r2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <vPortFree+0x44>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	60fb      	str	r3, [r7, #12]
}
 8009110:	bf00      	nop
 8009112:	e7fe      	b.n	8009112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <vPortFree+0x62>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	60bb      	str	r3, [r7, #8]
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	4b14      	ldr	r3, [pc, #80]	; (8009188 <vPortFree+0xb8>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4013      	ands	r3, r2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01e      	beq.n	800917e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d11a      	bne.n	800917e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	4b0e      	ldr	r3, [pc, #56]	; (8009188 <vPortFree+0xb8>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	43db      	mvns	r3, r3
 8009152:	401a      	ands	r2, r3
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009158:	f7fe fb7c 	bl	8007854 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <vPortFree+0xbc>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4413      	add	r3, r2
 8009166:	4a09      	ldr	r2, [pc, #36]	; (800918c <vPortFree+0xbc>)
 8009168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800916a:	6938      	ldr	r0, [r7, #16]
 800916c:	f000 f874 	bl	8009258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009170:	4b07      	ldr	r3, [pc, #28]	; (8009190 <vPortFree+0xc0>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3301      	adds	r3, #1
 8009176:	4a06      	ldr	r2, [pc, #24]	; (8009190 <vPortFree+0xc0>)
 8009178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800917a:	f7fe fb79 	bl	8007870 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800917e:	bf00      	nop
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	200020b0 	.word	0x200020b0
 800918c:	200020a0 	.word	0x200020a0
 8009190:	200020ac 	.word	0x200020ac

08009194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800919a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800919e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091a0:	4b27      	ldr	r3, [pc, #156]	; (8009240 <prvHeapInit+0xac>)
 80091a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00c      	beq.n	80091c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3307      	adds	r3, #7
 80091b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0307 	bic.w	r3, r3, #7
 80091ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	4a1f      	ldr	r2, [pc, #124]	; (8009240 <prvHeapInit+0xac>)
 80091c4:	4413      	add	r3, r2
 80091c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091cc:	4a1d      	ldr	r2, [pc, #116]	; (8009244 <prvHeapInit+0xb0>)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091d2:	4b1c      	ldr	r3, [pc, #112]	; (8009244 <prvHeapInit+0xb0>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4413      	add	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091e0:	2208      	movs	r2, #8
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	1a9b      	subs	r3, r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 0307 	bic.w	r3, r3, #7
 80091ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a15      	ldr	r2, [pc, #84]	; (8009248 <prvHeapInit+0xb4>)
 80091f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091f6:	4b14      	ldr	r3, [pc, #80]	; (8009248 <prvHeapInit+0xb4>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2200      	movs	r2, #0
 80091fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091fe:	4b12      	ldr	r3, [pc, #72]	; (8009248 <prvHeapInit+0xb4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	1ad2      	subs	r2, r2, r3
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009214:	4b0c      	ldr	r3, [pc, #48]	; (8009248 <prvHeapInit+0xb4>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	4a0a      	ldr	r2, [pc, #40]	; (800924c <prvHeapInit+0xb8>)
 8009222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4a09      	ldr	r2, [pc, #36]	; (8009250 <prvHeapInit+0xbc>)
 800922a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800922c:	4b09      	ldr	r3, [pc, #36]	; (8009254 <prvHeapInit+0xc0>)
 800922e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009232:	601a      	str	r2, [r3, #0]
}
 8009234:	bf00      	nop
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	200010f4 	.word	0x200010f4
 8009244:	20002094 	.word	0x20002094
 8009248:	2000209c 	.word	0x2000209c
 800924c:	200020a4 	.word	0x200020a4
 8009250:	200020a0 	.word	0x200020a0
 8009254:	200020b0 	.word	0x200020b0

08009258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009260:	4b28      	ldr	r3, [pc, #160]	; (8009304 <prvInsertBlockIntoFreeList+0xac>)
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	e002      	b.n	800926c <prvInsertBlockIntoFreeList+0x14>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	429a      	cmp	r2, r3
 8009274:	d8f7      	bhi.n	8009266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	4413      	add	r3, r2
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	429a      	cmp	r2, r3
 8009286:	d108      	bne.n	800929a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	441a      	add	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	441a      	add	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d118      	bne.n	80092e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	4b15      	ldr	r3, [pc, #84]	; (8009308 <prvInsertBlockIntoFreeList+0xb0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d00d      	beq.n	80092d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	441a      	add	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	e008      	b.n	80092e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092d6:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <prvInsertBlockIntoFreeList+0xb0>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	e003      	b.n	80092e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d002      	beq.n	80092f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092f6:	bf00      	nop
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20002094 	.word	0x20002094
 8009308:	2000209c 	.word	0x2000209c

0800930c <__assert_func>:
 800930c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800930e:	4614      	mov	r4, r2
 8009310:	461a      	mov	r2, r3
 8009312:	4b09      	ldr	r3, [pc, #36]	; (8009338 <__assert_func+0x2c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4605      	mov	r5, r0
 8009318:	68d8      	ldr	r0, [r3, #12]
 800931a:	b14c      	cbz	r4, 8009330 <__assert_func+0x24>
 800931c:	4b07      	ldr	r3, [pc, #28]	; (800933c <__assert_func+0x30>)
 800931e:	9100      	str	r1, [sp, #0]
 8009320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009324:	4906      	ldr	r1, [pc, #24]	; (8009340 <__assert_func+0x34>)
 8009326:	462b      	mov	r3, r5
 8009328:	f000 f814 	bl	8009354 <fiprintf>
 800932c:	f000 ff02 	bl	800a134 <abort>
 8009330:	4b04      	ldr	r3, [pc, #16]	; (8009344 <__assert_func+0x38>)
 8009332:	461c      	mov	r4, r3
 8009334:	e7f3      	b.n	800931e <__assert_func+0x12>
 8009336:	bf00      	nop
 8009338:	20000010 	.word	0x20000010
 800933c:	0800c69c 	.word	0x0800c69c
 8009340:	0800c6a9 	.word	0x0800c6a9
 8009344:	0800c6d7 	.word	0x0800c6d7

08009348 <__errno>:
 8009348:	4b01      	ldr	r3, [pc, #4]	; (8009350 <__errno+0x8>)
 800934a:	6818      	ldr	r0, [r3, #0]
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000010 	.word	0x20000010

08009354 <fiprintf>:
 8009354:	b40e      	push	{r1, r2, r3}
 8009356:	b503      	push	{r0, r1, lr}
 8009358:	4601      	mov	r1, r0
 800935a:	ab03      	add	r3, sp, #12
 800935c:	4805      	ldr	r0, [pc, #20]	; (8009374 <fiprintf+0x20>)
 800935e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009362:	6800      	ldr	r0, [r0, #0]
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	f000 f86b 	bl	8009440 <_vfiprintf_r>
 800936a:	b002      	add	sp, #8
 800936c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009370:	b003      	add	sp, #12
 8009372:	4770      	bx	lr
 8009374:	20000010 	.word	0x20000010

08009378 <__libc_init_array>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	4d0d      	ldr	r5, [pc, #52]	; (80093b0 <__libc_init_array+0x38>)
 800937c:	4c0d      	ldr	r4, [pc, #52]	; (80093b4 <__libc_init_array+0x3c>)
 800937e:	1b64      	subs	r4, r4, r5
 8009380:	10a4      	asrs	r4, r4, #2
 8009382:	2600      	movs	r6, #0
 8009384:	42a6      	cmp	r6, r4
 8009386:	d109      	bne.n	800939c <__libc_init_array+0x24>
 8009388:	4d0b      	ldr	r5, [pc, #44]	; (80093b8 <__libc_init_array+0x40>)
 800938a:	4c0c      	ldr	r4, [pc, #48]	; (80093bc <__libc_init_array+0x44>)
 800938c:	f002 fed0 	bl	800c130 <_init>
 8009390:	1b64      	subs	r4, r4, r5
 8009392:	10a4      	asrs	r4, r4, #2
 8009394:	2600      	movs	r6, #0
 8009396:	42a6      	cmp	r6, r4
 8009398:	d105      	bne.n	80093a6 <__libc_init_array+0x2e>
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a0:	4798      	blx	r3
 80093a2:	3601      	adds	r6, #1
 80093a4:	e7ee      	b.n	8009384 <__libc_init_array+0xc>
 80093a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093aa:	4798      	blx	r3
 80093ac:	3601      	adds	r6, #1
 80093ae:	e7f2      	b.n	8009396 <__libc_init_array+0x1e>
 80093b0:	0800ca80 	.word	0x0800ca80
 80093b4:	0800ca80 	.word	0x0800ca80
 80093b8:	0800ca80 	.word	0x0800ca80
 80093bc:	0800ca84 	.word	0x0800ca84

080093c0 <memcpy>:
 80093c0:	440a      	add	r2, r1
 80093c2:	4291      	cmp	r1, r2
 80093c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093c8:	d100      	bne.n	80093cc <memcpy+0xc>
 80093ca:	4770      	bx	lr
 80093cc:	b510      	push	{r4, lr}
 80093ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093d6:	4291      	cmp	r1, r2
 80093d8:	d1f9      	bne.n	80093ce <memcpy+0xe>
 80093da:	bd10      	pop	{r4, pc}

080093dc <memset>:
 80093dc:	4402      	add	r2, r0
 80093de:	4603      	mov	r3, r0
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d100      	bne.n	80093e6 <memset+0xa>
 80093e4:	4770      	bx	lr
 80093e6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ea:	e7f9      	b.n	80093e0 <memset+0x4>

080093ec <__sfputc_r>:
 80093ec:	6893      	ldr	r3, [r2, #8]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	b410      	push	{r4}
 80093f4:	6093      	str	r3, [r2, #8]
 80093f6:	da08      	bge.n	800940a <__sfputc_r+0x1e>
 80093f8:	6994      	ldr	r4, [r2, #24]
 80093fa:	42a3      	cmp	r3, r4
 80093fc:	db01      	blt.n	8009402 <__sfputc_r+0x16>
 80093fe:	290a      	cmp	r1, #10
 8009400:	d103      	bne.n	800940a <__sfputc_r+0x1e>
 8009402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009406:	f000 bdd5 	b.w	8009fb4 <__swbuf_r>
 800940a:	6813      	ldr	r3, [r2, #0]
 800940c:	1c58      	adds	r0, r3, #1
 800940e:	6010      	str	r0, [r2, #0]
 8009410:	7019      	strb	r1, [r3, #0]
 8009412:	4608      	mov	r0, r1
 8009414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009418:	4770      	bx	lr

0800941a <__sfputs_r>:
 800941a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941c:	4606      	mov	r6, r0
 800941e:	460f      	mov	r7, r1
 8009420:	4614      	mov	r4, r2
 8009422:	18d5      	adds	r5, r2, r3
 8009424:	42ac      	cmp	r4, r5
 8009426:	d101      	bne.n	800942c <__sfputs_r+0x12>
 8009428:	2000      	movs	r0, #0
 800942a:	e007      	b.n	800943c <__sfputs_r+0x22>
 800942c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009430:	463a      	mov	r2, r7
 8009432:	4630      	mov	r0, r6
 8009434:	f7ff ffda 	bl	80093ec <__sfputc_r>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d1f3      	bne.n	8009424 <__sfputs_r+0xa>
 800943c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009440 <_vfiprintf_r>:
 8009440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009444:	460d      	mov	r5, r1
 8009446:	b09d      	sub	sp, #116	; 0x74
 8009448:	4614      	mov	r4, r2
 800944a:	4698      	mov	r8, r3
 800944c:	4606      	mov	r6, r0
 800944e:	b118      	cbz	r0, 8009458 <_vfiprintf_r+0x18>
 8009450:	6983      	ldr	r3, [r0, #24]
 8009452:	b90b      	cbnz	r3, 8009458 <_vfiprintf_r+0x18>
 8009454:	f001 fe08 	bl	800b068 <__sinit>
 8009458:	4b89      	ldr	r3, [pc, #548]	; (8009680 <_vfiprintf_r+0x240>)
 800945a:	429d      	cmp	r5, r3
 800945c:	d11b      	bne.n	8009496 <_vfiprintf_r+0x56>
 800945e:	6875      	ldr	r5, [r6, #4]
 8009460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009462:	07d9      	lsls	r1, r3, #31
 8009464:	d405      	bmi.n	8009472 <_vfiprintf_r+0x32>
 8009466:	89ab      	ldrh	r3, [r5, #12]
 8009468:	059a      	lsls	r2, r3, #22
 800946a:	d402      	bmi.n	8009472 <_vfiprintf_r+0x32>
 800946c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800946e:	f001 fe9e 	bl	800b1ae <__retarget_lock_acquire_recursive>
 8009472:	89ab      	ldrh	r3, [r5, #12]
 8009474:	071b      	lsls	r3, r3, #28
 8009476:	d501      	bpl.n	800947c <_vfiprintf_r+0x3c>
 8009478:	692b      	ldr	r3, [r5, #16]
 800947a:	b9eb      	cbnz	r3, 80094b8 <_vfiprintf_r+0x78>
 800947c:	4629      	mov	r1, r5
 800947e:	4630      	mov	r0, r6
 8009480:	f000 fdea 	bl	800a058 <__swsetup_r>
 8009484:	b1c0      	cbz	r0, 80094b8 <_vfiprintf_r+0x78>
 8009486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009488:	07dc      	lsls	r4, r3, #31
 800948a:	d50e      	bpl.n	80094aa <_vfiprintf_r+0x6a>
 800948c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009490:	b01d      	add	sp, #116	; 0x74
 8009492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009496:	4b7b      	ldr	r3, [pc, #492]	; (8009684 <_vfiprintf_r+0x244>)
 8009498:	429d      	cmp	r5, r3
 800949a:	d101      	bne.n	80094a0 <_vfiprintf_r+0x60>
 800949c:	68b5      	ldr	r5, [r6, #8]
 800949e:	e7df      	b.n	8009460 <_vfiprintf_r+0x20>
 80094a0:	4b79      	ldr	r3, [pc, #484]	; (8009688 <_vfiprintf_r+0x248>)
 80094a2:	429d      	cmp	r5, r3
 80094a4:	bf08      	it	eq
 80094a6:	68f5      	ldreq	r5, [r6, #12]
 80094a8:	e7da      	b.n	8009460 <_vfiprintf_r+0x20>
 80094aa:	89ab      	ldrh	r3, [r5, #12]
 80094ac:	0598      	lsls	r0, r3, #22
 80094ae:	d4ed      	bmi.n	800948c <_vfiprintf_r+0x4c>
 80094b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094b2:	f001 fe7d 	bl	800b1b0 <__retarget_lock_release_recursive>
 80094b6:	e7e9      	b.n	800948c <_vfiprintf_r+0x4c>
 80094b8:	2300      	movs	r3, #0
 80094ba:	9309      	str	r3, [sp, #36]	; 0x24
 80094bc:	2320      	movs	r3, #32
 80094be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80094c6:	2330      	movs	r3, #48	; 0x30
 80094c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800968c <_vfiprintf_r+0x24c>
 80094cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094d0:	f04f 0901 	mov.w	r9, #1
 80094d4:	4623      	mov	r3, r4
 80094d6:	469a      	mov	sl, r3
 80094d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094dc:	b10a      	cbz	r2, 80094e2 <_vfiprintf_r+0xa2>
 80094de:	2a25      	cmp	r2, #37	; 0x25
 80094e0:	d1f9      	bne.n	80094d6 <_vfiprintf_r+0x96>
 80094e2:	ebba 0b04 	subs.w	fp, sl, r4
 80094e6:	d00b      	beq.n	8009500 <_vfiprintf_r+0xc0>
 80094e8:	465b      	mov	r3, fp
 80094ea:	4622      	mov	r2, r4
 80094ec:	4629      	mov	r1, r5
 80094ee:	4630      	mov	r0, r6
 80094f0:	f7ff ff93 	bl	800941a <__sfputs_r>
 80094f4:	3001      	adds	r0, #1
 80094f6:	f000 80aa 	beq.w	800964e <_vfiprintf_r+0x20e>
 80094fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094fc:	445a      	add	r2, fp
 80094fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009500:	f89a 3000 	ldrb.w	r3, [sl]
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 80a2 	beq.w	800964e <_vfiprintf_r+0x20e>
 800950a:	2300      	movs	r3, #0
 800950c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009514:	f10a 0a01 	add.w	sl, sl, #1
 8009518:	9304      	str	r3, [sp, #16]
 800951a:	9307      	str	r3, [sp, #28]
 800951c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009520:	931a      	str	r3, [sp, #104]	; 0x68
 8009522:	4654      	mov	r4, sl
 8009524:	2205      	movs	r2, #5
 8009526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800952a:	4858      	ldr	r0, [pc, #352]	; (800968c <_vfiprintf_r+0x24c>)
 800952c:	f7f6 fe58 	bl	80001e0 <memchr>
 8009530:	9a04      	ldr	r2, [sp, #16]
 8009532:	b9d8      	cbnz	r0, 800956c <_vfiprintf_r+0x12c>
 8009534:	06d1      	lsls	r1, r2, #27
 8009536:	bf44      	itt	mi
 8009538:	2320      	movmi	r3, #32
 800953a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800953e:	0713      	lsls	r3, r2, #28
 8009540:	bf44      	itt	mi
 8009542:	232b      	movmi	r3, #43	; 0x2b
 8009544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009548:	f89a 3000 	ldrb.w	r3, [sl]
 800954c:	2b2a      	cmp	r3, #42	; 0x2a
 800954e:	d015      	beq.n	800957c <_vfiprintf_r+0x13c>
 8009550:	9a07      	ldr	r2, [sp, #28]
 8009552:	4654      	mov	r4, sl
 8009554:	2000      	movs	r0, #0
 8009556:	f04f 0c0a 	mov.w	ip, #10
 800955a:	4621      	mov	r1, r4
 800955c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009560:	3b30      	subs	r3, #48	; 0x30
 8009562:	2b09      	cmp	r3, #9
 8009564:	d94e      	bls.n	8009604 <_vfiprintf_r+0x1c4>
 8009566:	b1b0      	cbz	r0, 8009596 <_vfiprintf_r+0x156>
 8009568:	9207      	str	r2, [sp, #28]
 800956a:	e014      	b.n	8009596 <_vfiprintf_r+0x156>
 800956c:	eba0 0308 	sub.w	r3, r0, r8
 8009570:	fa09 f303 	lsl.w	r3, r9, r3
 8009574:	4313      	orrs	r3, r2
 8009576:	9304      	str	r3, [sp, #16]
 8009578:	46a2      	mov	sl, r4
 800957a:	e7d2      	b.n	8009522 <_vfiprintf_r+0xe2>
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	1d19      	adds	r1, r3, #4
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	9103      	str	r1, [sp, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	bfbb      	ittet	lt
 8009588:	425b      	neglt	r3, r3
 800958a:	f042 0202 	orrlt.w	r2, r2, #2
 800958e:	9307      	strge	r3, [sp, #28]
 8009590:	9307      	strlt	r3, [sp, #28]
 8009592:	bfb8      	it	lt
 8009594:	9204      	strlt	r2, [sp, #16]
 8009596:	7823      	ldrb	r3, [r4, #0]
 8009598:	2b2e      	cmp	r3, #46	; 0x2e
 800959a:	d10c      	bne.n	80095b6 <_vfiprintf_r+0x176>
 800959c:	7863      	ldrb	r3, [r4, #1]
 800959e:	2b2a      	cmp	r3, #42	; 0x2a
 80095a0:	d135      	bne.n	800960e <_vfiprintf_r+0x1ce>
 80095a2:	9b03      	ldr	r3, [sp, #12]
 80095a4:	1d1a      	adds	r2, r3, #4
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	9203      	str	r2, [sp, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	bfb8      	it	lt
 80095ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80095b2:	3402      	adds	r4, #2
 80095b4:	9305      	str	r3, [sp, #20]
 80095b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800969c <_vfiprintf_r+0x25c>
 80095ba:	7821      	ldrb	r1, [r4, #0]
 80095bc:	2203      	movs	r2, #3
 80095be:	4650      	mov	r0, sl
 80095c0:	f7f6 fe0e 	bl	80001e0 <memchr>
 80095c4:	b140      	cbz	r0, 80095d8 <_vfiprintf_r+0x198>
 80095c6:	2340      	movs	r3, #64	; 0x40
 80095c8:	eba0 000a 	sub.w	r0, r0, sl
 80095cc:	fa03 f000 	lsl.w	r0, r3, r0
 80095d0:	9b04      	ldr	r3, [sp, #16]
 80095d2:	4303      	orrs	r3, r0
 80095d4:	3401      	adds	r4, #1
 80095d6:	9304      	str	r3, [sp, #16]
 80095d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095dc:	482c      	ldr	r0, [pc, #176]	; (8009690 <_vfiprintf_r+0x250>)
 80095de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095e2:	2206      	movs	r2, #6
 80095e4:	f7f6 fdfc 	bl	80001e0 <memchr>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d03f      	beq.n	800966c <_vfiprintf_r+0x22c>
 80095ec:	4b29      	ldr	r3, [pc, #164]	; (8009694 <_vfiprintf_r+0x254>)
 80095ee:	bb1b      	cbnz	r3, 8009638 <_vfiprintf_r+0x1f8>
 80095f0:	9b03      	ldr	r3, [sp, #12]
 80095f2:	3307      	adds	r3, #7
 80095f4:	f023 0307 	bic.w	r3, r3, #7
 80095f8:	3308      	adds	r3, #8
 80095fa:	9303      	str	r3, [sp, #12]
 80095fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095fe:	443b      	add	r3, r7
 8009600:	9309      	str	r3, [sp, #36]	; 0x24
 8009602:	e767      	b.n	80094d4 <_vfiprintf_r+0x94>
 8009604:	fb0c 3202 	mla	r2, ip, r2, r3
 8009608:	460c      	mov	r4, r1
 800960a:	2001      	movs	r0, #1
 800960c:	e7a5      	b.n	800955a <_vfiprintf_r+0x11a>
 800960e:	2300      	movs	r3, #0
 8009610:	3401      	adds	r4, #1
 8009612:	9305      	str	r3, [sp, #20]
 8009614:	4619      	mov	r1, r3
 8009616:	f04f 0c0a 	mov.w	ip, #10
 800961a:	4620      	mov	r0, r4
 800961c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009620:	3a30      	subs	r2, #48	; 0x30
 8009622:	2a09      	cmp	r2, #9
 8009624:	d903      	bls.n	800962e <_vfiprintf_r+0x1ee>
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0c5      	beq.n	80095b6 <_vfiprintf_r+0x176>
 800962a:	9105      	str	r1, [sp, #20]
 800962c:	e7c3      	b.n	80095b6 <_vfiprintf_r+0x176>
 800962e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009632:	4604      	mov	r4, r0
 8009634:	2301      	movs	r3, #1
 8009636:	e7f0      	b.n	800961a <_vfiprintf_r+0x1da>
 8009638:	ab03      	add	r3, sp, #12
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	462a      	mov	r2, r5
 800963e:	4b16      	ldr	r3, [pc, #88]	; (8009698 <_vfiprintf_r+0x258>)
 8009640:	a904      	add	r1, sp, #16
 8009642:	4630      	mov	r0, r6
 8009644:	f000 f8cc 	bl	80097e0 <_printf_float>
 8009648:	4607      	mov	r7, r0
 800964a:	1c78      	adds	r0, r7, #1
 800964c:	d1d6      	bne.n	80095fc <_vfiprintf_r+0x1bc>
 800964e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009650:	07d9      	lsls	r1, r3, #31
 8009652:	d405      	bmi.n	8009660 <_vfiprintf_r+0x220>
 8009654:	89ab      	ldrh	r3, [r5, #12]
 8009656:	059a      	lsls	r2, r3, #22
 8009658:	d402      	bmi.n	8009660 <_vfiprintf_r+0x220>
 800965a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800965c:	f001 fda8 	bl	800b1b0 <__retarget_lock_release_recursive>
 8009660:	89ab      	ldrh	r3, [r5, #12]
 8009662:	065b      	lsls	r3, r3, #25
 8009664:	f53f af12 	bmi.w	800948c <_vfiprintf_r+0x4c>
 8009668:	9809      	ldr	r0, [sp, #36]	; 0x24
 800966a:	e711      	b.n	8009490 <_vfiprintf_r+0x50>
 800966c:	ab03      	add	r3, sp, #12
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	462a      	mov	r2, r5
 8009672:	4b09      	ldr	r3, [pc, #36]	; (8009698 <_vfiprintf_r+0x258>)
 8009674:	a904      	add	r1, sp, #16
 8009676:	4630      	mov	r0, r6
 8009678:	f000 fb56 	bl	8009d28 <_printf_i>
 800967c:	e7e4      	b.n	8009648 <_vfiprintf_r+0x208>
 800967e:	bf00      	nop
 8009680:	0800c7d4 	.word	0x0800c7d4
 8009684:	0800c7f4 	.word	0x0800c7f4
 8009688:	0800c7b4 	.word	0x0800c7b4
 800968c:	0800c6dc 	.word	0x0800c6dc
 8009690:	0800c6e6 	.word	0x0800c6e6
 8009694:	080097e1 	.word	0x080097e1
 8009698:	0800941b 	.word	0x0800941b
 800969c:	0800c6e2 	.word	0x0800c6e2

080096a0 <__cvt>:
 80096a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096a4:	ec55 4b10 	vmov	r4, r5, d0
 80096a8:	2d00      	cmp	r5, #0
 80096aa:	460e      	mov	r6, r1
 80096ac:	4619      	mov	r1, r3
 80096ae:	462b      	mov	r3, r5
 80096b0:	bfbb      	ittet	lt
 80096b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096b6:	461d      	movlt	r5, r3
 80096b8:	2300      	movge	r3, #0
 80096ba:	232d      	movlt	r3, #45	; 0x2d
 80096bc:	700b      	strb	r3, [r1, #0]
 80096be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80096c4:	4691      	mov	r9, r2
 80096c6:	f023 0820 	bic.w	r8, r3, #32
 80096ca:	bfbc      	itt	lt
 80096cc:	4622      	movlt	r2, r4
 80096ce:	4614      	movlt	r4, r2
 80096d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096d4:	d005      	beq.n	80096e2 <__cvt+0x42>
 80096d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096da:	d100      	bne.n	80096de <__cvt+0x3e>
 80096dc:	3601      	adds	r6, #1
 80096de:	2102      	movs	r1, #2
 80096e0:	e000      	b.n	80096e4 <__cvt+0x44>
 80096e2:	2103      	movs	r1, #3
 80096e4:	ab03      	add	r3, sp, #12
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	ab02      	add	r3, sp, #8
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	ec45 4b10 	vmov	d0, r4, r5
 80096f0:	4653      	mov	r3, sl
 80096f2:	4632      	mov	r2, r6
 80096f4:	f000 fdb0 	bl	800a258 <_dtoa_r>
 80096f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096fc:	4607      	mov	r7, r0
 80096fe:	d102      	bne.n	8009706 <__cvt+0x66>
 8009700:	f019 0f01 	tst.w	r9, #1
 8009704:	d022      	beq.n	800974c <__cvt+0xac>
 8009706:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800970a:	eb07 0906 	add.w	r9, r7, r6
 800970e:	d110      	bne.n	8009732 <__cvt+0x92>
 8009710:	783b      	ldrb	r3, [r7, #0]
 8009712:	2b30      	cmp	r3, #48	; 0x30
 8009714:	d10a      	bne.n	800972c <__cvt+0x8c>
 8009716:	2200      	movs	r2, #0
 8009718:	2300      	movs	r3, #0
 800971a:	4620      	mov	r0, r4
 800971c:	4629      	mov	r1, r5
 800971e:	f7f7 f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009722:	b918      	cbnz	r0, 800972c <__cvt+0x8c>
 8009724:	f1c6 0601 	rsb	r6, r6, #1
 8009728:	f8ca 6000 	str.w	r6, [sl]
 800972c:	f8da 3000 	ldr.w	r3, [sl]
 8009730:	4499      	add	r9, r3
 8009732:	2200      	movs	r2, #0
 8009734:	2300      	movs	r3, #0
 8009736:	4620      	mov	r0, r4
 8009738:	4629      	mov	r1, r5
 800973a:	f7f7 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800973e:	b108      	cbz	r0, 8009744 <__cvt+0xa4>
 8009740:	f8cd 900c 	str.w	r9, [sp, #12]
 8009744:	2230      	movs	r2, #48	; 0x30
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	454b      	cmp	r3, r9
 800974a:	d307      	bcc.n	800975c <__cvt+0xbc>
 800974c:	9b03      	ldr	r3, [sp, #12]
 800974e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009750:	1bdb      	subs	r3, r3, r7
 8009752:	4638      	mov	r0, r7
 8009754:	6013      	str	r3, [r2, #0]
 8009756:	b004      	add	sp, #16
 8009758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975c:	1c59      	adds	r1, r3, #1
 800975e:	9103      	str	r1, [sp, #12]
 8009760:	701a      	strb	r2, [r3, #0]
 8009762:	e7f0      	b.n	8009746 <__cvt+0xa6>

08009764 <__exponent>:
 8009764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009766:	4603      	mov	r3, r0
 8009768:	2900      	cmp	r1, #0
 800976a:	bfb8      	it	lt
 800976c:	4249      	neglt	r1, r1
 800976e:	f803 2b02 	strb.w	r2, [r3], #2
 8009772:	bfb4      	ite	lt
 8009774:	222d      	movlt	r2, #45	; 0x2d
 8009776:	222b      	movge	r2, #43	; 0x2b
 8009778:	2909      	cmp	r1, #9
 800977a:	7042      	strb	r2, [r0, #1]
 800977c:	dd2a      	ble.n	80097d4 <__exponent+0x70>
 800977e:	f10d 0407 	add.w	r4, sp, #7
 8009782:	46a4      	mov	ip, r4
 8009784:	270a      	movs	r7, #10
 8009786:	46a6      	mov	lr, r4
 8009788:	460a      	mov	r2, r1
 800978a:	fb91 f6f7 	sdiv	r6, r1, r7
 800978e:	fb07 1516 	mls	r5, r7, r6, r1
 8009792:	3530      	adds	r5, #48	; 0x30
 8009794:	2a63      	cmp	r2, #99	; 0x63
 8009796:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800979a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800979e:	4631      	mov	r1, r6
 80097a0:	dcf1      	bgt.n	8009786 <__exponent+0x22>
 80097a2:	3130      	adds	r1, #48	; 0x30
 80097a4:	f1ae 0502 	sub.w	r5, lr, #2
 80097a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80097ac:	1c44      	adds	r4, r0, #1
 80097ae:	4629      	mov	r1, r5
 80097b0:	4561      	cmp	r1, ip
 80097b2:	d30a      	bcc.n	80097ca <__exponent+0x66>
 80097b4:	f10d 0209 	add.w	r2, sp, #9
 80097b8:	eba2 020e 	sub.w	r2, r2, lr
 80097bc:	4565      	cmp	r5, ip
 80097be:	bf88      	it	hi
 80097c0:	2200      	movhi	r2, #0
 80097c2:	4413      	add	r3, r2
 80097c4:	1a18      	subs	r0, r3, r0
 80097c6:	b003      	add	sp, #12
 80097c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80097d2:	e7ed      	b.n	80097b0 <__exponent+0x4c>
 80097d4:	2330      	movs	r3, #48	; 0x30
 80097d6:	3130      	adds	r1, #48	; 0x30
 80097d8:	7083      	strb	r3, [r0, #2]
 80097da:	70c1      	strb	r1, [r0, #3]
 80097dc:	1d03      	adds	r3, r0, #4
 80097de:	e7f1      	b.n	80097c4 <__exponent+0x60>

080097e0 <_printf_float>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	ed2d 8b02 	vpush	{d8}
 80097e8:	b08d      	sub	sp, #52	; 0x34
 80097ea:	460c      	mov	r4, r1
 80097ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097f0:	4616      	mov	r6, r2
 80097f2:	461f      	mov	r7, r3
 80097f4:	4605      	mov	r5, r0
 80097f6:	f001 fcd5 	bl	800b1a4 <_localeconv_r>
 80097fa:	f8d0 a000 	ldr.w	sl, [r0]
 80097fe:	4650      	mov	r0, sl
 8009800:	f7f6 fce6 	bl	80001d0 <strlen>
 8009804:	2300      	movs	r3, #0
 8009806:	930a      	str	r3, [sp, #40]	; 0x28
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	9305      	str	r3, [sp, #20]
 800980c:	f8d8 3000 	ldr.w	r3, [r8]
 8009810:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009814:	3307      	adds	r3, #7
 8009816:	f023 0307 	bic.w	r3, r3, #7
 800981a:	f103 0208 	add.w	r2, r3, #8
 800981e:	f8c8 2000 	str.w	r2, [r8]
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800982a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800982e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009832:	9307      	str	r3, [sp, #28]
 8009834:	f8cd 8018 	str.w	r8, [sp, #24]
 8009838:	ee08 0a10 	vmov	s16, r0
 800983c:	4b9f      	ldr	r3, [pc, #636]	; (8009abc <_printf_float+0x2dc>)
 800983e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009846:	f7f7 f971 	bl	8000b2c <__aeabi_dcmpun>
 800984a:	bb88      	cbnz	r0, 80098b0 <_printf_float+0xd0>
 800984c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009850:	4b9a      	ldr	r3, [pc, #616]	; (8009abc <_printf_float+0x2dc>)
 8009852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009856:	f7f7 f94b 	bl	8000af0 <__aeabi_dcmple>
 800985a:	bb48      	cbnz	r0, 80098b0 <_printf_float+0xd0>
 800985c:	2200      	movs	r2, #0
 800985e:	2300      	movs	r3, #0
 8009860:	4640      	mov	r0, r8
 8009862:	4649      	mov	r1, r9
 8009864:	f7f7 f93a 	bl	8000adc <__aeabi_dcmplt>
 8009868:	b110      	cbz	r0, 8009870 <_printf_float+0x90>
 800986a:	232d      	movs	r3, #45	; 0x2d
 800986c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009870:	4b93      	ldr	r3, [pc, #588]	; (8009ac0 <_printf_float+0x2e0>)
 8009872:	4894      	ldr	r0, [pc, #592]	; (8009ac4 <_printf_float+0x2e4>)
 8009874:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009878:	bf94      	ite	ls
 800987a:	4698      	movls	r8, r3
 800987c:	4680      	movhi	r8, r0
 800987e:	2303      	movs	r3, #3
 8009880:	6123      	str	r3, [r4, #16]
 8009882:	9b05      	ldr	r3, [sp, #20]
 8009884:	f023 0204 	bic.w	r2, r3, #4
 8009888:	6022      	str	r2, [r4, #0]
 800988a:	f04f 0900 	mov.w	r9, #0
 800988e:	9700      	str	r7, [sp, #0]
 8009890:	4633      	mov	r3, r6
 8009892:	aa0b      	add	r2, sp, #44	; 0x2c
 8009894:	4621      	mov	r1, r4
 8009896:	4628      	mov	r0, r5
 8009898:	f000 f9d8 	bl	8009c4c <_printf_common>
 800989c:	3001      	adds	r0, #1
 800989e:	f040 8090 	bne.w	80099c2 <_printf_float+0x1e2>
 80098a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098a6:	b00d      	add	sp, #52	; 0x34
 80098a8:	ecbd 8b02 	vpop	{d8}
 80098ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b0:	4642      	mov	r2, r8
 80098b2:	464b      	mov	r3, r9
 80098b4:	4640      	mov	r0, r8
 80098b6:	4649      	mov	r1, r9
 80098b8:	f7f7 f938 	bl	8000b2c <__aeabi_dcmpun>
 80098bc:	b140      	cbz	r0, 80098d0 <_printf_float+0xf0>
 80098be:	464b      	mov	r3, r9
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	bfbc      	itt	lt
 80098c4:	232d      	movlt	r3, #45	; 0x2d
 80098c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098ca:	487f      	ldr	r0, [pc, #508]	; (8009ac8 <_printf_float+0x2e8>)
 80098cc:	4b7f      	ldr	r3, [pc, #508]	; (8009acc <_printf_float+0x2ec>)
 80098ce:	e7d1      	b.n	8009874 <_printf_float+0x94>
 80098d0:	6863      	ldr	r3, [r4, #4]
 80098d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80098d6:	9206      	str	r2, [sp, #24]
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	d13f      	bne.n	800995c <_printf_float+0x17c>
 80098dc:	2306      	movs	r3, #6
 80098de:	6063      	str	r3, [r4, #4]
 80098e0:	9b05      	ldr	r3, [sp, #20]
 80098e2:	6861      	ldr	r1, [r4, #4]
 80098e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098e8:	2300      	movs	r3, #0
 80098ea:	9303      	str	r3, [sp, #12]
 80098ec:	ab0a      	add	r3, sp, #40	; 0x28
 80098ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098f2:	ab09      	add	r3, sp, #36	; 0x24
 80098f4:	ec49 8b10 	vmov	d0, r8, r9
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	6022      	str	r2, [r4, #0]
 80098fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009900:	4628      	mov	r0, r5
 8009902:	f7ff fecd 	bl	80096a0 <__cvt>
 8009906:	9b06      	ldr	r3, [sp, #24]
 8009908:	9909      	ldr	r1, [sp, #36]	; 0x24
 800990a:	2b47      	cmp	r3, #71	; 0x47
 800990c:	4680      	mov	r8, r0
 800990e:	d108      	bne.n	8009922 <_printf_float+0x142>
 8009910:	1cc8      	adds	r0, r1, #3
 8009912:	db02      	blt.n	800991a <_printf_float+0x13a>
 8009914:	6863      	ldr	r3, [r4, #4]
 8009916:	4299      	cmp	r1, r3
 8009918:	dd41      	ble.n	800999e <_printf_float+0x1be>
 800991a:	f1ab 0b02 	sub.w	fp, fp, #2
 800991e:	fa5f fb8b 	uxtb.w	fp, fp
 8009922:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009926:	d820      	bhi.n	800996a <_printf_float+0x18a>
 8009928:	3901      	subs	r1, #1
 800992a:	465a      	mov	r2, fp
 800992c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009930:	9109      	str	r1, [sp, #36]	; 0x24
 8009932:	f7ff ff17 	bl	8009764 <__exponent>
 8009936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009938:	1813      	adds	r3, r2, r0
 800993a:	2a01      	cmp	r2, #1
 800993c:	4681      	mov	r9, r0
 800993e:	6123      	str	r3, [r4, #16]
 8009940:	dc02      	bgt.n	8009948 <_printf_float+0x168>
 8009942:	6822      	ldr	r2, [r4, #0]
 8009944:	07d2      	lsls	r2, r2, #31
 8009946:	d501      	bpl.n	800994c <_printf_float+0x16c>
 8009948:	3301      	adds	r3, #1
 800994a:	6123      	str	r3, [r4, #16]
 800994c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009950:	2b00      	cmp	r3, #0
 8009952:	d09c      	beq.n	800988e <_printf_float+0xae>
 8009954:	232d      	movs	r3, #45	; 0x2d
 8009956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800995a:	e798      	b.n	800988e <_printf_float+0xae>
 800995c:	9a06      	ldr	r2, [sp, #24]
 800995e:	2a47      	cmp	r2, #71	; 0x47
 8009960:	d1be      	bne.n	80098e0 <_printf_float+0x100>
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1bc      	bne.n	80098e0 <_printf_float+0x100>
 8009966:	2301      	movs	r3, #1
 8009968:	e7b9      	b.n	80098de <_printf_float+0xfe>
 800996a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800996e:	d118      	bne.n	80099a2 <_printf_float+0x1c2>
 8009970:	2900      	cmp	r1, #0
 8009972:	6863      	ldr	r3, [r4, #4]
 8009974:	dd0b      	ble.n	800998e <_printf_float+0x1ae>
 8009976:	6121      	str	r1, [r4, #16]
 8009978:	b913      	cbnz	r3, 8009980 <_printf_float+0x1a0>
 800997a:	6822      	ldr	r2, [r4, #0]
 800997c:	07d0      	lsls	r0, r2, #31
 800997e:	d502      	bpl.n	8009986 <_printf_float+0x1a6>
 8009980:	3301      	adds	r3, #1
 8009982:	440b      	add	r3, r1
 8009984:	6123      	str	r3, [r4, #16]
 8009986:	65a1      	str	r1, [r4, #88]	; 0x58
 8009988:	f04f 0900 	mov.w	r9, #0
 800998c:	e7de      	b.n	800994c <_printf_float+0x16c>
 800998e:	b913      	cbnz	r3, 8009996 <_printf_float+0x1b6>
 8009990:	6822      	ldr	r2, [r4, #0]
 8009992:	07d2      	lsls	r2, r2, #31
 8009994:	d501      	bpl.n	800999a <_printf_float+0x1ba>
 8009996:	3302      	adds	r3, #2
 8009998:	e7f4      	b.n	8009984 <_printf_float+0x1a4>
 800999a:	2301      	movs	r3, #1
 800999c:	e7f2      	b.n	8009984 <_printf_float+0x1a4>
 800999e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80099a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099a4:	4299      	cmp	r1, r3
 80099a6:	db05      	blt.n	80099b4 <_printf_float+0x1d4>
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	6121      	str	r1, [r4, #16]
 80099ac:	07d8      	lsls	r0, r3, #31
 80099ae:	d5ea      	bpl.n	8009986 <_printf_float+0x1a6>
 80099b0:	1c4b      	adds	r3, r1, #1
 80099b2:	e7e7      	b.n	8009984 <_printf_float+0x1a4>
 80099b4:	2900      	cmp	r1, #0
 80099b6:	bfd4      	ite	le
 80099b8:	f1c1 0202 	rsble	r2, r1, #2
 80099bc:	2201      	movgt	r2, #1
 80099be:	4413      	add	r3, r2
 80099c0:	e7e0      	b.n	8009984 <_printf_float+0x1a4>
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	055a      	lsls	r2, r3, #21
 80099c6:	d407      	bmi.n	80099d8 <_printf_float+0x1f8>
 80099c8:	6923      	ldr	r3, [r4, #16]
 80099ca:	4642      	mov	r2, r8
 80099cc:	4631      	mov	r1, r6
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	d12c      	bne.n	8009a30 <_printf_float+0x250>
 80099d6:	e764      	b.n	80098a2 <_printf_float+0xc2>
 80099d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099dc:	f240 80e0 	bls.w	8009ba0 <_printf_float+0x3c0>
 80099e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099e4:	2200      	movs	r2, #0
 80099e6:	2300      	movs	r3, #0
 80099e8:	f7f7 f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d034      	beq.n	8009a5a <_printf_float+0x27a>
 80099f0:	4a37      	ldr	r2, [pc, #220]	; (8009ad0 <_printf_float+0x2f0>)
 80099f2:	2301      	movs	r3, #1
 80099f4:	4631      	mov	r1, r6
 80099f6:	4628      	mov	r0, r5
 80099f8:	47b8      	blx	r7
 80099fa:	3001      	adds	r0, #1
 80099fc:	f43f af51 	beq.w	80098a2 <_printf_float+0xc2>
 8009a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a04:	429a      	cmp	r2, r3
 8009a06:	db02      	blt.n	8009a0e <_printf_float+0x22e>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	07d8      	lsls	r0, r3, #31
 8009a0c:	d510      	bpl.n	8009a30 <_printf_float+0x250>
 8009a0e:	ee18 3a10 	vmov	r3, s16
 8009a12:	4652      	mov	r2, sl
 8009a14:	4631      	mov	r1, r6
 8009a16:	4628      	mov	r0, r5
 8009a18:	47b8      	blx	r7
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	f43f af41 	beq.w	80098a2 <_printf_float+0xc2>
 8009a20:	f04f 0800 	mov.w	r8, #0
 8009a24:	f104 091a 	add.w	r9, r4, #26
 8009a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	4543      	cmp	r3, r8
 8009a2e:	dc09      	bgt.n	8009a44 <_printf_float+0x264>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	079b      	lsls	r3, r3, #30
 8009a34:	f100 8105 	bmi.w	8009c42 <_printf_float+0x462>
 8009a38:	68e0      	ldr	r0, [r4, #12]
 8009a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a3c:	4298      	cmp	r0, r3
 8009a3e:	bfb8      	it	lt
 8009a40:	4618      	movlt	r0, r3
 8009a42:	e730      	b.n	80098a6 <_printf_float+0xc6>
 8009a44:	2301      	movs	r3, #1
 8009a46:	464a      	mov	r2, r9
 8009a48:	4631      	mov	r1, r6
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	47b8      	blx	r7
 8009a4e:	3001      	adds	r0, #1
 8009a50:	f43f af27 	beq.w	80098a2 <_printf_float+0xc2>
 8009a54:	f108 0801 	add.w	r8, r8, #1
 8009a58:	e7e6      	b.n	8009a28 <_printf_float+0x248>
 8009a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	dc39      	bgt.n	8009ad4 <_printf_float+0x2f4>
 8009a60:	4a1b      	ldr	r2, [pc, #108]	; (8009ad0 <_printf_float+0x2f0>)
 8009a62:	2301      	movs	r3, #1
 8009a64:	4631      	mov	r1, r6
 8009a66:	4628      	mov	r0, r5
 8009a68:	47b8      	blx	r7
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	f43f af19 	beq.w	80098a2 <_printf_float+0xc2>
 8009a70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a74:	4313      	orrs	r3, r2
 8009a76:	d102      	bne.n	8009a7e <_printf_float+0x29e>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	07d9      	lsls	r1, r3, #31
 8009a7c:	d5d8      	bpl.n	8009a30 <_printf_float+0x250>
 8009a7e:	ee18 3a10 	vmov	r3, s16
 8009a82:	4652      	mov	r2, sl
 8009a84:	4631      	mov	r1, r6
 8009a86:	4628      	mov	r0, r5
 8009a88:	47b8      	blx	r7
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	f43f af09 	beq.w	80098a2 <_printf_float+0xc2>
 8009a90:	f04f 0900 	mov.w	r9, #0
 8009a94:	f104 0a1a 	add.w	sl, r4, #26
 8009a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a9a:	425b      	negs	r3, r3
 8009a9c:	454b      	cmp	r3, r9
 8009a9e:	dc01      	bgt.n	8009aa4 <_printf_float+0x2c4>
 8009aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa2:	e792      	b.n	80099ca <_printf_float+0x1ea>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	4652      	mov	r2, sl
 8009aa8:	4631      	mov	r1, r6
 8009aaa:	4628      	mov	r0, r5
 8009aac:	47b8      	blx	r7
 8009aae:	3001      	adds	r0, #1
 8009ab0:	f43f aef7 	beq.w	80098a2 <_printf_float+0xc2>
 8009ab4:	f109 0901 	add.w	r9, r9, #1
 8009ab8:	e7ee      	b.n	8009a98 <_printf_float+0x2b8>
 8009aba:	bf00      	nop
 8009abc:	7fefffff 	.word	0x7fefffff
 8009ac0:	0800c6ed 	.word	0x0800c6ed
 8009ac4:	0800c6f1 	.word	0x0800c6f1
 8009ac8:	0800c6f9 	.word	0x0800c6f9
 8009acc:	0800c6f5 	.word	0x0800c6f5
 8009ad0:	0800c6fd 	.word	0x0800c6fd
 8009ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	bfa8      	it	ge
 8009adc:	461a      	movge	r2, r3
 8009ade:	2a00      	cmp	r2, #0
 8009ae0:	4691      	mov	r9, r2
 8009ae2:	dc37      	bgt.n	8009b54 <_printf_float+0x374>
 8009ae4:	f04f 0b00 	mov.w	fp, #0
 8009ae8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aec:	f104 021a 	add.w	r2, r4, #26
 8009af0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009af2:	9305      	str	r3, [sp, #20]
 8009af4:	eba3 0309 	sub.w	r3, r3, r9
 8009af8:	455b      	cmp	r3, fp
 8009afa:	dc33      	bgt.n	8009b64 <_printf_float+0x384>
 8009afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b00:	429a      	cmp	r2, r3
 8009b02:	db3b      	blt.n	8009b7c <_printf_float+0x39c>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	07da      	lsls	r2, r3, #31
 8009b08:	d438      	bmi.n	8009b7c <_printf_float+0x39c>
 8009b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b0c:	9a05      	ldr	r2, [sp, #20]
 8009b0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b10:	1a9a      	subs	r2, r3, r2
 8009b12:	eba3 0901 	sub.w	r9, r3, r1
 8009b16:	4591      	cmp	r9, r2
 8009b18:	bfa8      	it	ge
 8009b1a:	4691      	movge	r9, r2
 8009b1c:	f1b9 0f00 	cmp.w	r9, #0
 8009b20:	dc35      	bgt.n	8009b8e <_printf_float+0x3ae>
 8009b22:	f04f 0800 	mov.w	r8, #0
 8009b26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b2a:	f104 0a1a 	add.w	sl, r4, #26
 8009b2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b32:	1a9b      	subs	r3, r3, r2
 8009b34:	eba3 0309 	sub.w	r3, r3, r9
 8009b38:	4543      	cmp	r3, r8
 8009b3a:	f77f af79 	ble.w	8009a30 <_printf_float+0x250>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4652      	mov	r2, sl
 8009b42:	4631      	mov	r1, r6
 8009b44:	4628      	mov	r0, r5
 8009b46:	47b8      	blx	r7
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f43f aeaa 	beq.w	80098a2 <_printf_float+0xc2>
 8009b4e:	f108 0801 	add.w	r8, r8, #1
 8009b52:	e7ec      	b.n	8009b2e <_printf_float+0x34e>
 8009b54:	4613      	mov	r3, r2
 8009b56:	4631      	mov	r1, r6
 8009b58:	4642      	mov	r2, r8
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	d1c0      	bne.n	8009ae4 <_printf_float+0x304>
 8009b62:	e69e      	b.n	80098a2 <_printf_float+0xc2>
 8009b64:	2301      	movs	r3, #1
 8009b66:	4631      	mov	r1, r6
 8009b68:	4628      	mov	r0, r5
 8009b6a:	9205      	str	r2, [sp, #20]
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f43f ae97 	beq.w	80098a2 <_printf_float+0xc2>
 8009b74:	9a05      	ldr	r2, [sp, #20]
 8009b76:	f10b 0b01 	add.w	fp, fp, #1
 8009b7a:	e7b9      	b.n	8009af0 <_printf_float+0x310>
 8009b7c:	ee18 3a10 	vmov	r3, s16
 8009b80:	4652      	mov	r2, sl
 8009b82:	4631      	mov	r1, r6
 8009b84:	4628      	mov	r0, r5
 8009b86:	47b8      	blx	r7
 8009b88:	3001      	adds	r0, #1
 8009b8a:	d1be      	bne.n	8009b0a <_printf_float+0x32a>
 8009b8c:	e689      	b.n	80098a2 <_printf_float+0xc2>
 8009b8e:	9a05      	ldr	r2, [sp, #20]
 8009b90:	464b      	mov	r3, r9
 8009b92:	4442      	add	r2, r8
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	d1c1      	bne.n	8009b22 <_printf_float+0x342>
 8009b9e:	e680      	b.n	80098a2 <_printf_float+0xc2>
 8009ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ba2:	2a01      	cmp	r2, #1
 8009ba4:	dc01      	bgt.n	8009baa <_printf_float+0x3ca>
 8009ba6:	07db      	lsls	r3, r3, #31
 8009ba8:	d538      	bpl.n	8009c1c <_printf_float+0x43c>
 8009baa:	2301      	movs	r3, #1
 8009bac:	4642      	mov	r2, r8
 8009bae:	4631      	mov	r1, r6
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	47b8      	blx	r7
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	f43f ae74 	beq.w	80098a2 <_printf_float+0xc2>
 8009bba:	ee18 3a10 	vmov	r3, s16
 8009bbe:	4652      	mov	r2, sl
 8009bc0:	4631      	mov	r1, r6
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	47b8      	blx	r7
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	f43f ae6b 	beq.w	80098a2 <_printf_float+0xc2>
 8009bcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f7f6 ff78 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bd8:	b9d8      	cbnz	r0, 8009c12 <_printf_float+0x432>
 8009bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bdc:	f108 0201 	add.w	r2, r8, #1
 8009be0:	3b01      	subs	r3, #1
 8009be2:	4631      	mov	r1, r6
 8009be4:	4628      	mov	r0, r5
 8009be6:	47b8      	blx	r7
 8009be8:	3001      	adds	r0, #1
 8009bea:	d10e      	bne.n	8009c0a <_printf_float+0x42a>
 8009bec:	e659      	b.n	80098a2 <_printf_float+0xc2>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	4652      	mov	r2, sl
 8009bf2:	4631      	mov	r1, r6
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	47b8      	blx	r7
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	f43f ae52 	beq.w	80098a2 <_printf_float+0xc2>
 8009bfe:	f108 0801 	add.w	r8, r8, #1
 8009c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c04:	3b01      	subs	r3, #1
 8009c06:	4543      	cmp	r3, r8
 8009c08:	dcf1      	bgt.n	8009bee <_printf_float+0x40e>
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c10:	e6dc      	b.n	80099cc <_printf_float+0x1ec>
 8009c12:	f04f 0800 	mov.w	r8, #0
 8009c16:	f104 0a1a 	add.w	sl, r4, #26
 8009c1a:	e7f2      	b.n	8009c02 <_printf_float+0x422>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	4642      	mov	r2, r8
 8009c20:	e7df      	b.n	8009be2 <_printf_float+0x402>
 8009c22:	2301      	movs	r3, #1
 8009c24:	464a      	mov	r2, r9
 8009c26:	4631      	mov	r1, r6
 8009c28:	4628      	mov	r0, r5
 8009c2a:	47b8      	blx	r7
 8009c2c:	3001      	adds	r0, #1
 8009c2e:	f43f ae38 	beq.w	80098a2 <_printf_float+0xc2>
 8009c32:	f108 0801 	add.w	r8, r8, #1
 8009c36:	68e3      	ldr	r3, [r4, #12]
 8009c38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c3a:	1a5b      	subs	r3, r3, r1
 8009c3c:	4543      	cmp	r3, r8
 8009c3e:	dcf0      	bgt.n	8009c22 <_printf_float+0x442>
 8009c40:	e6fa      	b.n	8009a38 <_printf_float+0x258>
 8009c42:	f04f 0800 	mov.w	r8, #0
 8009c46:	f104 0919 	add.w	r9, r4, #25
 8009c4a:	e7f4      	b.n	8009c36 <_printf_float+0x456>

08009c4c <_printf_common>:
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	4616      	mov	r6, r2
 8009c52:	4699      	mov	r9, r3
 8009c54:	688a      	ldr	r2, [r1, #8]
 8009c56:	690b      	ldr	r3, [r1, #16]
 8009c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	bfb8      	it	lt
 8009c60:	4613      	movlt	r3, r2
 8009c62:	6033      	str	r3, [r6, #0]
 8009c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c68:	4607      	mov	r7, r0
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	b10a      	cbz	r2, 8009c72 <_printf_common+0x26>
 8009c6e:	3301      	adds	r3, #1
 8009c70:	6033      	str	r3, [r6, #0]
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	0699      	lsls	r1, r3, #26
 8009c76:	bf42      	ittt	mi
 8009c78:	6833      	ldrmi	r3, [r6, #0]
 8009c7a:	3302      	addmi	r3, #2
 8009c7c:	6033      	strmi	r3, [r6, #0]
 8009c7e:	6825      	ldr	r5, [r4, #0]
 8009c80:	f015 0506 	ands.w	r5, r5, #6
 8009c84:	d106      	bne.n	8009c94 <_printf_common+0x48>
 8009c86:	f104 0a19 	add.w	sl, r4, #25
 8009c8a:	68e3      	ldr	r3, [r4, #12]
 8009c8c:	6832      	ldr	r2, [r6, #0]
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	42ab      	cmp	r3, r5
 8009c92:	dc26      	bgt.n	8009ce2 <_printf_common+0x96>
 8009c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c98:	1e13      	subs	r3, r2, #0
 8009c9a:	6822      	ldr	r2, [r4, #0]
 8009c9c:	bf18      	it	ne
 8009c9e:	2301      	movne	r3, #1
 8009ca0:	0692      	lsls	r2, r2, #26
 8009ca2:	d42b      	bmi.n	8009cfc <_printf_common+0xb0>
 8009ca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ca8:	4649      	mov	r1, r9
 8009caa:	4638      	mov	r0, r7
 8009cac:	47c0      	blx	r8
 8009cae:	3001      	adds	r0, #1
 8009cb0:	d01e      	beq.n	8009cf0 <_printf_common+0xa4>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	68e5      	ldr	r5, [r4, #12]
 8009cb6:	6832      	ldr	r2, [r6, #0]
 8009cb8:	f003 0306 	and.w	r3, r3, #6
 8009cbc:	2b04      	cmp	r3, #4
 8009cbe:	bf08      	it	eq
 8009cc0:	1aad      	subeq	r5, r5, r2
 8009cc2:	68a3      	ldr	r3, [r4, #8]
 8009cc4:	6922      	ldr	r2, [r4, #16]
 8009cc6:	bf0c      	ite	eq
 8009cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ccc:	2500      	movne	r5, #0
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	bfc4      	itt	gt
 8009cd2:	1a9b      	subgt	r3, r3, r2
 8009cd4:	18ed      	addgt	r5, r5, r3
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	341a      	adds	r4, #26
 8009cda:	42b5      	cmp	r5, r6
 8009cdc:	d11a      	bne.n	8009d14 <_printf_common+0xc8>
 8009cde:	2000      	movs	r0, #0
 8009ce0:	e008      	b.n	8009cf4 <_printf_common+0xa8>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	4649      	mov	r1, r9
 8009ce8:	4638      	mov	r0, r7
 8009cea:	47c0      	blx	r8
 8009cec:	3001      	adds	r0, #1
 8009cee:	d103      	bne.n	8009cf8 <_printf_common+0xac>
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf8:	3501      	adds	r5, #1
 8009cfa:	e7c6      	b.n	8009c8a <_printf_common+0x3e>
 8009cfc:	18e1      	adds	r1, r4, r3
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	2030      	movs	r0, #48	; 0x30
 8009d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d06:	4422      	add	r2, r4
 8009d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d10:	3302      	adds	r3, #2
 8009d12:	e7c7      	b.n	8009ca4 <_printf_common+0x58>
 8009d14:	2301      	movs	r3, #1
 8009d16:	4622      	mov	r2, r4
 8009d18:	4649      	mov	r1, r9
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	47c0      	blx	r8
 8009d1e:	3001      	adds	r0, #1
 8009d20:	d0e6      	beq.n	8009cf0 <_printf_common+0xa4>
 8009d22:	3601      	adds	r6, #1
 8009d24:	e7d9      	b.n	8009cda <_printf_common+0x8e>
	...

08009d28 <_printf_i>:
 8009d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	7e0f      	ldrb	r7, [r1, #24]
 8009d2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d30:	2f78      	cmp	r7, #120	; 0x78
 8009d32:	4691      	mov	r9, r2
 8009d34:	4680      	mov	r8, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	469a      	mov	sl, r3
 8009d3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d3e:	d807      	bhi.n	8009d50 <_printf_i+0x28>
 8009d40:	2f62      	cmp	r7, #98	; 0x62
 8009d42:	d80a      	bhi.n	8009d5a <_printf_i+0x32>
 8009d44:	2f00      	cmp	r7, #0
 8009d46:	f000 80d8 	beq.w	8009efa <_printf_i+0x1d2>
 8009d4a:	2f58      	cmp	r7, #88	; 0x58
 8009d4c:	f000 80a3 	beq.w	8009e96 <_printf_i+0x16e>
 8009d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d58:	e03a      	b.n	8009dd0 <_printf_i+0xa8>
 8009d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d5e:	2b15      	cmp	r3, #21
 8009d60:	d8f6      	bhi.n	8009d50 <_printf_i+0x28>
 8009d62:	a101      	add	r1, pc, #4	; (adr r1, 8009d68 <_printf_i+0x40>)
 8009d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d68:	08009dc1 	.word	0x08009dc1
 8009d6c:	08009dd5 	.word	0x08009dd5
 8009d70:	08009d51 	.word	0x08009d51
 8009d74:	08009d51 	.word	0x08009d51
 8009d78:	08009d51 	.word	0x08009d51
 8009d7c:	08009d51 	.word	0x08009d51
 8009d80:	08009dd5 	.word	0x08009dd5
 8009d84:	08009d51 	.word	0x08009d51
 8009d88:	08009d51 	.word	0x08009d51
 8009d8c:	08009d51 	.word	0x08009d51
 8009d90:	08009d51 	.word	0x08009d51
 8009d94:	08009ee1 	.word	0x08009ee1
 8009d98:	08009e05 	.word	0x08009e05
 8009d9c:	08009ec3 	.word	0x08009ec3
 8009da0:	08009d51 	.word	0x08009d51
 8009da4:	08009d51 	.word	0x08009d51
 8009da8:	08009f03 	.word	0x08009f03
 8009dac:	08009d51 	.word	0x08009d51
 8009db0:	08009e05 	.word	0x08009e05
 8009db4:	08009d51 	.word	0x08009d51
 8009db8:	08009d51 	.word	0x08009d51
 8009dbc:	08009ecb 	.word	0x08009ecb
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	1d1a      	adds	r2, r3, #4
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	602a      	str	r2, [r5, #0]
 8009dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e0a3      	b.n	8009f1c <_printf_i+0x1f4>
 8009dd4:	6820      	ldr	r0, [r4, #0]
 8009dd6:	6829      	ldr	r1, [r5, #0]
 8009dd8:	0606      	lsls	r6, r0, #24
 8009dda:	f101 0304 	add.w	r3, r1, #4
 8009dde:	d50a      	bpl.n	8009df6 <_printf_i+0xce>
 8009de0:	680e      	ldr	r6, [r1, #0]
 8009de2:	602b      	str	r3, [r5, #0]
 8009de4:	2e00      	cmp	r6, #0
 8009de6:	da03      	bge.n	8009df0 <_printf_i+0xc8>
 8009de8:	232d      	movs	r3, #45	; 0x2d
 8009dea:	4276      	negs	r6, r6
 8009dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df0:	485e      	ldr	r0, [pc, #376]	; (8009f6c <_printf_i+0x244>)
 8009df2:	230a      	movs	r3, #10
 8009df4:	e019      	b.n	8009e2a <_printf_i+0x102>
 8009df6:	680e      	ldr	r6, [r1, #0]
 8009df8:	602b      	str	r3, [r5, #0]
 8009dfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009dfe:	bf18      	it	ne
 8009e00:	b236      	sxthne	r6, r6
 8009e02:	e7ef      	b.n	8009de4 <_printf_i+0xbc>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	6820      	ldr	r0, [r4, #0]
 8009e08:	1d19      	adds	r1, r3, #4
 8009e0a:	6029      	str	r1, [r5, #0]
 8009e0c:	0601      	lsls	r1, r0, #24
 8009e0e:	d501      	bpl.n	8009e14 <_printf_i+0xec>
 8009e10:	681e      	ldr	r6, [r3, #0]
 8009e12:	e002      	b.n	8009e1a <_printf_i+0xf2>
 8009e14:	0646      	lsls	r6, r0, #25
 8009e16:	d5fb      	bpl.n	8009e10 <_printf_i+0xe8>
 8009e18:	881e      	ldrh	r6, [r3, #0]
 8009e1a:	4854      	ldr	r0, [pc, #336]	; (8009f6c <_printf_i+0x244>)
 8009e1c:	2f6f      	cmp	r7, #111	; 0x6f
 8009e1e:	bf0c      	ite	eq
 8009e20:	2308      	moveq	r3, #8
 8009e22:	230a      	movne	r3, #10
 8009e24:	2100      	movs	r1, #0
 8009e26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e2a:	6865      	ldr	r5, [r4, #4]
 8009e2c:	60a5      	str	r5, [r4, #8]
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	bfa2      	ittt	ge
 8009e32:	6821      	ldrge	r1, [r4, #0]
 8009e34:	f021 0104 	bicge.w	r1, r1, #4
 8009e38:	6021      	strge	r1, [r4, #0]
 8009e3a:	b90e      	cbnz	r6, 8009e40 <_printf_i+0x118>
 8009e3c:	2d00      	cmp	r5, #0
 8009e3e:	d04d      	beq.n	8009edc <_printf_i+0x1b4>
 8009e40:	4615      	mov	r5, r2
 8009e42:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e46:	fb03 6711 	mls	r7, r3, r1, r6
 8009e4a:	5dc7      	ldrb	r7, [r0, r7]
 8009e4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e50:	4637      	mov	r7, r6
 8009e52:	42bb      	cmp	r3, r7
 8009e54:	460e      	mov	r6, r1
 8009e56:	d9f4      	bls.n	8009e42 <_printf_i+0x11a>
 8009e58:	2b08      	cmp	r3, #8
 8009e5a:	d10b      	bne.n	8009e74 <_printf_i+0x14c>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	07de      	lsls	r6, r3, #31
 8009e60:	d508      	bpl.n	8009e74 <_printf_i+0x14c>
 8009e62:	6923      	ldr	r3, [r4, #16]
 8009e64:	6861      	ldr	r1, [r4, #4]
 8009e66:	4299      	cmp	r1, r3
 8009e68:	bfde      	ittt	le
 8009e6a:	2330      	movle	r3, #48	; 0x30
 8009e6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009e74:	1b52      	subs	r2, r2, r5
 8009e76:	6122      	str	r2, [r4, #16]
 8009e78:	f8cd a000 	str.w	sl, [sp]
 8009e7c:	464b      	mov	r3, r9
 8009e7e:	aa03      	add	r2, sp, #12
 8009e80:	4621      	mov	r1, r4
 8009e82:	4640      	mov	r0, r8
 8009e84:	f7ff fee2 	bl	8009c4c <_printf_common>
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d14c      	bne.n	8009f26 <_printf_i+0x1fe>
 8009e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e90:	b004      	add	sp, #16
 8009e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e96:	4835      	ldr	r0, [pc, #212]	; (8009f6c <_printf_i+0x244>)
 8009e98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e9c:	6829      	ldr	r1, [r5, #0]
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ea4:	6029      	str	r1, [r5, #0]
 8009ea6:	061d      	lsls	r5, r3, #24
 8009ea8:	d514      	bpl.n	8009ed4 <_printf_i+0x1ac>
 8009eaa:	07df      	lsls	r7, r3, #31
 8009eac:	bf44      	itt	mi
 8009eae:	f043 0320 	orrmi.w	r3, r3, #32
 8009eb2:	6023      	strmi	r3, [r4, #0]
 8009eb4:	b91e      	cbnz	r6, 8009ebe <_printf_i+0x196>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	f023 0320 	bic.w	r3, r3, #32
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	2310      	movs	r3, #16
 8009ec0:	e7b0      	b.n	8009e24 <_printf_i+0xfc>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	f043 0320 	orr.w	r3, r3, #32
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	2378      	movs	r3, #120	; 0x78
 8009ecc:	4828      	ldr	r0, [pc, #160]	; (8009f70 <_printf_i+0x248>)
 8009ece:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ed2:	e7e3      	b.n	8009e9c <_printf_i+0x174>
 8009ed4:	0659      	lsls	r1, r3, #25
 8009ed6:	bf48      	it	mi
 8009ed8:	b2b6      	uxthmi	r6, r6
 8009eda:	e7e6      	b.n	8009eaa <_printf_i+0x182>
 8009edc:	4615      	mov	r5, r2
 8009ede:	e7bb      	b.n	8009e58 <_printf_i+0x130>
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	6826      	ldr	r6, [r4, #0]
 8009ee4:	6961      	ldr	r1, [r4, #20]
 8009ee6:	1d18      	adds	r0, r3, #4
 8009ee8:	6028      	str	r0, [r5, #0]
 8009eea:	0635      	lsls	r5, r6, #24
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	d501      	bpl.n	8009ef4 <_printf_i+0x1cc>
 8009ef0:	6019      	str	r1, [r3, #0]
 8009ef2:	e002      	b.n	8009efa <_printf_i+0x1d2>
 8009ef4:	0670      	lsls	r0, r6, #25
 8009ef6:	d5fb      	bpl.n	8009ef0 <_printf_i+0x1c8>
 8009ef8:	8019      	strh	r1, [r3, #0]
 8009efa:	2300      	movs	r3, #0
 8009efc:	6123      	str	r3, [r4, #16]
 8009efe:	4615      	mov	r5, r2
 8009f00:	e7ba      	b.n	8009e78 <_printf_i+0x150>
 8009f02:	682b      	ldr	r3, [r5, #0]
 8009f04:	1d1a      	adds	r2, r3, #4
 8009f06:	602a      	str	r2, [r5, #0]
 8009f08:	681d      	ldr	r5, [r3, #0]
 8009f0a:	6862      	ldr	r2, [r4, #4]
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f7f6 f966 	bl	80001e0 <memchr>
 8009f14:	b108      	cbz	r0, 8009f1a <_printf_i+0x1f2>
 8009f16:	1b40      	subs	r0, r0, r5
 8009f18:	6060      	str	r0, [r4, #4]
 8009f1a:	6863      	ldr	r3, [r4, #4]
 8009f1c:	6123      	str	r3, [r4, #16]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f24:	e7a8      	b.n	8009e78 <_printf_i+0x150>
 8009f26:	6923      	ldr	r3, [r4, #16]
 8009f28:	462a      	mov	r2, r5
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	47d0      	blx	sl
 8009f30:	3001      	adds	r0, #1
 8009f32:	d0ab      	beq.n	8009e8c <_printf_i+0x164>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	079b      	lsls	r3, r3, #30
 8009f38:	d413      	bmi.n	8009f62 <_printf_i+0x23a>
 8009f3a:	68e0      	ldr	r0, [r4, #12]
 8009f3c:	9b03      	ldr	r3, [sp, #12]
 8009f3e:	4298      	cmp	r0, r3
 8009f40:	bfb8      	it	lt
 8009f42:	4618      	movlt	r0, r3
 8009f44:	e7a4      	b.n	8009e90 <_printf_i+0x168>
 8009f46:	2301      	movs	r3, #1
 8009f48:	4632      	mov	r2, r6
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	47d0      	blx	sl
 8009f50:	3001      	adds	r0, #1
 8009f52:	d09b      	beq.n	8009e8c <_printf_i+0x164>
 8009f54:	3501      	adds	r5, #1
 8009f56:	68e3      	ldr	r3, [r4, #12]
 8009f58:	9903      	ldr	r1, [sp, #12]
 8009f5a:	1a5b      	subs	r3, r3, r1
 8009f5c:	42ab      	cmp	r3, r5
 8009f5e:	dcf2      	bgt.n	8009f46 <_printf_i+0x21e>
 8009f60:	e7eb      	b.n	8009f3a <_printf_i+0x212>
 8009f62:	2500      	movs	r5, #0
 8009f64:	f104 0619 	add.w	r6, r4, #25
 8009f68:	e7f5      	b.n	8009f56 <_printf_i+0x22e>
 8009f6a:	bf00      	nop
 8009f6c:	0800c6ff 	.word	0x0800c6ff
 8009f70:	0800c710 	.word	0x0800c710

08009f74 <siprintf>:
 8009f74:	b40e      	push	{r1, r2, r3}
 8009f76:	b500      	push	{lr}
 8009f78:	b09c      	sub	sp, #112	; 0x70
 8009f7a:	ab1d      	add	r3, sp, #116	; 0x74
 8009f7c:	9002      	str	r0, [sp, #8]
 8009f7e:	9006      	str	r0, [sp, #24]
 8009f80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f84:	4809      	ldr	r0, [pc, #36]	; (8009fac <siprintf+0x38>)
 8009f86:	9107      	str	r1, [sp, #28]
 8009f88:	9104      	str	r1, [sp, #16]
 8009f8a:	4909      	ldr	r1, [pc, #36]	; (8009fb0 <siprintf+0x3c>)
 8009f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f90:	9105      	str	r1, [sp, #20]
 8009f92:	6800      	ldr	r0, [r0, #0]
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	a902      	add	r1, sp, #8
 8009f98:	f001 fe96 	bl	800bcc8 <_svfiprintf_r>
 8009f9c:	9b02      	ldr	r3, [sp, #8]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	b01c      	add	sp, #112	; 0x70
 8009fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa8:	b003      	add	sp, #12
 8009faa:	4770      	bx	lr
 8009fac:	20000010 	.word	0x20000010
 8009fb0:	ffff0208 	.word	0xffff0208

08009fb4 <__swbuf_r>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	460e      	mov	r6, r1
 8009fb8:	4614      	mov	r4, r2
 8009fba:	4605      	mov	r5, r0
 8009fbc:	b118      	cbz	r0, 8009fc6 <__swbuf_r+0x12>
 8009fbe:	6983      	ldr	r3, [r0, #24]
 8009fc0:	b90b      	cbnz	r3, 8009fc6 <__swbuf_r+0x12>
 8009fc2:	f001 f851 	bl	800b068 <__sinit>
 8009fc6:	4b21      	ldr	r3, [pc, #132]	; (800a04c <__swbuf_r+0x98>)
 8009fc8:	429c      	cmp	r4, r3
 8009fca:	d12b      	bne.n	800a024 <__swbuf_r+0x70>
 8009fcc:	686c      	ldr	r4, [r5, #4]
 8009fce:	69a3      	ldr	r3, [r4, #24]
 8009fd0:	60a3      	str	r3, [r4, #8]
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	071a      	lsls	r2, r3, #28
 8009fd6:	d52f      	bpl.n	800a038 <__swbuf_r+0x84>
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	b36b      	cbz	r3, 800a038 <__swbuf_r+0x84>
 8009fdc:	6923      	ldr	r3, [r4, #16]
 8009fde:	6820      	ldr	r0, [r4, #0]
 8009fe0:	1ac0      	subs	r0, r0, r3
 8009fe2:	6963      	ldr	r3, [r4, #20]
 8009fe4:	b2f6      	uxtb	r6, r6
 8009fe6:	4283      	cmp	r3, r0
 8009fe8:	4637      	mov	r7, r6
 8009fea:	dc04      	bgt.n	8009ff6 <__swbuf_r+0x42>
 8009fec:	4621      	mov	r1, r4
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f000 ffa6 	bl	800af40 <_fflush_r>
 8009ff4:	bb30      	cbnz	r0, 800a044 <__swbuf_r+0x90>
 8009ff6:	68a3      	ldr	r3, [r4, #8]
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	60a3      	str	r3, [r4, #8]
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	6022      	str	r2, [r4, #0]
 800a002:	701e      	strb	r6, [r3, #0]
 800a004:	6963      	ldr	r3, [r4, #20]
 800a006:	3001      	adds	r0, #1
 800a008:	4283      	cmp	r3, r0
 800a00a:	d004      	beq.n	800a016 <__swbuf_r+0x62>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	07db      	lsls	r3, r3, #31
 800a010:	d506      	bpl.n	800a020 <__swbuf_r+0x6c>
 800a012:	2e0a      	cmp	r6, #10
 800a014:	d104      	bne.n	800a020 <__swbuf_r+0x6c>
 800a016:	4621      	mov	r1, r4
 800a018:	4628      	mov	r0, r5
 800a01a:	f000 ff91 	bl	800af40 <_fflush_r>
 800a01e:	b988      	cbnz	r0, 800a044 <__swbuf_r+0x90>
 800a020:	4638      	mov	r0, r7
 800a022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a024:	4b0a      	ldr	r3, [pc, #40]	; (800a050 <__swbuf_r+0x9c>)
 800a026:	429c      	cmp	r4, r3
 800a028:	d101      	bne.n	800a02e <__swbuf_r+0x7a>
 800a02a:	68ac      	ldr	r4, [r5, #8]
 800a02c:	e7cf      	b.n	8009fce <__swbuf_r+0x1a>
 800a02e:	4b09      	ldr	r3, [pc, #36]	; (800a054 <__swbuf_r+0xa0>)
 800a030:	429c      	cmp	r4, r3
 800a032:	bf08      	it	eq
 800a034:	68ec      	ldreq	r4, [r5, #12]
 800a036:	e7ca      	b.n	8009fce <__swbuf_r+0x1a>
 800a038:	4621      	mov	r1, r4
 800a03a:	4628      	mov	r0, r5
 800a03c:	f000 f80c 	bl	800a058 <__swsetup_r>
 800a040:	2800      	cmp	r0, #0
 800a042:	d0cb      	beq.n	8009fdc <__swbuf_r+0x28>
 800a044:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a048:	e7ea      	b.n	800a020 <__swbuf_r+0x6c>
 800a04a:	bf00      	nop
 800a04c:	0800c7d4 	.word	0x0800c7d4
 800a050:	0800c7f4 	.word	0x0800c7f4
 800a054:	0800c7b4 	.word	0x0800c7b4

0800a058 <__swsetup_r>:
 800a058:	4b32      	ldr	r3, [pc, #200]	; (800a124 <__swsetup_r+0xcc>)
 800a05a:	b570      	push	{r4, r5, r6, lr}
 800a05c:	681d      	ldr	r5, [r3, #0]
 800a05e:	4606      	mov	r6, r0
 800a060:	460c      	mov	r4, r1
 800a062:	b125      	cbz	r5, 800a06e <__swsetup_r+0x16>
 800a064:	69ab      	ldr	r3, [r5, #24]
 800a066:	b913      	cbnz	r3, 800a06e <__swsetup_r+0x16>
 800a068:	4628      	mov	r0, r5
 800a06a:	f000 fffd 	bl	800b068 <__sinit>
 800a06e:	4b2e      	ldr	r3, [pc, #184]	; (800a128 <__swsetup_r+0xd0>)
 800a070:	429c      	cmp	r4, r3
 800a072:	d10f      	bne.n	800a094 <__swsetup_r+0x3c>
 800a074:	686c      	ldr	r4, [r5, #4]
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a07c:	0719      	lsls	r1, r3, #28
 800a07e:	d42c      	bmi.n	800a0da <__swsetup_r+0x82>
 800a080:	06dd      	lsls	r5, r3, #27
 800a082:	d411      	bmi.n	800a0a8 <__swsetup_r+0x50>
 800a084:	2309      	movs	r3, #9
 800a086:	6033      	str	r3, [r6, #0]
 800a088:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a08c:	81a3      	strh	r3, [r4, #12]
 800a08e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a092:	e03e      	b.n	800a112 <__swsetup_r+0xba>
 800a094:	4b25      	ldr	r3, [pc, #148]	; (800a12c <__swsetup_r+0xd4>)
 800a096:	429c      	cmp	r4, r3
 800a098:	d101      	bne.n	800a09e <__swsetup_r+0x46>
 800a09a:	68ac      	ldr	r4, [r5, #8]
 800a09c:	e7eb      	b.n	800a076 <__swsetup_r+0x1e>
 800a09e:	4b24      	ldr	r3, [pc, #144]	; (800a130 <__swsetup_r+0xd8>)
 800a0a0:	429c      	cmp	r4, r3
 800a0a2:	bf08      	it	eq
 800a0a4:	68ec      	ldreq	r4, [r5, #12]
 800a0a6:	e7e6      	b.n	800a076 <__swsetup_r+0x1e>
 800a0a8:	0758      	lsls	r0, r3, #29
 800a0aa:	d512      	bpl.n	800a0d2 <__swsetup_r+0x7a>
 800a0ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ae:	b141      	cbz	r1, 800a0c2 <__swsetup_r+0x6a>
 800a0b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0b4:	4299      	cmp	r1, r3
 800a0b6:	d002      	beq.n	800a0be <__swsetup_r+0x66>
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f001 fc9b 	bl	800b9f4 <_free_r>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6363      	str	r3, [r4, #52]	; 0x34
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0c8:	81a3      	strh	r3, [r4, #12]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	6063      	str	r3, [r4, #4]
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	f043 0308 	orr.w	r3, r3, #8
 800a0d8:	81a3      	strh	r3, [r4, #12]
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	b94b      	cbnz	r3, 800a0f2 <__swsetup_r+0x9a>
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0e8:	d003      	beq.n	800a0f2 <__swsetup_r+0x9a>
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f001 f885 	bl	800b1fc <__smakebuf_r>
 800a0f2:	89a0      	ldrh	r0, [r4, #12]
 800a0f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0f8:	f010 0301 	ands.w	r3, r0, #1
 800a0fc:	d00a      	beq.n	800a114 <__swsetup_r+0xbc>
 800a0fe:	2300      	movs	r3, #0
 800a100:	60a3      	str	r3, [r4, #8]
 800a102:	6963      	ldr	r3, [r4, #20]
 800a104:	425b      	negs	r3, r3
 800a106:	61a3      	str	r3, [r4, #24]
 800a108:	6923      	ldr	r3, [r4, #16]
 800a10a:	b943      	cbnz	r3, 800a11e <__swsetup_r+0xc6>
 800a10c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a110:	d1ba      	bne.n	800a088 <__swsetup_r+0x30>
 800a112:	bd70      	pop	{r4, r5, r6, pc}
 800a114:	0781      	lsls	r1, r0, #30
 800a116:	bf58      	it	pl
 800a118:	6963      	ldrpl	r3, [r4, #20]
 800a11a:	60a3      	str	r3, [r4, #8]
 800a11c:	e7f4      	b.n	800a108 <__swsetup_r+0xb0>
 800a11e:	2000      	movs	r0, #0
 800a120:	e7f7      	b.n	800a112 <__swsetup_r+0xba>
 800a122:	bf00      	nop
 800a124:	20000010 	.word	0x20000010
 800a128:	0800c7d4 	.word	0x0800c7d4
 800a12c:	0800c7f4 	.word	0x0800c7f4
 800a130:	0800c7b4 	.word	0x0800c7b4

0800a134 <abort>:
 800a134:	b508      	push	{r3, lr}
 800a136:	2006      	movs	r0, #6
 800a138:	f001 fefe 	bl	800bf38 <raise>
 800a13c:	2001      	movs	r0, #1
 800a13e:	f7f8 fb67 	bl	8002810 <_exit>

0800a142 <quorem>:
 800a142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a146:	6903      	ldr	r3, [r0, #16]
 800a148:	690c      	ldr	r4, [r1, #16]
 800a14a:	42a3      	cmp	r3, r4
 800a14c:	4607      	mov	r7, r0
 800a14e:	f2c0 8081 	blt.w	800a254 <quorem+0x112>
 800a152:	3c01      	subs	r4, #1
 800a154:	f101 0814 	add.w	r8, r1, #20
 800a158:	f100 0514 	add.w	r5, r0, #20
 800a15c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a160:	9301      	str	r3, [sp, #4]
 800a162:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a166:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a16a:	3301      	adds	r3, #1
 800a16c:	429a      	cmp	r2, r3
 800a16e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a172:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a176:	fbb2 f6f3 	udiv	r6, r2, r3
 800a17a:	d331      	bcc.n	800a1e0 <quorem+0x9e>
 800a17c:	f04f 0e00 	mov.w	lr, #0
 800a180:	4640      	mov	r0, r8
 800a182:	46ac      	mov	ip, r5
 800a184:	46f2      	mov	sl, lr
 800a186:	f850 2b04 	ldr.w	r2, [r0], #4
 800a18a:	b293      	uxth	r3, r2
 800a18c:	fb06 e303 	mla	r3, r6, r3, lr
 800a190:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a194:	b29b      	uxth	r3, r3
 800a196:	ebaa 0303 	sub.w	r3, sl, r3
 800a19a:	f8dc a000 	ldr.w	sl, [ip]
 800a19e:	0c12      	lsrs	r2, r2, #16
 800a1a0:	fa13 f38a 	uxtah	r3, r3, sl
 800a1a4:	fb06 e202 	mla	r2, r6, r2, lr
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	9b00      	ldr	r3, [sp, #0]
 800a1ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1b0:	b292      	uxth	r2, r2
 800a1b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a1b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1ba:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1be:	4581      	cmp	r9, r0
 800a1c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1c4:	f84c 3b04 	str.w	r3, [ip], #4
 800a1c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1cc:	d2db      	bcs.n	800a186 <quorem+0x44>
 800a1ce:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1d2:	b92b      	cbnz	r3, 800a1e0 <quorem+0x9e>
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	3b04      	subs	r3, #4
 800a1d8:	429d      	cmp	r5, r3
 800a1da:	461a      	mov	r2, r3
 800a1dc:	d32e      	bcc.n	800a23c <quorem+0xfa>
 800a1de:	613c      	str	r4, [r7, #16]
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	f001 faef 	bl	800b7c4 <__mcmp>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	db24      	blt.n	800a234 <quorem+0xf2>
 800a1ea:	3601      	adds	r6, #1
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	f04f 0c00 	mov.w	ip, #0
 800a1f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1f6:	f8d0 e000 	ldr.w	lr, [r0]
 800a1fa:	b293      	uxth	r3, r2
 800a1fc:	ebac 0303 	sub.w	r3, ip, r3
 800a200:	0c12      	lsrs	r2, r2, #16
 800a202:	fa13 f38e 	uxtah	r3, r3, lr
 800a206:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a20a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a20e:	b29b      	uxth	r3, r3
 800a210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a214:	45c1      	cmp	r9, r8
 800a216:	f840 3b04 	str.w	r3, [r0], #4
 800a21a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a21e:	d2e8      	bcs.n	800a1f2 <quorem+0xb0>
 800a220:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a224:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a228:	b922      	cbnz	r2, 800a234 <quorem+0xf2>
 800a22a:	3b04      	subs	r3, #4
 800a22c:	429d      	cmp	r5, r3
 800a22e:	461a      	mov	r2, r3
 800a230:	d30a      	bcc.n	800a248 <quorem+0x106>
 800a232:	613c      	str	r4, [r7, #16]
 800a234:	4630      	mov	r0, r6
 800a236:	b003      	add	sp, #12
 800a238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23c:	6812      	ldr	r2, [r2, #0]
 800a23e:	3b04      	subs	r3, #4
 800a240:	2a00      	cmp	r2, #0
 800a242:	d1cc      	bne.n	800a1de <quorem+0x9c>
 800a244:	3c01      	subs	r4, #1
 800a246:	e7c7      	b.n	800a1d8 <quorem+0x96>
 800a248:	6812      	ldr	r2, [r2, #0]
 800a24a:	3b04      	subs	r3, #4
 800a24c:	2a00      	cmp	r2, #0
 800a24e:	d1f0      	bne.n	800a232 <quorem+0xf0>
 800a250:	3c01      	subs	r4, #1
 800a252:	e7eb      	b.n	800a22c <quorem+0xea>
 800a254:	2000      	movs	r0, #0
 800a256:	e7ee      	b.n	800a236 <quorem+0xf4>

0800a258 <_dtoa_r>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	ed2d 8b04 	vpush	{d8-d9}
 800a260:	ec57 6b10 	vmov	r6, r7, d0
 800a264:	b093      	sub	sp, #76	; 0x4c
 800a266:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a268:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a26c:	9106      	str	r1, [sp, #24]
 800a26e:	ee10 aa10 	vmov	sl, s0
 800a272:	4604      	mov	r4, r0
 800a274:	9209      	str	r2, [sp, #36]	; 0x24
 800a276:	930c      	str	r3, [sp, #48]	; 0x30
 800a278:	46bb      	mov	fp, r7
 800a27a:	b975      	cbnz	r5, 800a29a <_dtoa_r+0x42>
 800a27c:	2010      	movs	r0, #16
 800a27e:	f000 fffd 	bl	800b27c <malloc>
 800a282:	4602      	mov	r2, r0
 800a284:	6260      	str	r0, [r4, #36]	; 0x24
 800a286:	b920      	cbnz	r0, 800a292 <_dtoa_r+0x3a>
 800a288:	4ba7      	ldr	r3, [pc, #668]	; (800a528 <_dtoa_r+0x2d0>)
 800a28a:	21ea      	movs	r1, #234	; 0xea
 800a28c:	48a7      	ldr	r0, [pc, #668]	; (800a52c <_dtoa_r+0x2d4>)
 800a28e:	f7ff f83d 	bl	800930c <__assert_func>
 800a292:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a296:	6005      	str	r5, [r0, #0]
 800a298:	60c5      	str	r5, [r0, #12]
 800a29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29c:	6819      	ldr	r1, [r3, #0]
 800a29e:	b151      	cbz	r1, 800a2b6 <_dtoa_r+0x5e>
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	604a      	str	r2, [r1, #4]
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	4093      	lsls	r3, r2
 800a2a8:	608b      	str	r3, [r1, #8]
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f001 f848 	bl	800b340 <_Bfree>
 800a2b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	1e3b      	subs	r3, r7, #0
 800a2b8:	bfaa      	itet	ge
 800a2ba:	2300      	movge	r3, #0
 800a2bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a2c0:	f8c8 3000 	strge.w	r3, [r8]
 800a2c4:	4b9a      	ldr	r3, [pc, #616]	; (800a530 <_dtoa_r+0x2d8>)
 800a2c6:	bfbc      	itt	lt
 800a2c8:	2201      	movlt	r2, #1
 800a2ca:	f8c8 2000 	strlt.w	r2, [r8]
 800a2ce:	ea33 030b 	bics.w	r3, r3, fp
 800a2d2:	d11b      	bne.n	800a30c <_dtoa_r+0xb4>
 800a2d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2da:	6013      	str	r3, [r2, #0]
 800a2dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2e0:	4333      	orrs	r3, r6
 800a2e2:	f000 8592 	beq.w	800ae0a <_dtoa_r+0xbb2>
 800a2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2e8:	b963      	cbnz	r3, 800a304 <_dtoa_r+0xac>
 800a2ea:	4b92      	ldr	r3, [pc, #584]	; (800a534 <_dtoa_r+0x2dc>)
 800a2ec:	e022      	b.n	800a334 <_dtoa_r+0xdc>
 800a2ee:	4b92      	ldr	r3, [pc, #584]	; (800a538 <_dtoa_r+0x2e0>)
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	9801      	ldr	r0, [sp, #4]
 800a2fa:	b013      	add	sp, #76	; 0x4c
 800a2fc:	ecbd 8b04 	vpop	{d8-d9}
 800a300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a304:	4b8b      	ldr	r3, [pc, #556]	; (800a534 <_dtoa_r+0x2dc>)
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	3303      	adds	r3, #3
 800a30a:	e7f3      	b.n	800a2f4 <_dtoa_r+0x9c>
 800a30c:	2200      	movs	r2, #0
 800a30e:	2300      	movs	r3, #0
 800a310:	4650      	mov	r0, sl
 800a312:	4659      	mov	r1, fp
 800a314:	f7f6 fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a318:	ec4b ab19 	vmov	d9, sl, fp
 800a31c:	4680      	mov	r8, r0
 800a31e:	b158      	cbz	r0, 800a338 <_dtoa_r+0xe0>
 800a320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a322:	2301      	movs	r3, #1
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 856b 	beq.w	800ae04 <_dtoa_r+0xbac>
 800a32e:	4883      	ldr	r0, [pc, #524]	; (800a53c <_dtoa_r+0x2e4>)
 800a330:	6018      	str	r0, [r3, #0]
 800a332:	1e43      	subs	r3, r0, #1
 800a334:	9301      	str	r3, [sp, #4]
 800a336:	e7df      	b.n	800a2f8 <_dtoa_r+0xa0>
 800a338:	ec4b ab10 	vmov	d0, sl, fp
 800a33c:	aa10      	add	r2, sp, #64	; 0x40
 800a33e:	a911      	add	r1, sp, #68	; 0x44
 800a340:	4620      	mov	r0, r4
 800a342:	f001 fae5 	bl	800b910 <__d2b>
 800a346:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a34a:	ee08 0a10 	vmov	s16, r0
 800a34e:	2d00      	cmp	r5, #0
 800a350:	f000 8084 	beq.w	800a45c <_dtoa_r+0x204>
 800a354:	ee19 3a90 	vmov	r3, s19
 800a358:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a35c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a360:	4656      	mov	r6, sl
 800a362:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a36a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a36e:	4b74      	ldr	r3, [pc, #464]	; (800a540 <_dtoa_r+0x2e8>)
 800a370:	2200      	movs	r2, #0
 800a372:	4630      	mov	r0, r6
 800a374:	4639      	mov	r1, r7
 800a376:	f7f5 ff87 	bl	8000288 <__aeabi_dsub>
 800a37a:	a365      	add	r3, pc, #404	; (adr r3, 800a510 <_dtoa_r+0x2b8>)
 800a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a380:	f7f6 f93a 	bl	80005f8 <__aeabi_dmul>
 800a384:	a364      	add	r3, pc, #400	; (adr r3, 800a518 <_dtoa_r+0x2c0>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f5 ff7f 	bl	800028c <__adddf3>
 800a38e:	4606      	mov	r6, r0
 800a390:	4628      	mov	r0, r5
 800a392:	460f      	mov	r7, r1
 800a394:	f7f6 f8c6 	bl	8000524 <__aeabi_i2d>
 800a398:	a361      	add	r3, pc, #388	; (adr r3, 800a520 <_dtoa_r+0x2c8>)
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	f7f6 f92b 	bl	80005f8 <__aeabi_dmul>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	f7f5 ff6f 	bl	800028c <__adddf3>
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	f7f6 fbd1 	bl	8000b58 <__aeabi_d2iz>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	9000      	str	r0, [sp, #0]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	4630      	mov	r0, r6
 800a3be:	4639      	mov	r1, r7
 800a3c0:	f7f6 fb8c 	bl	8000adc <__aeabi_dcmplt>
 800a3c4:	b150      	cbz	r0, 800a3dc <_dtoa_r+0x184>
 800a3c6:	9800      	ldr	r0, [sp, #0]
 800a3c8:	f7f6 f8ac 	bl	8000524 <__aeabi_i2d>
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	463b      	mov	r3, r7
 800a3d0:	f7f6 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3d4:	b910      	cbnz	r0, 800a3dc <_dtoa_r+0x184>
 800a3d6:	9b00      	ldr	r3, [sp, #0]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	9b00      	ldr	r3, [sp, #0]
 800a3de:	2b16      	cmp	r3, #22
 800a3e0:	d85a      	bhi.n	800a498 <_dtoa_r+0x240>
 800a3e2:	9a00      	ldr	r2, [sp, #0]
 800a3e4:	4b57      	ldr	r3, [pc, #348]	; (800a544 <_dtoa_r+0x2ec>)
 800a3e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	ec51 0b19 	vmov	r0, r1, d9
 800a3f2:	f7f6 fb73 	bl	8000adc <__aeabi_dcmplt>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d050      	beq.n	800a49c <_dtoa_r+0x244>
 800a3fa:	9b00      	ldr	r3, [sp, #0]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	2300      	movs	r3, #0
 800a402:	930b      	str	r3, [sp, #44]	; 0x2c
 800a404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a406:	1b5d      	subs	r5, r3, r5
 800a408:	1e6b      	subs	r3, r5, #1
 800a40a:	9305      	str	r3, [sp, #20]
 800a40c:	bf45      	ittet	mi
 800a40e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a412:	9304      	strmi	r3, [sp, #16]
 800a414:	2300      	movpl	r3, #0
 800a416:	2300      	movmi	r3, #0
 800a418:	bf4c      	ite	mi
 800a41a:	9305      	strmi	r3, [sp, #20]
 800a41c:	9304      	strpl	r3, [sp, #16]
 800a41e:	9b00      	ldr	r3, [sp, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	db3d      	blt.n	800a4a0 <_dtoa_r+0x248>
 800a424:	9b05      	ldr	r3, [sp, #20]
 800a426:	9a00      	ldr	r2, [sp, #0]
 800a428:	920a      	str	r2, [sp, #40]	; 0x28
 800a42a:	4413      	add	r3, r2
 800a42c:	9305      	str	r3, [sp, #20]
 800a42e:	2300      	movs	r3, #0
 800a430:	9307      	str	r3, [sp, #28]
 800a432:	9b06      	ldr	r3, [sp, #24]
 800a434:	2b09      	cmp	r3, #9
 800a436:	f200 8089 	bhi.w	800a54c <_dtoa_r+0x2f4>
 800a43a:	2b05      	cmp	r3, #5
 800a43c:	bfc4      	itt	gt
 800a43e:	3b04      	subgt	r3, #4
 800a440:	9306      	strgt	r3, [sp, #24]
 800a442:	9b06      	ldr	r3, [sp, #24]
 800a444:	f1a3 0302 	sub.w	r3, r3, #2
 800a448:	bfcc      	ite	gt
 800a44a:	2500      	movgt	r5, #0
 800a44c:	2501      	movle	r5, #1
 800a44e:	2b03      	cmp	r3, #3
 800a450:	f200 8087 	bhi.w	800a562 <_dtoa_r+0x30a>
 800a454:	e8df f003 	tbb	[pc, r3]
 800a458:	59383a2d 	.word	0x59383a2d
 800a45c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a460:	441d      	add	r5, r3
 800a462:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a466:	2b20      	cmp	r3, #32
 800a468:	bfc1      	itttt	gt
 800a46a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a46e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a472:	fa0b f303 	lslgt.w	r3, fp, r3
 800a476:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a47a:	bfda      	itte	le
 800a47c:	f1c3 0320 	rsble	r3, r3, #32
 800a480:	fa06 f003 	lslle.w	r0, r6, r3
 800a484:	4318      	orrgt	r0, r3
 800a486:	f7f6 f83d 	bl	8000504 <__aeabi_ui2d>
 800a48a:	2301      	movs	r3, #1
 800a48c:	4606      	mov	r6, r0
 800a48e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a492:	3d01      	subs	r5, #1
 800a494:	930e      	str	r3, [sp, #56]	; 0x38
 800a496:	e76a      	b.n	800a36e <_dtoa_r+0x116>
 800a498:	2301      	movs	r3, #1
 800a49a:	e7b2      	b.n	800a402 <_dtoa_r+0x1aa>
 800a49c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a49e:	e7b1      	b.n	800a404 <_dtoa_r+0x1ac>
 800a4a0:	9b04      	ldr	r3, [sp, #16]
 800a4a2:	9a00      	ldr	r2, [sp, #0]
 800a4a4:	1a9b      	subs	r3, r3, r2
 800a4a6:	9304      	str	r3, [sp, #16]
 800a4a8:	4253      	negs	r3, r2
 800a4aa:	9307      	str	r3, [sp, #28]
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a4b0:	e7bf      	b.n	800a432 <_dtoa_r+0x1da>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9308      	str	r3, [sp, #32]
 800a4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	dc55      	bgt.n	800a568 <_dtoa_r+0x310>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a4c6:	e00c      	b.n	800a4e2 <_dtoa_r+0x28a>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e7f3      	b.n	800a4b4 <_dtoa_r+0x25c>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d0:	9308      	str	r3, [sp, #32]
 800a4d2:	9b00      	ldr	r3, [sp, #0]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	9302      	str	r3, [sp, #8]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	9303      	str	r3, [sp, #12]
 800a4de:	bfb8      	it	lt
 800a4e0:	2301      	movlt	r3, #1
 800a4e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	6042      	str	r2, [r0, #4]
 800a4e8:	2204      	movs	r2, #4
 800a4ea:	f102 0614 	add.w	r6, r2, #20
 800a4ee:	429e      	cmp	r6, r3
 800a4f0:	6841      	ldr	r1, [r0, #4]
 800a4f2:	d93d      	bls.n	800a570 <_dtoa_r+0x318>
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f000 fee3 	bl	800b2c0 <_Balloc>
 800a4fa:	9001      	str	r0, [sp, #4]
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d13b      	bne.n	800a578 <_dtoa_r+0x320>
 800a500:	4b11      	ldr	r3, [pc, #68]	; (800a548 <_dtoa_r+0x2f0>)
 800a502:	4602      	mov	r2, r0
 800a504:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a508:	e6c0      	b.n	800a28c <_dtoa_r+0x34>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e7df      	b.n	800a4ce <_dtoa_r+0x276>
 800a50e:	bf00      	nop
 800a510:	636f4361 	.word	0x636f4361
 800a514:	3fd287a7 	.word	0x3fd287a7
 800a518:	8b60c8b3 	.word	0x8b60c8b3
 800a51c:	3fc68a28 	.word	0x3fc68a28
 800a520:	509f79fb 	.word	0x509f79fb
 800a524:	3fd34413 	.word	0x3fd34413
 800a528:	0800c72e 	.word	0x0800c72e
 800a52c:	0800c745 	.word	0x0800c745
 800a530:	7ff00000 	.word	0x7ff00000
 800a534:	0800c72a 	.word	0x0800c72a
 800a538:	0800c721 	.word	0x0800c721
 800a53c:	0800c6fe 	.word	0x0800c6fe
 800a540:	3ff80000 	.word	0x3ff80000
 800a544:	0800c898 	.word	0x0800c898
 800a548:	0800c7a0 	.word	0x0800c7a0
 800a54c:	2501      	movs	r5, #1
 800a54e:	2300      	movs	r3, #0
 800a550:	9306      	str	r3, [sp, #24]
 800a552:	9508      	str	r5, [sp, #32]
 800a554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a558:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a55c:	2200      	movs	r2, #0
 800a55e:	2312      	movs	r3, #18
 800a560:	e7b0      	b.n	800a4c4 <_dtoa_r+0x26c>
 800a562:	2301      	movs	r3, #1
 800a564:	9308      	str	r3, [sp, #32]
 800a566:	e7f5      	b.n	800a554 <_dtoa_r+0x2fc>
 800a568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a56a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a56e:	e7b8      	b.n	800a4e2 <_dtoa_r+0x28a>
 800a570:	3101      	adds	r1, #1
 800a572:	6041      	str	r1, [r0, #4]
 800a574:	0052      	lsls	r2, r2, #1
 800a576:	e7b8      	b.n	800a4ea <_dtoa_r+0x292>
 800a578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a57a:	9a01      	ldr	r2, [sp, #4]
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	9b03      	ldr	r3, [sp, #12]
 800a580:	2b0e      	cmp	r3, #14
 800a582:	f200 809d 	bhi.w	800a6c0 <_dtoa_r+0x468>
 800a586:	2d00      	cmp	r5, #0
 800a588:	f000 809a 	beq.w	800a6c0 <_dtoa_r+0x468>
 800a58c:	9b00      	ldr	r3, [sp, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	dd32      	ble.n	800a5f8 <_dtoa_r+0x3a0>
 800a592:	4ab7      	ldr	r2, [pc, #732]	; (800a870 <_dtoa_r+0x618>)
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a59c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5a0:	9b00      	ldr	r3, [sp, #0]
 800a5a2:	05d8      	lsls	r0, r3, #23
 800a5a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a5a8:	d516      	bpl.n	800a5d8 <_dtoa_r+0x380>
 800a5aa:	4bb2      	ldr	r3, [pc, #712]	; (800a874 <_dtoa_r+0x61c>)
 800a5ac:	ec51 0b19 	vmov	r0, r1, d9
 800a5b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5b4:	f7f6 f94a 	bl	800084c <__aeabi_ddiv>
 800a5b8:	f007 070f 	and.w	r7, r7, #15
 800a5bc:	4682      	mov	sl, r0
 800a5be:	468b      	mov	fp, r1
 800a5c0:	2503      	movs	r5, #3
 800a5c2:	4eac      	ldr	r6, [pc, #688]	; (800a874 <_dtoa_r+0x61c>)
 800a5c4:	b957      	cbnz	r7, 800a5dc <_dtoa_r+0x384>
 800a5c6:	4642      	mov	r2, r8
 800a5c8:	464b      	mov	r3, r9
 800a5ca:	4650      	mov	r0, sl
 800a5cc:	4659      	mov	r1, fp
 800a5ce:	f7f6 f93d 	bl	800084c <__aeabi_ddiv>
 800a5d2:	4682      	mov	sl, r0
 800a5d4:	468b      	mov	fp, r1
 800a5d6:	e028      	b.n	800a62a <_dtoa_r+0x3d2>
 800a5d8:	2502      	movs	r5, #2
 800a5da:	e7f2      	b.n	800a5c2 <_dtoa_r+0x36a>
 800a5dc:	07f9      	lsls	r1, r7, #31
 800a5de:	d508      	bpl.n	800a5f2 <_dtoa_r+0x39a>
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5e8:	f7f6 f806 	bl	80005f8 <__aeabi_dmul>
 800a5ec:	3501      	adds	r5, #1
 800a5ee:	4680      	mov	r8, r0
 800a5f0:	4689      	mov	r9, r1
 800a5f2:	107f      	asrs	r7, r7, #1
 800a5f4:	3608      	adds	r6, #8
 800a5f6:	e7e5      	b.n	800a5c4 <_dtoa_r+0x36c>
 800a5f8:	f000 809b 	beq.w	800a732 <_dtoa_r+0x4da>
 800a5fc:	9b00      	ldr	r3, [sp, #0]
 800a5fe:	4f9d      	ldr	r7, [pc, #628]	; (800a874 <_dtoa_r+0x61c>)
 800a600:	425e      	negs	r6, r3
 800a602:	4b9b      	ldr	r3, [pc, #620]	; (800a870 <_dtoa_r+0x618>)
 800a604:	f006 020f 	and.w	r2, r6, #15
 800a608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	ec51 0b19 	vmov	r0, r1, d9
 800a614:	f7f5 fff0 	bl	80005f8 <__aeabi_dmul>
 800a618:	1136      	asrs	r6, r6, #4
 800a61a:	4682      	mov	sl, r0
 800a61c:	468b      	mov	fp, r1
 800a61e:	2300      	movs	r3, #0
 800a620:	2502      	movs	r5, #2
 800a622:	2e00      	cmp	r6, #0
 800a624:	d17a      	bne.n	800a71c <_dtoa_r+0x4c4>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1d3      	bne.n	800a5d2 <_dtoa_r+0x37a>
 800a62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 8082 	beq.w	800a736 <_dtoa_r+0x4de>
 800a632:	4b91      	ldr	r3, [pc, #580]	; (800a878 <_dtoa_r+0x620>)
 800a634:	2200      	movs	r2, #0
 800a636:	4650      	mov	r0, sl
 800a638:	4659      	mov	r1, fp
 800a63a:	f7f6 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d079      	beq.n	800a736 <_dtoa_r+0x4de>
 800a642:	9b03      	ldr	r3, [sp, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d076      	beq.n	800a736 <_dtoa_r+0x4de>
 800a648:	9b02      	ldr	r3, [sp, #8]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	dd36      	ble.n	800a6bc <_dtoa_r+0x464>
 800a64e:	9b00      	ldr	r3, [sp, #0]
 800a650:	4650      	mov	r0, sl
 800a652:	4659      	mov	r1, fp
 800a654:	1e5f      	subs	r7, r3, #1
 800a656:	2200      	movs	r2, #0
 800a658:	4b88      	ldr	r3, [pc, #544]	; (800a87c <_dtoa_r+0x624>)
 800a65a:	f7f5 ffcd 	bl	80005f8 <__aeabi_dmul>
 800a65e:	9e02      	ldr	r6, [sp, #8]
 800a660:	4682      	mov	sl, r0
 800a662:	468b      	mov	fp, r1
 800a664:	3501      	adds	r5, #1
 800a666:	4628      	mov	r0, r5
 800a668:	f7f5 ff5c 	bl	8000524 <__aeabi_i2d>
 800a66c:	4652      	mov	r2, sl
 800a66e:	465b      	mov	r3, fp
 800a670:	f7f5 ffc2 	bl	80005f8 <__aeabi_dmul>
 800a674:	4b82      	ldr	r3, [pc, #520]	; (800a880 <_dtoa_r+0x628>)
 800a676:	2200      	movs	r2, #0
 800a678:	f7f5 fe08 	bl	800028c <__adddf3>
 800a67c:	46d0      	mov	r8, sl
 800a67e:	46d9      	mov	r9, fp
 800a680:	4682      	mov	sl, r0
 800a682:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a686:	2e00      	cmp	r6, #0
 800a688:	d158      	bne.n	800a73c <_dtoa_r+0x4e4>
 800a68a:	4b7e      	ldr	r3, [pc, #504]	; (800a884 <_dtoa_r+0x62c>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	4640      	mov	r0, r8
 800a690:	4649      	mov	r1, r9
 800a692:	f7f5 fdf9 	bl	8000288 <__aeabi_dsub>
 800a696:	4652      	mov	r2, sl
 800a698:	465b      	mov	r3, fp
 800a69a:	4680      	mov	r8, r0
 800a69c:	4689      	mov	r9, r1
 800a69e:	f7f6 fa3b 	bl	8000b18 <__aeabi_dcmpgt>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	f040 8295 	bne.w	800abd2 <_dtoa_r+0x97a>
 800a6a8:	4652      	mov	r2, sl
 800a6aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	f7f6 fa13 	bl	8000adc <__aeabi_dcmplt>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	f040 8289 	bne.w	800abce <_dtoa_r+0x976>
 800a6bc:	ec5b ab19 	vmov	sl, fp, d9
 800a6c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f2c0 8148 	blt.w	800a958 <_dtoa_r+0x700>
 800a6c8:	9a00      	ldr	r2, [sp, #0]
 800a6ca:	2a0e      	cmp	r2, #14
 800a6cc:	f300 8144 	bgt.w	800a958 <_dtoa_r+0x700>
 800a6d0:	4b67      	ldr	r3, [pc, #412]	; (800a870 <_dtoa_r+0x618>)
 800a6d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f280 80d5 	bge.w	800a88c <_dtoa_r+0x634>
 800a6e2:	9b03      	ldr	r3, [sp, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f300 80d1 	bgt.w	800a88c <_dtoa_r+0x634>
 800a6ea:	f040 826f 	bne.w	800abcc <_dtoa_r+0x974>
 800a6ee:	4b65      	ldr	r3, [pc, #404]	; (800a884 <_dtoa_r+0x62c>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	4649      	mov	r1, r9
 800a6f6:	f7f5 ff7f 	bl	80005f8 <__aeabi_dmul>
 800a6fa:	4652      	mov	r2, sl
 800a6fc:	465b      	mov	r3, fp
 800a6fe:	f7f6 fa01 	bl	8000b04 <__aeabi_dcmpge>
 800a702:	9e03      	ldr	r6, [sp, #12]
 800a704:	4637      	mov	r7, r6
 800a706:	2800      	cmp	r0, #0
 800a708:	f040 8245 	bne.w	800ab96 <_dtoa_r+0x93e>
 800a70c:	9d01      	ldr	r5, [sp, #4]
 800a70e:	2331      	movs	r3, #49	; 0x31
 800a710:	f805 3b01 	strb.w	r3, [r5], #1
 800a714:	9b00      	ldr	r3, [sp, #0]
 800a716:	3301      	adds	r3, #1
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	e240      	b.n	800ab9e <_dtoa_r+0x946>
 800a71c:	07f2      	lsls	r2, r6, #31
 800a71e:	d505      	bpl.n	800a72c <_dtoa_r+0x4d4>
 800a720:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a724:	f7f5 ff68 	bl	80005f8 <__aeabi_dmul>
 800a728:	3501      	adds	r5, #1
 800a72a:	2301      	movs	r3, #1
 800a72c:	1076      	asrs	r6, r6, #1
 800a72e:	3708      	adds	r7, #8
 800a730:	e777      	b.n	800a622 <_dtoa_r+0x3ca>
 800a732:	2502      	movs	r5, #2
 800a734:	e779      	b.n	800a62a <_dtoa_r+0x3d2>
 800a736:	9f00      	ldr	r7, [sp, #0]
 800a738:	9e03      	ldr	r6, [sp, #12]
 800a73a:	e794      	b.n	800a666 <_dtoa_r+0x40e>
 800a73c:	9901      	ldr	r1, [sp, #4]
 800a73e:	4b4c      	ldr	r3, [pc, #304]	; (800a870 <_dtoa_r+0x618>)
 800a740:	4431      	add	r1, r6
 800a742:	910d      	str	r1, [sp, #52]	; 0x34
 800a744:	9908      	ldr	r1, [sp, #32]
 800a746:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a74a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a74e:	2900      	cmp	r1, #0
 800a750:	d043      	beq.n	800a7da <_dtoa_r+0x582>
 800a752:	494d      	ldr	r1, [pc, #308]	; (800a888 <_dtoa_r+0x630>)
 800a754:	2000      	movs	r0, #0
 800a756:	f7f6 f879 	bl	800084c <__aeabi_ddiv>
 800a75a:	4652      	mov	r2, sl
 800a75c:	465b      	mov	r3, fp
 800a75e:	f7f5 fd93 	bl	8000288 <__aeabi_dsub>
 800a762:	9d01      	ldr	r5, [sp, #4]
 800a764:	4682      	mov	sl, r0
 800a766:	468b      	mov	fp, r1
 800a768:	4649      	mov	r1, r9
 800a76a:	4640      	mov	r0, r8
 800a76c:	f7f6 f9f4 	bl	8000b58 <__aeabi_d2iz>
 800a770:	4606      	mov	r6, r0
 800a772:	f7f5 fed7 	bl	8000524 <__aeabi_i2d>
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4640      	mov	r0, r8
 800a77c:	4649      	mov	r1, r9
 800a77e:	f7f5 fd83 	bl	8000288 <__aeabi_dsub>
 800a782:	3630      	adds	r6, #48	; 0x30
 800a784:	f805 6b01 	strb.w	r6, [r5], #1
 800a788:	4652      	mov	r2, sl
 800a78a:	465b      	mov	r3, fp
 800a78c:	4680      	mov	r8, r0
 800a78e:	4689      	mov	r9, r1
 800a790:	f7f6 f9a4 	bl	8000adc <__aeabi_dcmplt>
 800a794:	2800      	cmp	r0, #0
 800a796:	d163      	bne.n	800a860 <_dtoa_r+0x608>
 800a798:	4642      	mov	r2, r8
 800a79a:	464b      	mov	r3, r9
 800a79c:	4936      	ldr	r1, [pc, #216]	; (800a878 <_dtoa_r+0x620>)
 800a79e:	2000      	movs	r0, #0
 800a7a0:	f7f5 fd72 	bl	8000288 <__aeabi_dsub>
 800a7a4:	4652      	mov	r2, sl
 800a7a6:	465b      	mov	r3, fp
 800a7a8:	f7f6 f998 	bl	8000adc <__aeabi_dcmplt>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f040 80b5 	bne.w	800a91c <_dtoa_r+0x6c4>
 800a7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7b4:	429d      	cmp	r5, r3
 800a7b6:	d081      	beq.n	800a6bc <_dtoa_r+0x464>
 800a7b8:	4b30      	ldr	r3, [pc, #192]	; (800a87c <_dtoa_r+0x624>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	4650      	mov	r0, sl
 800a7be:	4659      	mov	r1, fp
 800a7c0:	f7f5 ff1a 	bl	80005f8 <__aeabi_dmul>
 800a7c4:	4b2d      	ldr	r3, [pc, #180]	; (800a87c <_dtoa_r+0x624>)
 800a7c6:	4682      	mov	sl, r0
 800a7c8:	468b      	mov	fp, r1
 800a7ca:	4640      	mov	r0, r8
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f7f5 ff12 	bl	80005f8 <__aeabi_dmul>
 800a7d4:	4680      	mov	r8, r0
 800a7d6:	4689      	mov	r9, r1
 800a7d8:	e7c6      	b.n	800a768 <_dtoa_r+0x510>
 800a7da:	4650      	mov	r0, sl
 800a7dc:	4659      	mov	r1, fp
 800a7de:	f7f5 ff0b 	bl	80005f8 <__aeabi_dmul>
 800a7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7e4:	9d01      	ldr	r5, [sp, #4]
 800a7e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7e8:	4682      	mov	sl, r0
 800a7ea:	468b      	mov	fp, r1
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	f7f6 f9b2 	bl	8000b58 <__aeabi_d2iz>
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	f7f5 fe95 	bl	8000524 <__aeabi_i2d>
 800a7fa:	3630      	adds	r6, #48	; 0x30
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4640      	mov	r0, r8
 800a802:	4649      	mov	r1, r9
 800a804:	f7f5 fd40 	bl	8000288 <__aeabi_dsub>
 800a808:	f805 6b01 	strb.w	r6, [r5], #1
 800a80c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a80e:	429d      	cmp	r5, r3
 800a810:	4680      	mov	r8, r0
 800a812:	4689      	mov	r9, r1
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	d124      	bne.n	800a864 <_dtoa_r+0x60c>
 800a81a:	4b1b      	ldr	r3, [pc, #108]	; (800a888 <_dtoa_r+0x630>)
 800a81c:	4650      	mov	r0, sl
 800a81e:	4659      	mov	r1, fp
 800a820:	f7f5 fd34 	bl	800028c <__adddf3>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4640      	mov	r0, r8
 800a82a:	4649      	mov	r1, r9
 800a82c:	f7f6 f974 	bl	8000b18 <__aeabi_dcmpgt>
 800a830:	2800      	cmp	r0, #0
 800a832:	d173      	bne.n	800a91c <_dtoa_r+0x6c4>
 800a834:	4652      	mov	r2, sl
 800a836:	465b      	mov	r3, fp
 800a838:	4913      	ldr	r1, [pc, #76]	; (800a888 <_dtoa_r+0x630>)
 800a83a:	2000      	movs	r0, #0
 800a83c:	f7f5 fd24 	bl	8000288 <__aeabi_dsub>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	4640      	mov	r0, r8
 800a846:	4649      	mov	r1, r9
 800a848:	f7f6 f948 	bl	8000adc <__aeabi_dcmplt>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f43f af35 	beq.w	800a6bc <_dtoa_r+0x464>
 800a852:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a854:	1e6b      	subs	r3, r5, #1
 800a856:	930f      	str	r3, [sp, #60]	; 0x3c
 800a858:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a85c:	2b30      	cmp	r3, #48	; 0x30
 800a85e:	d0f8      	beq.n	800a852 <_dtoa_r+0x5fa>
 800a860:	9700      	str	r7, [sp, #0]
 800a862:	e049      	b.n	800a8f8 <_dtoa_r+0x6a0>
 800a864:	4b05      	ldr	r3, [pc, #20]	; (800a87c <_dtoa_r+0x624>)
 800a866:	f7f5 fec7 	bl	80005f8 <__aeabi_dmul>
 800a86a:	4680      	mov	r8, r0
 800a86c:	4689      	mov	r9, r1
 800a86e:	e7bd      	b.n	800a7ec <_dtoa_r+0x594>
 800a870:	0800c898 	.word	0x0800c898
 800a874:	0800c870 	.word	0x0800c870
 800a878:	3ff00000 	.word	0x3ff00000
 800a87c:	40240000 	.word	0x40240000
 800a880:	401c0000 	.word	0x401c0000
 800a884:	40140000 	.word	0x40140000
 800a888:	3fe00000 	.word	0x3fe00000
 800a88c:	9d01      	ldr	r5, [sp, #4]
 800a88e:	4656      	mov	r6, sl
 800a890:	465f      	mov	r7, fp
 800a892:	4642      	mov	r2, r8
 800a894:	464b      	mov	r3, r9
 800a896:	4630      	mov	r0, r6
 800a898:	4639      	mov	r1, r7
 800a89a:	f7f5 ffd7 	bl	800084c <__aeabi_ddiv>
 800a89e:	f7f6 f95b 	bl	8000b58 <__aeabi_d2iz>
 800a8a2:	4682      	mov	sl, r0
 800a8a4:	f7f5 fe3e 	bl	8000524 <__aeabi_i2d>
 800a8a8:	4642      	mov	r2, r8
 800a8aa:	464b      	mov	r3, r9
 800a8ac:	f7f5 fea4 	bl	80005f8 <__aeabi_dmul>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a8bc:	f7f5 fce4 	bl	8000288 <__aeabi_dsub>
 800a8c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a8c4:	9e01      	ldr	r6, [sp, #4]
 800a8c6:	9f03      	ldr	r7, [sp, #12]
 800a8c8:	1bae      	subs	r6, r5, r6
 800a8ca:	42b7      	cmp	r7, r6
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	d135      	bne.n	800a93e <_dtoa_r+0x6e6>
 800a8d2:	f7f5 fcdb 	bl	800028c <__adddf3>
 800a8d6:	4642      	mov	r2, r8
 800a8d8:	464b      	mov	r3, r9
 800a8da:	4606      	mov	r6, r0
 800a8dc:	460f      	mov	r7, r1
 800a8de:	f7f6 f91b 	bl	8000b18 <__aeabi_dcmpgt>
 800a8e2:	b9d0      	cbnz	r0, 800a91a <_dtoa_r+0x6c2>
 800a8e4:	4642      	mov	r2, r8
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f6 f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f0:	b110      	cbz	r0, 800a8f8 <_dtoa_r+0x6a0>
 800a8f2:	f01a 0f01 	tst.w	sl, #1
 800a8f6:	d110      	bne.n	800a91a <_dtoa_r+0x6c2>
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	ee18 1a10 	vmov	r1, s16
 800a8fe:	f000 fd1f 	bl	800b340 <_Bfree>
 800a902:	2300      	movs	r3, #0
 800a904:	9800      	ldr	r0, [sp, #0]
 800a906:	702b      	strb	r3, [r5, #0]
 800a908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a90a:	3001      	adds	r0, #1
 800a90c:	6018      	str	r0, [r3, #0]
 800a90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a910:	2b00      	cmp	r3, #0
 800a912:	f43f acf1 	beq.w	800a2f8 <_dtoa_r+0xa0>
 800a916:	601d      	str	r5, [r3, #0]
 800a918:	e4ee      	b.n	800a2f8 <_dtoa_r+0xa0>
 800a91a:	9f00      	ldr	r7, [sp, #0]
 800a91c:	462b      	mov	r3, r5
 800a91e:	461d      	mov	r5, r3
 800a920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a924:	2a39      	cmp	r2, #57	; 0x39
 800a926:	d106      	bne.n	800a936 <_dtoa_r+0x6de>
 800a928:	9a01      	ldr	r2, [sp, #4]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d1f7      	bne.n	800a91e <_dtoa_r+0x6c6>
 800a92e:	9901      	ldr	r1, [sp, #4]
 800a930:	2230      	movs	r2, #48	; 0x30
 800a932:	3701      	adds	r7, #1
 800a934:	700a      	strb	r2, [r1, #0]
 800a936:	781a      	ldrb	r2, [r3, #0]
 800a938:	3201      	adds	r2, #1
 800a93a:	701a      	strb	r2, [r3, #0]
 800a93c:	e790      	b.n	800a860 <_dtoa_r+0x608>
 800a93e:	4ba6      	ldr	r3, [pc, #664]	; (800abd8 <_dtoa_r+0x980>)
 800a940:	2200      	movs	r2, #0
 800a942:	f7f5 fe59 	bl	80005f8 <__aeabi_dmul>
 800a946:	2200      	movs	r2, #0
 800a948:	2300      	movs	r3, #0
 800a94a:	4606      	mov	r6, r0
 800a94c:	460f      	mov	r7, r1
 800a94e:	f7f6 f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a952:	2800      	cmp	r0, #0
 800a954:	d09d      	beq.n	800a892 <_dtoa_r+0x63a>
 800a956:	e7cf      	b.n	800a8f8 <_dtoa_r+0x6a0>
 800a958:	9a08      	ldr	r2, [sp, #32]
 800a95a:	2a00      	cmp	r2, #0
 800a95c:	f000 80d7 	beq.w	800ab0e <_dtoa_r+0x8b6>
 800a960:	9a06      	ldr	r2, [sp, #24]
 800a962:	2a01      	cmp	r2, #1
 800a964:	f300 80ba 	bgt.w	800aadc <_dtoa_r+0x884>
 800a968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a96a:	2a00      	cmp	r2, #0
 800a96c:	f000 80b2 	beq.w	800aad4 <_dtoa_r+0x87c>
 800a970:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a974:	9e07      	ldr	r6, [sp, #28]
 800a976:	9d04      	ldr	r5, [sp, #16]
 800a978:	9a04      	ldr	r2, [sp, #16]
 800a97a:	441a      	add	r2, r3
 800a97c:	9204      	str	r2, [sp, #16]
 800a97e:	9a05      	ldr	r2, [sp, #20]
 800a980:	2101      	movs	r1, #1
 800a982:	441a      	add	r2, r3
 800a984:	4620      	mov	r0, r4
 800a986:	9205      	str	r2, [sp, #20]
 800a988:	f000 fd92 	bl	800b4b0 <__i2b>
 800a98c:	4607      	mov	r7, r0
 800a98e:	2d00      	cmp	r5, #0
 800a990:	dd0c      	ble.n	800a9ac <_dtoa_r+0x754>
 800a992:	9b05      	ldr	r3, [sp, #20]
 800a994:	2b00      	cmp	r3, #0
 800a996:	dd09      	ble.n	800a9ac <_dtoa_r+0x754>
 800a998:	42ab      	cmp	r3, r5
 800a99a:	9a04      	ldr	r2, [sp, #16]
 800a99c:	bfa8      	it	ge
 800a99e:	462b      	movge	r3, r5
 800a9a0:	1ad2      	subs	r2, r2, r3
 800a9a2:	9204      	str	r2, [sp, #16]
 800a9a4:	9a05      	ldr	r2, [sp, #20]
 800a9a6:	1aed      	subs	r5, r5, r3
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	9305      	str	r3, [sp, #20]
 800a9ac:	9b07      	ldr	r3, [sp, #28]
 800a9ae:	b31b      	cbz	r3, 800a9f8 <_dtoa_r+0x7a0>
 800a9b0:	9b08      	ldr	r3, [sp, #32]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f000 80af 	beq.w	800ab16 <_dtoa_r+0x8be>
 800a9b8:	2e00      	cmp	r6, #0
 800a9ba:	dd13      	ble.n	800a9e4 <_dtoa_r+0x78c>
 800a9bc:	4639      	mov	r1, r7
 800a9be:	4632      	mov	r2, r6
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f000 fe35 	bl	800b630 <__pow5mult>
 800a9c6:	ee18 2a10 	vmov	r2, s16
 800a9ca:	4601      	mov	r1, r0
 800a9cc:	4607      	mov	r7, r0
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f000 fd84 	bl	800b4dc <__multiply>
 800a9d4:	ee18 1a10 	vmov	r1, s16
 800a9d8:	4680      	mov	r8, r0
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 fcb0 	bl	800b340 <_Bfree>
 800a9e0:	ee08 8a10 	vmov	s16, r8
 800a9e4:	9b07      	ldr	r3, [sp, #28]
 800a9e6:	1b9a      	subs	r2, r3, r6
 800a9e8:	d006      	beq.n	800a9f8 <_dtoa_r+0x7a0>
 800a9ea:	ee18 1a10 	vmov	r1, s16
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f000 fe1e 	bl	800b630 <__pow5mult>
 800a9f4:	ee08 0a10 	vmov	s16, r0
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fd58 	bl	800b4b0 <__i2b>
 800aa00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	4606      	mov	r6, r0
 800aa06:	f340 8088 	ble.w	800ab1a <_dtoa_r+0x8c2>
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	4601      	mov	r1, r0
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 fe0e 	bl	800b630 <__pow5mult>
 800aa14:	9b06      	ldr	r3, [sp, #24]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	4606      	mov	r6, r0
 800aa1a:	f340 8081 	ble.w	800ab20 <_dtoa_r+0x8c8>
 800aa1e:	f04f 0800 	mov.w	r8, #0
 800aa22:	6933      	ldr	r3, [r6, #16]
 800aa24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa28:	6918      	ldr	r0, [r3, #16]
 800aa2a:	f000 fcf1 	bl	800b410 <__hi0bits>
 800aa2e:	f1c0 0020 	rsb	r0, r0, #32
 800aa32:	9b05      	ldr	r3, [sp, #20]
 800aa34:	4418      	add	r0, r3
 800aa36:	f010 001f 	ands.w	r0, r0, #31
 800aa3a:	f000 8092 	beq.w	800ab62 <_dtoa_r+0x90a>
 800aa3e:	f1c0 0320 	rsb	r3, r0, #32
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	f340 808a 	ble.w	800ab5c <_dtoa_r+0x904>
 800aa48:	f1c0 001c 	rsb	r0, r0, #28
 800aa4c:	9b04      	ldr	r3, [sp, #16]
 800aa4e:	4403      	add	r3, r0
 800aa50:	9304      	str	r3, [sp, #16]
 800aa52:	9b05      	ldr	r3, [sp, #20]
 800aa54:	4403      	add	r3, r0
 800aa56:	4405      	add	r5, r0
 800aa58:	9305      	str	r3, [sp, #20]
 800aa5a:	9b04      	ldr	r3, [sp, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	dd07      	ble.n	800aa70 <_dtoa_r+0x818>
 800aa60:	ee18 1a10 	vmov	r1, s16
 800aa64:	461a      	mov	r2, r3
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 fe3c 	bl	800b6e4 <__lshift>
 800aa6c:	ee08 0a10 	vmov	s16, r0
 800aa70:	9b05      	ldr	r3, [sp, #20]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	dd05      	ble.n	800aa82 <_dtoa_r+0x82a>
 800aa76:	4631      	mov	r1, r6
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 fe32 	bl	800b6e4 <__lshift>
 800aa80:	4606      	mov	r6, r0
 800aa82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d06e      	beq.n	800ab66 <_dtoa_r+0x90e>
 800aa88:	ee18 0a10 	vmov	r0, s16
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	f000 fe99 	bl	800b7c4 <__mcmp>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	da67      	bge.n	800ab66 <_dtoa_r+0x90e>
 800aa96:	9b00      	ldr	r3, [sp, #0]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	ee18 1a10 	vmov	r1, s16
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	220a      	movs	r2, #10
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 fc6d 	bl	800b384 <__multadd>
 800aaaa:	9b08      	ldr	r3, [sp, #32]
 800aaac:	ee08 0a10 	vmov	s16, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 81b1 	beq.w	800ae18 <_dtoa_r+0xbc0>
 800aab6:	2300      	movs	r3, #0
 800aab8:	4639      	mov	r1, r7
 800aaba:	220a      	movs	r2, #10
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 fc61 	bl	800b384 <__multadd>
 800aac2:	9b02      	ldr	r3, [sp, #8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	4607      	mov	r7, r0
 800aac8:	f300 808e 	bgt.w	800abe8 <_dtoa_r+0x990>
 800aacc:	9b06      	ldr	r3, [sp, #24]
 800aace:	2b02      	cmp	r3, #2
 800aad0:	dc51      	bgt.n	800ab76 <_dtoa_r+0x91e>
 800aad2:	e089      	b.n	800abe8 <_dtoa_r+0x990>
 800aad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aada:	e74b      	b.n	800a974 <_dtoa_r+0x71c>
 800aadc:	9b03      	ldr	r3, [sp, #12]
 800aade:	1e5e      	subs	r6, r3, #1
 800aae0:	9b07      	ldr	r3, [sp, #28]
 800aae2:	42b3      	cmp	r3, r6
 800aae4:	bfbf      	itttt	lt
 800aae6:	9b07      	ldrlt	r3, [sp, #28]
 800aae8:	9607      	strlt	r6, [sp, #28]
 800aaea:	1af2      	sublt	r2, r6, r3
 800aaec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aaee:	bfb6      	itet	lt
 800aaf0:	189b      	addlt	r3, r3, r2
 800aaf2:	1b9e      	subge	r6, r3, r6
 800aaf4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aaf6:	9b03      	ldr	r3, [sp, #12]
 800aaf8:	bfb8      	it	lt
 800aafa:	2600      	movlt	r6, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	bfb7      	itett	lt
 800ab00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ab04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab08:	1a9d      	sublt	r5, r3, r2
 800ab0a:	2300      	movlt	r3, #0
 800ab0c:	e734      	b.n	800a978 <_dtoa_r+0x720>
 800ab0e:	9e07      	ldr	r6, [sp, #28]
 800ab10:	9d04      	ldr	r5, [sp, #16]
 800ab12:	9f08      	ldr	r7, [sp, #32]
 800ab14:	e73b      	b.n	800a98e <_dtoa_r+0x736>
 800ab16:	9a07      	ldr	r2, [sp, #28]
 800ab18:	e767      	b.n	800a9ea <_dtoa_r+0x792>
 800ab1a:	9b06      	ldr	r3, [sp, #24]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	dc18      	bgt.n	800ab52 <_dtoa_r+0x8fa>
 800ab20:	f1ba 0f00 	cmp.w	sl, #0
 800ab24:	d115      	bne.n	800ab52 <_dtoa_r+0x8fa>
 800ab26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab2a:	b993      	cbnz	r3, 800ab52 <_dtoa_r+0x8fa>
 800ab2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab30:	0d1b      	lsrs	r3, r3, #20
 800ab32:	051b      	lsls	r3, r3, #20
 800ab34:	b183      	cbz	r3, 800ab58 <_dtoa_r+0x900>
 800ab36:	9b04      	ldr	r3, [sp, #16]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	9304      	str	r3, [sp, #16]
 800ab3c:	9b05      	ldr	r3, [sp, #20]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	9305      	str	r3, [sp, #20]
 800ab42:	f04f 0801 	mov.w	r8, #1
 800ab46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f47f af6a 	bne.w	800aa22 <_dtoa_r+0x7ca>
 800ab4e:	2001      	movs	r0, #1
 800ab50:	e76f      	b.n	800aa32 <_dtoa_r+0x7da>
 800ab52:	f04f 0800 	mov.w	r8, #0
 800ab56:	e7f6      	b.n	800ab46 <_dtoa_r+0x8ee>
 800ab58:	4698      	mov	r8, r3
 800ab5a:	e7f4      	b.n	800ab46 <_dtoa_r+0x8ee>
 800ab5c:	f43f af7d 	beq.w	800aa5a <_dtoa_r+0x802>
 800ab60:	4618      	mov	r0, r3
 800ab62:	301c      	adds	r0, #28
 800ab64:	e772      	b.n	800aa4c <_dtoa_r+0x7f4>
 800ab66:	9b03      	ldr	r3, [sp, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	dc37      	bgt.n	800abdc <_dtoa_r+0x984>
 800ab6c:	9b06      	ldr	r3, [sp, #24]
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	dd34      	ble.n	800abdc <_dtoa_r+0x984>
 800ab72:	9b03      	ldr	r3, [sp, #12]
 800ab74:	9302      	str	r3, [sp, #8]
 800ab76:	9b02      	ldr	r3, [sp, #8]
 800ab78:	b96b      	cbnz	r3, 800ab96 <_dtoa_r+0x93e>
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	2205      	movs	r2, #5
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 fc00 	bl	800b384 <__multadd>
 800ab84:	4601      	mov	r1, r0
 800ab86:	4606      	mov	r6, r0
 800ab88:	ee18 0a10 	vmov	r0, s16
 800ab8c:	f000 fe1a 	bl	800b7c4 <__mcmp>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	f73f adbb 	bgt.w	800a70c <_dtoa_r+0x4b4>
 800ab96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab98:	9d01      	ldr	r5, [sp, #4]
 800ab9a:	43db      	mvns	r3, r3
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	f04f 0800 	mov.w	r8, #0
 800aba2:	4631      	mov	r1, r6
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 fbcb 	bl	800b340 <_Bfree>
 800abaa:	2f00      	cmp	r7, #0
 800abac:	f43f aea4 	beq.w	800a8f8 <_dtoa_r+0x6a0>
 800abb0:	f1b8 0f00 	cmp.w	r8, #0
 800abb4:	d005      	beq.n	800abc2 <_dtoa_r+0x96a>
 800abb6:	45b8      	cmp	r8, r7
 800abb8:	d003      	beq.n	800abc2 <_dtoa_r+0x96a>
 800abba:	4641      	mov	r1, r8
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fbbf 	bl	800b340 <_Bfree>
 800abc2:	4639      	mov	r1, r7
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 fbbb 	bl	800b340 <_Bfree>
 800abca:	e695      	b.n	800a8f8 <_dtoa_r+0x6a0>
 800abcc:	2600      	movs	r6, #0
 800abce:	4637      	mov	r7, r6
 800abd0:	e7e1      	b.n	800ab96 <_dtoa_r+0x93e>
 800abd2:	9700      	str	r7, [sp, #0]
 800abd4:	4637      	mov	r7, r6
 800abd6:	e599      	b.n	800a70c <_dtoa_r+0x4b4>
 800abd8:	40240000 	.word	0x40240000
 800abdc:	9b08      	ldr	r3, [sp, #32]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 80ca 	beq.w	800ad78 <_dtoa_r+0xb20>
 800abe4:	9b03      	ldr	r3, [sp, #12]
 800abe6:	9302      	str	r3, [sp, #8]
 800abe8:	2d00      	cmp	r5, #0
 800abea:	dd05      	ble.n	800abf8 <_dtoa_r+0x9a0>
 800abec:	4639      	mov	r1, r7
 800abee:	462a      	mov	r2, r5
 800abf0:	4620      	mov	r0, r4
 800abf2:	f000 fd77 	bl	800b6e4 <__lshift>
 800abf6:	4607      	mov	r7, r0
 800abf8:	f1b8 0f00 	cmp.w	r8, #0
 800abfc:	d05b      	beq.n	800acb6 <_dtoa_r+0xa5e>
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	4620      	mov	r0, r4
 800ac02:	f000 fb5d 	bl	800b2c0 <_Balloc>
 800ac06:	4605      	mov	r5, r0
 800ac08:	b928      	cbnz	r0, 800ac16 <_dtoa_r+0x9be>
 800ac0a:	4b87      	ldr	r3, [pc, #540]	; (800ae28 <_dtoa_r+0xbd0>)
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac12:	f7ff bb3b 	b.w	800a28c <_dtoa_r+0x34>
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	3202      	adds	r2, #2
 800ac1a:	0092      	lsls	r2, r2, #2
 800ac1c:	f107 010c 	add.w	r1, r7, #12
 800ac20:	300c      	adds	r0, #12
 800ac22:	f7fe fbcd 	bl	80093c0 <memcpy>
 800ac26:	2201      	movs	r2, #1
 800ac28:	4629      	mov	r1, r5
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 fd5a 	bl	800b6e4 <__lshift>
 800ac30:	9b01      	ldr	r3, [sp, #4]
 800ac32:	f103 0901 	add.w	r9, r3, #1
 800ac36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	9305      	str	r3, [sp, #20]
 800ac3e:	f00a 0301 	and.w	r3, sl, #1
 800ac42:	46b8      	mov	r8, r7
 800ac44:	9304      	str	r3, [sp, #16]
 800ac46:	4607      	mov	r7, r0
 800ac48:	4631      	mov	r1, r6
 800ac4a:	ee18 0a10 	vmov	r0, s16
 800ac4e:	f7ff fa78 	bl	800a142 <quorem>
 800ac52:	4641      	mov	r1, r8
 800ac54:	9002      	str	r0, [sp, #8]
 800ac56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac5a:	ee18 0a10 	vmov	r0, s16
 800ac5e:	f000 fdb1 	bl	800b7c4 <__mcmp>
 800ac62:	463a      	mov	r2, r7
 800ac64:	9003      	str	r0, [sp, #12]
 800ac66:	4631      	mov	r1, r6
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fdc7 	bl	800b7fc <__mdiff>
 800ac6e:	68c2      	ldr	r2, [r0, #12]
 800ac70:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ac74:	4605      	mov	r5, r0
 800ac76:	bb02      	cbnz	r2, 800acba <_dtoa_r+0xa62>
 800ac78:	4601      	mov	r1, r0
 800ac7a:	ee18 0a10 	vmov	r0, s16
 800ac7e:	f000 fda1 	bl	800b7c4 <__mcmp>
 800ac82:	4602      	mov	r2, r0
 800ac84:	4629      	mov	r1, r5
 800ac86:	4620      	mov	r0, r4
 800ac88:	9207      	str	r2, [sp, #28]
 800ac8a:	f000 fb59 	bl	800b340 <_Bfree>
 800ac8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac92:	ea43 0102 	orr.w	r1, r3, r2
 800ac96:	9b04      	ldr	r3, [sp, #16]
 800ac98:	430b      	orrs	r3, r1
 800ac9a:	464d      	mov	r5, r9
 800ac9c:	d10f      	bne.n	800acbe <_dtoa_r+0xa66>
 800ac9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aca2:	d02a      	beq.n	800acfa <_dtoa_r+0xaa2>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	dd02      	ble.n	800acb0 <_dtoa_r+0xa58>
 800acaa:	9b02      	ldr	r3, [sp, #8]
 800acac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800acb0:	f88b a000 	strb.w	sl, [fp]
 800acb4:	e775      	b.n	800aba2 <_dtoa_r+0x94a>
 800acb6:	4638      	mov	r0, r7
 800acb8:	e7ba      	b.n	800ac30 <_dtoa_r+0x9d8>
 800acba:	2201      	movs	r2, #1
 800acbc:	e7e2      	b.n	800ac84 <_dtoa_r+0xa2c>
 800acbe:	9b03      	ldr	r3, [sp, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	db04      	blt.n	800acce <_dtoa_r+0xa76>
 800acc4:	9906      	ldr	r1, [sp, #24]
 800acc6:	430b      	orrs	r3, r1
 800acc8:	9904      	ldr	r1, [sp, #16]
 800acca:	430b      	orrs	r3, r1
 800accc:	d122      	bne.n	800ad14 <_dtoa_r+0xabc>
 800acce:	2a00      	cmp	r2, #0
 800acd0:	ddee      	ble.n	800acb0 <_dtoa_r+0xa58>
 800acd2:	ee18 1a10 	vmov	r1, s16
 800acd6:	2201      	movs	r2, #1
 800acd8:	4620      	mov	r0, r4
 800acda:	f000 fd03 	bl	800b6e4 <__lshift>
 800acde:	4631      	mov	r1, r6
 800ace0:	ee08 0a10 	vmov	s16, r0
 800ace4:	f000 fd6e 	bl	800b7c4 <__mcmp>
 800ace8:	2800      	cmp	r0, #0
 800acea:	dc03      	bgt.n	800acf4 <_dtoa_r+0xa9c>
 800acec:	d1e0      	bne.n	800acb0 <_dtoa_r+0xa58>
 800acee:	f01a 0f01 	tst.w	sl, #1
 800acf2:	d0dd      	beq.n	800acb0 <_dtoa_r+0xa58>
 800acf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acf8:	d1d7      	bne.n	800acaa <_dtoa_r+0xa52>
 800acfa:	2339      	movs	r3, #57	; 0x39
 800acfc:	f88b 3000 	strb.w	r3, [fp]
 800ad00:	462b      	mov	r3, r5
 800ad02:	461d      	mov	r5, r3
 800ad04:	3b01      	subs	r3, #1
 800ad06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad0a:	2a39      	cmp	r2, #57	; 0x39
 800ad0c:	d071      	beq.n	800adf2 <_dtoa_r+0xb9a>
 800ad0e:	3201      	adds	r2, #1
 800ad10:	701a      	strb	r2, [r3, #0]
 800ad12:	e746      	b.n	800aba2 <_dtoa_r+0x94a>
 800ad14:	2a00      	cmp	r2, #0
 800ad16:	dd07      	ble.n	800ad28 <_dtoa_r+0xad0>
 800ad18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad1c:	d0ed      	beq.n	800acfa <_dtoa_r+0xaa2>
 800ad1e:	f10a 0301 	add.w	r3, sl, #1
 800ad22:	f88b 3000 	strb.w	r3, [fp]
 800ad26:	e73c      	b.n	800aba2 <_dtoa_r+0x94a>
 800ad28:	9b05      	ldr	r3, [sp, #20]
 800ad2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad2e:	4599      	cmp	r9, r3
 800ad30:	d047      	beq.n	800adc2 <_dtoa_r+0xb6a>
 800ad32:	ee18 1a10 	vmov	r1, s16
 800ad36:	2300      	movs	r3, #0
 800ad38:	220a      	movs	r2, #10
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 fb22 	bl	800b384 <__multadd>
 800ad40:	45b8      	cmp	r8, r7
 800ad42:	ee08 0a10 	vmov	s16, r0
 800ad46:	f04f 0300 	mov.w	r3, #0
 800ad4a:	f04f 020a 	mov.w	r2, #10
 800ad4e:	4641      	mov	r1, r8
 800ad50:	4620      	mov	r0, r4
 800ad52:	d106      	bne.n	800ad62 <_dtoa_r+0xb0a>
 800ad54:	f000 fb16 	bl	800b384 <__multadd>
 800ad58:	4680      	mov	r8, r0
 800ad5a:	4607      	mov	r7, r0
 800ad5c:	f109 0901 	add.w	r9, r9, #1
 800ad60:	e772      	b.n	800ac48 <_dtoa_r+0x9f0>
 800ad62:	f000 fb0f 	bl	800b384 <__multadd>
 800ad66:	4639      	mov	r1, r7
 800ad68:	4680      	mov	r8, r0
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	220a      	movs	r2, #10
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fb08 	bl	800b384 <__multadd>
 800ad74:	4607      	mov	r7, r0
 800ad76:	e7f1      	b.n	800ad5c <_dtoa_r+0xb04>
 800ad78:	9b03      	ldr	r3, [sp, #12]
 800ad7a:	9302      	str	r3, [sp, #8]
 800ad7c:	9d01      	ldr	r5, [sp, #4]
 800ad7e:	ee18 0a10 	vmov	r0, s16
 800ad82:	4631      	mov	r1, r6
 800ad84:	f7ff f9dd 	bl	800a142 <quorem>
 800ad88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad8c:	9b01      	ldr	r3, [sp, #4]
 800ad8e:	f805 ab01 	strb.w	sl, [r5], #1
 800ad92:	1aea      	subs	r2, r5, r3
 800ad94:	9b02      	ldr	r3, [sp, #8]
 800ad96:	4293      	cmp	r3, r2
 800ad98:	dd09      	ble.n	800adae <_dtoa_r+0xb56>
 800ad9a:	ee18 1a10 	vmov	r1, s16
 800ad9e:	2300      	movs	r3, #0
 800ada0:	220a      	movs	r2, #10
 800ada2:	4620      	mov	r0, r4
 800ada4:	f000 faee 	bl	800b384 <__multadd>
 800ada8:	ee08 0a10 	vmov	s16, r0
 800adac:	e7e7      	b.n	800ad7e <_dtoa_r+0xb26>
 800adae:	9b02      	ldr	r3, [sp, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	bfc8      	it	gt
 800adb4:	461d      	movgt	r5, r3
 800adb6:	9b01      	ldr	r3, [sp, #4]
 800adb8:	bfd8      	it	le
 800adba:	2501      	movle	r5, #1
 800adbc:	441d      	add	r5, r3
 800adbe:	f04f 0800 	mov.w	r8, #0
 800adc2:	ee18 1a10 	vmov	r1, s16
 800adc6:	2201      	movs	r2, #1
 800adc8:	4620      	mov	r0, r4
 800adca:	f000 fc8b 	bl	800b6e4 <__lshift>
 800adce:	4631      	mov	r1, r6
 800add0:	ee08 0a10 	vmov	s16, r0
 800add4:	f000 fcf6 	bl	800b7c4 <__mcmp>
 800add8:	2800      	cmp	r0, #0
 800adda:	dc91      	bgt.n	800ad00 <_dtoa_r+0xaa8>
 800addc:	d102      	bne.n	800ade4 <_dtoa_r+0xb8c>
 800adde:	f01a 0f01 	tst.w	sl, #1
 800ade2:	d18d      	bne.n	800ad00 <_dtoa_r+0xaa8>
 800ade4:	462b      	mov	r3, r5
 800ade6:	461d      	mov	r5, r3
 800ade8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adec:	2a30      	cmp	r2, #48	; 0x30
 800adee:	d0fa      	beq.n	800ade6 <_dtoa_r+0xb8e>
 800adf0:	e6d7      	b.n	800aba2 <_dtoa_r+0x94a>
 800adf2:	9a01      	ldr	r2, [sp, #4]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d184      	bne.n	800ad02 <_dtoa_r+0xaaa>
 800adf8:	9b00      	ldr	r3, [sp, #0]
 800adfa:	3301      	adds	r3, #1
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	2331      	movs	r3, #49	; 0x31
 800ae00:	7013      	strb	r3, [r2, #0]
 800ae02:	e6ce      	b.n	800aba2 <_dtoa_r+0x94a>
 800ae04:	4b09      	ldr	r3, [pc, #36]	; (800ae2c <_dtoa_r+0xbd4>)
 800ae06:	f7ff ba95 	b.w	800a334 <_dtoa_r+0xdc>
 800ae0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f47f aa6e 	bne.w	800a2ee <_dtoa_r+0x96>
 800ae12:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <_dtoa_r+0xbd8>)
 800ae14:	f7ff ba8e 	b.w	800a334 <_dtoa_r+0xdc>
 800ae18:	9b02      	ldr	r3, [sp, #8]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	dcae      	bgt.n	800ad7c <_dtoa_r+0xb24>
 800ae1e:	9b06      	ldr	r3, [sp, #24]
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	f73f aea8 	bgt.w	800ab76 <_dtoa_r+0x91e>
 800ae26:	e7a9      	b.n	800ad7c <_dtoa_r+0xb24>
 800ae28:	0800c7a0 	.word	0x0800c7a0
 800ae2c:	0800c6fd 	.word	0x0800c6fd
 800ae30:	0800c721 	.word	0x0800c721

0800ae34 <__sflush_r>:
 800ae34:	898a      	ldrh	r2, [r1, #12]
 800ae36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	0710      	lsls	r0, r2, #28
 800ae3e:	460c      	mov	r4, r1
 800ae40:	d458      	bmi.n	800aef4 <__sflush_r+0xc0>
 800ae42:	684b      	ldr	r3, [r1, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	dc05      	bgt.n	800ae54 <__sflush_r+0x20>
 800ae48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	dc02      	bgt.n	800ae54 <__sflush_r+0x20>
 800ae4e:	2000      	movs	r0, #0
 800ae50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae56:	2e00      	cmp	r6, #0
 800ae58:	d0f9      	beq.n	800ae4e <__sflush_r+0x1a>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae60:	682f      	ldr	r7, [r5, #0]
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	d032      	beq.n	800aecc <__sflush_r+0x98>
 800ae66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	075a      	lsls	r2, r3, #29
 800ae6c:	d505      	bpl.n	800ae7a <__sflush_r+0x46>
 800ae6e:	6863      	ldr	r3, [r4, #4]
 800ae70:	1ac0      	subs	r0, r0, r3
 800ae72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae74:	b10b      	cbz	r3, 800ae7a <__sflush_r+0x46>
 800ae76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae78:	1ac0      	subs	r0, r0, r3
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae80:	6a21      	ldr	r1, [r4, #32]
 800ae82:	4628      	mov	r0, r5
 800ae84:	47b0      	blx	r6
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	d106      	bne.n	800ae9a <__sflush_r+0x66>
 800ae8c:	6829      	ldr	r1, [r5, #0]
 800ae8e:	291d      	cmp	r1, #29
 800ae90:	d82c      	bhi.n	800aeec <__sflush_r+0xb8>
 800ae92:	4a2a      	ldr	r2, [pc, #168]	; (800af3c <__sflush_r+0x108>)
 800ae94:	40ca      	lsrs	r2, r1
 800ae96:	07d6      	lsls	r6, r2, #31
 800ae98:	d528      	bpl.n	800aeec <__sflush_r+0xb8>
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	6062      	str	r2, [r4, #4]
 800ae9e:	04d9      	lsls	r1, r3, #19
 800aea0:	6922      	ldr	r2, [r4, #16]
 800aea2:	6022      	str	r2, [r4, #0]
 800aea4:	d504      	bpl.n	800aeb0 <__sflush_r+0x7c>
 800aea6:	1c42      	adds	r2, r0, #1
 800aea8:	d101      	bne.n	800aeae <__sflush_r+0x7a>
 800aeaa:	682b      	ldr	r3, [r5, #0]
 800aeac:	b903      	cbnz	r3, 800aeb0 <__sflush_r+0x7c>
 800aeae:	6560      	str	r0, [r4, #84]	; 0x54
 800aeb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeb2:	602f      	str	r7, [r5, #0]
 800aeb4:	2900      	cmp	r1, #0
 800aeb6:	d0ca      	beq.n	800ae4e <__sflush_r+0x1a>
 800aeb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aebc:	4299      	cmp	r1, r3
 800aebe:	d002      	beq.n	800aec6 <__sflush_r+0x92>
 800aec0:	4628      	mov	r0, r5
 800aec2:	f000 fd97 	bl	800b9f4 <_free_r>
 800aec6:	2000      	movs	r0, #0
 800aec8:	6360      	str	r0, [r4, #52]	; 0x34
 800aeca:	e7c1      	b.n	800ae50 <__sflush_r+0x1c>
 800aecc:	6a21      	ldr	r1, [r4, #32]
 800aece:	2301      	movs	r3, #1
 800aed0:	4628      	mov	r0, r5
 800aed2:	47b0      	blx	r6
 800aed4:	1c41      	adds	r1, r0, #1
 800aed6:	d1c7      	bne.n	800ae68 <__sflush_r+0x34>
 800aed8:	682b      	ldr	r3, [r5, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d0c4      	beq.n	800ae68 <__sflush_r+0x34>
 800aede:	2b1d      	cmp	r3, #29
 800aee0:	d001      	beq.n	800aee6 <__sflush_r+0xb2>
 800aee2:	2b16      	cmp	r3, #22
 800aee4:	d101      	bne.n	800aeea <__sflush_r+0xb6>
 800aee6:	602f      	str	r7, [r5, #0]
 800aee8:	e7b1      	b.n	800ae4e <__sflush_r+0x1a>
 800aeea:	89a3      	ldrh	r3, [r4, #12]
 800aeec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aef0:	81a3      	strh	r3, [r4, #12]
 800aef2:	e7ad      	b.n	800ae50 <__sflush_r+0x1c>
 800aef4:	690f      	ldr	r7, [r1, #16]
 800aef6:	2f00      	cmp	r7, #0
 800aef8:	d0a9      	beq.n	800ae4e <__sflush_r+0x1a>
 800aefa:	0793      	lsls	r3, r2, #30
 800aefc:	680e      	ldr	r6, [r1, #0]
 800aefe:	bf08      	it	eq
 800af00:	694b      	ldreq	r3, [r1, #20]
 800af02:	600f      	str	r7, [r1, #0]
 800af04:	bf18      	it	ne
 800af06:	2300      	movne	r3, #0
 800af08:	eba6 0807 	sub.w	r8, r6, r7
 800af0c:	608b      	str	r3, [r1, #8]
 800af0e:	f1b8 0f00 	cmp.w	r8, #0
 800af12:	dd9c      	ble.n	800ae4e <__sflush_r+0x1a>
 800af14:	6a21      	ldr	r1, [r4, #32]
 800af16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af18:	4643      	mov	r3, r8
 800af1a:	463a      	mov	r2, r7
 800af1c:	4628      	mov	r0, r5
 800af1e:	47b0      	blx	r6
 800af20:	2800      	cmp	r0, #0
 800af22:	dc06      	bgt.n	800af32 <__sflush_r+0xfe>
 800af24:	89a3      	ldrh	r3, [r4, #12]
 800af26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af2a:	81a3      	strh	r3, [r4, #12]
 800af2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af30:	e78e      	b.n	800ae50 <__sflush_r+0x1c>
 800af32:	4407      	add	r7, r0
 800af34:	eba8 0800 	sub.w	r8, r8, r0
 800af38:	e7e9      	b.n	800af0e <__sflush_r+0xda>
 800af3a:	bf00      	nop
 800af3c:	20400001 	.word	0x20400001

0800af40 <_fflush_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	690b      	ldr	r3, [r1, #16]
 800af44:	4605      	mov	r5, r0
 800af46:	460c      	mov	r4, r1
 800af48:	b913      	cbnz	r3, 800af50 <_fflush_r+0x10>
 800af4a:	2500      	movs	r5, #0
 800af4c:	4628      	mov	r0, r5
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	b118      	cbz	r0, 800af5a <_fflush_r+0x1a>
 800af52:	6983      	ldr	r3, [r0, #24]
 800af54:	b90b      	cbnz	r3, 800af5a <_fflush_r+0x1a>
 800af56:	f000 f887 	bl	800b068 <__sinit>
 800af5a:	4b14      	ldr	r3, [pc, #80]	; (800afac <_fflush_r+0x6c>)
 800af5c:	429c      	cmp	r4, r3
 800af5e:	d11b      	bne.n	800af98 <_fflush_r+0x58>
 800af60:	686c      	ldr	r4, [r5, #4]
 800af62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0ef      	beq.n	800af4a <_fflush_r+0xa>
 800af6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af6c:	07d0      	lsls	r0, r2, #31
 800af6e:	d404      	bmi.n	800af7a <_fflush_r+0x3a>
 800af70:	0599      	lsls	r1, r3, #22
 800af72:	d402      	bmi.n	800af7a <_fflush_r+0x3a>
 800af74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af76:	f000 f91a 	bl	800b1ae <__retarget_lock_acquire_recursive>
 800af7a:	4628      	mov	r0, r5
 800af7c:	4621      	mov	r1, r4
 800af7e:	f7ff ff59 	bl	800ae34 <__sflush_r>
 800af82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af84:	07da      	lsls	r2, r3, #31
 800af86:	4605      	mov	r5, r0
 800af88:	d4e0      	bmi.n	800af4c <_fflush_r+0xc>
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	059b      	lsls	r3, r3, #22
 800af8e:	d4dd      	bmi.n	800af4c <_fflush_r+0xc>
 800af90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af92:	f000 f90d 	bl	800b1b0 <__retarget_lock_release_recursive>
 800af96:	e7d9      	b.n	800af4c <_fflush_r+0xc>
 800af98:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <_fflush_r+0x70>)
 800af9a:	429c      	cmp	r4, r3
 800af9c:	d101      	bne.n	800afa2 <_fflush_r+0x62>
 800af9e:	68ac      	ldr	r4, [r5, #8]
 800afa0:	e7df      	b.n	800af62 <_fflush_r+0x22>
 800afa2:	4b04      	ldr	r3, [pc, #16]	; (800afb4 <_fflush_r+0x74>)
 800afa4:	429c      	cmp	r4, r3
 800afa6:	bf08      	it	eq
 800afa8:	68ec      	ldreq	r4, [r5, #12]
 800afaa:	e7da      	b.n	800af62 <_fflush_r+0x22>
 800afac:	0800c7d4 	.word	0x0800c7d4
 800afb0:	0800c7f4 	.word	0x0800c7f4
 800afb4:	0800c7b4 	.word	0x0800c7b4

0800afb8 <std>:
 800afb8:	2300      	movs	r3, #0
 800afba:	b510      	push	{r4, lr}
 800afbc:	4604      	mov	r4, r0
 800afbe:	e9c0 3300 	strd	r3, r3, [r0]
 800afc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afc6:	6083      	str	r3, [r0, #8]
 800afc8:	8181      	strh	r1, [r0, #12]
 800afca:	6643      	str	r3, [r0, #100]	; 0x64
 800afcc:	81c2      	strh	r2, [r0, #14]
 800afce:	6183      	str	r3, [r0, #24]
 800afd0:	4619      	mov	r1, r3
 800afd2:	2208      	movs	r2, #8
 800afd4:	305c      	adds	r0, #92	; 0x5c
 800afd6:	f7fe fa01 	bl	80093dc <memset>
 800afda:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <std+0x38>)
 800afdc:	6263      	str	r3, [r4, #36]	; 0x24
 800afde:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <std+0x3c>)
 800afe0:	62a3      	str	r3, [r4, #40]	; 0x28
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <std+0x40>)
 800afe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afe6:	4b05      	ldr	r3, [pc, #20]	; (800affc <std+0x44>)
 800afe8:	6224      	str	r4, [r4, #32]
 800afea:	6323      	str	r3, [r4, #48]	; 0x30
 800afec:	bd10      	pop	{r4, pc}
 800afee:	bf00      	nop
 800aff0:	0800bf71 	.word	0x0800bf71
 800aff4:	0800bf93 	.word	0x0800bf93
 800aff8:	0800bfcb 	.word	0x0800bfcb
 800affc:	0800bfef 	.word	0x0800bfef

0800b000 <_cleanup_r>:
 800b000:	4901      	ldr	r1, [pc, #4]	; (800b008 <_cleanup_r+0x8>)
 800b002:	f000 b8af 	b.w	800b164 <_fwalk_reent>
 800b006:	bf00      	nop
 800b008:	0800af41 	.word	0x0800af41

0800b00c <__sfmoreglue>:
 800b00c:	b570      	push	{r4, r5, r6, lr}
 800b00e:	2268      	movs	r2, #104	; 0x68
 800b010:	1e4d      	subs	r5, r1, #1
 800b012:	4355      	muls	r5, r2
 800b014:	460e      	mov	r6, r1
 800b016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b01a:	f000 fd57 	bl	800bacc <_malloc_r>
 800b01e:	4604      	mov	r4, r0
 800b020:	b140      	cbz	r0, 800b034 <__sfmoreglue+0x28>
 800b022:	2100      	movs	r1, #0
 800b024:	e9c0 1600 	strd	r1, r6, [r0]
 800b028:	300c      	adds	r0, #12
 800b02a:	60a0      	str	r0, [r4, #8]
 800b02c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b030:	f7fe f9d4 	bl	80093dc <memset>
 800b034:	4620      	mov	r0, r4
 800b036:	bd70      	pop	{r4, r5, r6, pc}

0800b038 <__sfp_lock_acquire>:
 800b038:	4801      	ldr	r0, [pc, #4]	; (800b040 <__sfp_lock_acquire+0x8>)
 800b03a:	f000 b8b8 	b.w	800b1ae <__retarget_lock_acquire_recursive>
 800b03e:	bf00      	nop
 800b040:	200020b5 	.word	0x200020b5

0800b044 <__sfp_lock_release>:
 800b044:	4801      	ldr	r0, [pc, #4]	; (800b04c <__sfp_lock_release+0x8>)
 800b046:	f000 b8b3 	b.w	800b1b0 <__retarget_lock_release_recursive>
 800b04a:	bf00      	nop
 800b04c:	200020b5 	.word	0x200020b5

0800b050 <__sinit_lock_acquire>:
 800b050:	4801      	ldr	r0, [pc, #4]	; (800b058 <__sinit_lock_acquire+0x8>)
 800b052:	f000 b8ac 	b.w	800b1ae <__retarget_lock_acquire_recursive>
 800b056:	bf00      	nop
 800b058:	200020b6 	.word	0x200020b6

0800b05c <__sinit_lock_release>:
 800b05c:	4801      	ldr	r0, [pc, #4]	; (800b064 <__sinit_lock_release+0x8>)
 800b05e:	f000 b8a7 	b.w	800b1b0 <__retarget_lock_release_recursive>
 800b062:	bf00      	nop
 800b064:	200020b6 	.word	0x200020b6

0800b068 <__sinit>:
 800b068:	b510      	push	{r4, lr}
 800b06a:	4604      	mov	r4, r0
 800b06c:	f7ff fff0 	bl	800b050 <__sinit_lock_acquire>
 800b070:	69a3      	ldr	r3, [r4, #24]
 800b072:	b11b      	cbz	r3, 800b07c <__sinit+0x14>
 800b074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b078:	f7ff bff0 	b.w	800b05c <__sinit_lock_release>
 800b07c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b080:	6523      	str	r3, [r4, #80]	; 0x50
 800b082:	4b13      	ldr	r3, [pc, #76]	; (800b0d0 <__sinit+0x68>)
 800b084:	4a13      	ldr	r2, [pc, #76]	; (800b0d4 <__sinit+0x6c>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	62a2      	str	r2, [r4, #40]	; 0x28
 800b08a:	42a3      	cmp	r3, r4
 800b08c:	bf04      	itt	eq
 800b08e:	2301      	moveq	r3, #1
 800b090:	61a3      	streq	r3, [r4, #24]
 800b092:	4620      	mov	r0, r4
 800b094:	f000 f820 	bl	800b0d8 <__sfp>
 800b098:	6060      	str	r0, [r4, #4]
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 f81c 	bl	800b0d8 <__sfp>
 800b0a0:	60a0      	str	r0, [r4, #8]
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 f818 	bl	800b0d8 <__sfp>
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	60e0      	str	r0, [r4, #12]
 800b0ac:	2104      	movs	r1, #4
 800b0ae:	6860      	ldr	r0, [r4, #4]
 800b0b0:	f7ff ff82 	bl	800afb8 <std>
 800b0b4:	68a0      	ldr	r0, [r4, #8]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	2109      	movs	r1, #9
 800b0ba:	f7ff ff7d 	bl	800afb8 <std>
 800b0be:	68e0      	ldr	r0, [r4, #12]
 800b0c0:	2202      	movs	r2, #2
 800b0c2:	2112      	movs	r1, #18
 800b0c4:	f7ff ff78 	bl	800afb8 <std>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	61a3      	str	r3, [r4, #24]
 800b0cc:	e7d2      	b.n	800b074 <__sinit+0xc>
 800b0ce:	bf00      	nop
 800b0d0:	0800c6d8 	.word	0x0800c6d8
 800b0d4:	0800b001 	.word	0x0800b001

0800b0d8 <__sfp>:
 800b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0da:	4607      	mov	r7, r0
 800b0dc:	f7ff ffac 	bl	800b038 <__sfp_lock_acquire>
 800b0e0:	4b1e      	ldr	r3, [pc, #120]	; (800b15c <__sfp+0x84>)
 800b0e2:	681e      	ldr	r6, [r3, #0]
 800b0e4:	69b3      	ldr	r3, [r6, #24]
 800b0e6:	b913      	cbnz	r3, 800b0ee <__sfp+0x16>
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f7ff ffbd 	bl	800b068 <__sinit>
 800b0ee:	3648      	adds	r6, #72	; 0x48
 800b0f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	d503      	bpl.n	800b100 <__sfp+0x28>
 800b0f8:	6833      	ldr	r3, [r6, #0]
 800b0fa:	b30b      	cbz	r3, 800b140 <__sfp+0x68>
 800b0fc:	6836      	ldr	r6, [r6, #0]
 800b0fe:	e7f7      	b.n	800b0f0 <__sfp+0x18>
 800b100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b104:	b9d5      	cbnz	r5, 800b13c <__sfp+0x64>
 800b106:	4b16      	ldr	r3, [pc, #88]	; (800b160 <__sfp+0x88>)
 800b108:	60e3      	str	r3, [r4, #12]
 800b10a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b10e:	6665      	str	r5, [r4, #100]	; 0x64
 800b110:	f000 f84c 	bl	800b1ac <__retarget_lock_init_recursive>
 800b114:	f7ff ff96 	bl	800b044 <__sfp_lock_release>
 800b118:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b11c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b120:	6025      	str	r5, [r4, #0]
 800b122:	61a5      	str	r5, [r4, #24]
 800b124:	2208      	movs	r2, #8
 800b126:	4629      	mov	r1, r5
 800b128:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b12c:	f7fe f956 	bl	80093dc <memset>
 800b130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b138:	4620      	mov	r0, r4
 800b13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b13c:	3468      	adds	r4, #104	; 0x68
 800b13e:	e7d9      	b.n	800b0f4 <__sfp+0x1c>
 800b140:	2104      	movs	r1, #4
 800b142:	4638      	mov	r0, r7
 800b144:	f7ff ff62 	bl	800b00c <__sfmoreglue>
 800b148:	4604      	mov	r4, r0
 800b14a:	6030      	str	r0, [r6, #0]
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d1d5      	bne.n	800b0fc <__sfp+0x24>
 800b150:	f7ff ff78 	bl	800b044 <__sfp_lock_release>
 800b154:	230c      	movs	r3, #12
 800b156:	603b      	str	r3, [r7, #0]
 800b158:	e7ee      	b.n	800b138 <__sfp+0x60>
 800b15a:	bf00      	nop
 800b15c:	0800c6d8 	.word	0x0800c6d8
 800b160:	ffff0001 	.word	0xffff0001

0800b164 <_fwalk_reent>:
 800b164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b168:	4606      	mov	r6, r0
 800b16a:	4688      	mov	r8, r1
 800b16c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b170:	2700      	movs	r7, #0
 800b172:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b176:	f1b9 0901 	subs.w	r9, r9, #1
 800b17a:	d505      	bpl.n	800b188 <_fwalk_reent+0x24>
 800b17c:	6824      	ldr	r4, [r4, #0]
 800b17e:	2c00      	cmp	r4, #0
 800b180:	d1f7      	bne.n	800b172 <_fwalk_reent+0xe>
 800b182:	4638      	mov	r0, r7
 800b184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b188:	89ab      	ldrh	r3, [r5, #12]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d907      	bls.n	800b19e <_fwalk_reent+0x3a>
 800b18e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b192:	3301      	adds	r3, #1
 800b194:	d003      	beq.n	800b19e <_fwalk_reent+0x3a>
 800b196:	4629      	mov	r1, r5
 800b198:	4630      	mov	r0, r6
 800b19a:	47c0      	blx	r8
 800b19c:	4307      	orrs	r7, r0
 800b19e:	3568      	adds	r5, #104	; 0x68
 800b1a0:	e7e9      	b.n	800b176 <_fwalk_reent+0x12>
	...

0800b1a4 <_localeconv_r>:
 800b1a4:	4800      	ldr	r0, [pc, #0]	; (800b1a8 <_localeconv_r+0x4>)
 800b1a6:	4770      	bx	lr
 800b1a8:	20000164 	.word	0x20000164

0800b1ac <__retarget_lock_init_recursive>:
 800b1ac:	4770      	bx	lr

0800b1ae <__retarget_lock_acquire_recursive>:
 800b1ae:	4770      	bx	lr

0800b1b0 <__retarget_lock_release_recursive>:
 800b1b0:	4770      	bx	lr

0800b1b2 <__swhatbuf_r>:
 800b1b2:	b570      	push	{r4, r5, r6, lr}
 800b1b4:	460e      	mov	r6, r1
 800b1b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ba:	2900      	cmp	r1, #0
 800b1bc:	b096      	sub	sp, #88	; 0x58
 800b1be:	4614      	mov	r4, r2
 800b1c0:	461d      	mov	r5, r3
 800b1c2:	da08      	bge.n	800b1d6 <__swhatbuf_r+0x24>
 800b1c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	602a      	str	r2, [r5, #0]
 800b1cc:	061a      	lsls	r2, r3, #24
 800b1ce:	d410      	bmi.n	800b1f2 <__swhatbuf_r+0x40>
 800b1d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1d4:	e00e      	b.n	800b1f4 <__swhatbuf_r+0x42>
 800b1d6:	466a      	mov	r2, sp
 800b1d8:	f000 ff30 	bl	800c03c <_fstat_r>
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	dbf1      	blt.n	800b1c4 <__swhatbuf_r+0x12>
 800b1e0:	9a01      	ldr	r2, [sp, #4]
 800b1e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1ea:	425a      	negs	r2, r3
 800b1ec:	415a      	adcs	r2, r3
 800b1ee:	602a      	str	r2, [r5, #0]
 800b1f0:	e7ee      	b.n	800b1d0 <__swhatbuf_r+0x1e>
 800b1f2:	2340      	movs	r3, #64	; 0x40
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	6023      	str	r3, [r4, #0]
 800b1f8:	b016      	add	sp, #88	; 0x58
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}

0800b1fc <__smakebuf_r>:
 800b1fc:	898b      	ldrh	r3, [r1, #12]
 800b1fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b200:	079d      	lsls	r5, r3, #30
 800b202:	4606      	mov	r6, r0
 800b204:	460c      	mov	r4, r1
 800b206:	d507      	bpl.n	800b218 <__smakebuf_r+0x1c>
 800b208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	6123      	str	r3, [r4, #16]
 800b210:	2301      	movs	r3, #1
 800b212:	6163      	str	r3, [r4, #20]
 800b214:	b002      	add	sp, #8
 800b216:	bd70      	pop	{r4, r5, r6, pc}
 800b218:	ab01      	add	r3, sp, #4
 800b21a:	466a      	mov	r2, sp
 800b21c:	f7ff ffc9 	bl	800b1b2 <__swhatbuf_r>
 800b220:	9900      	ldr	r1, [sp, #0]
 800b222:	4605      	mov	r5, r0
 800b224:	4630      	mov	r0, r6
 800b226:	f000 fc51 	bl	800bacc <_malloc_r>
 800b22a:	b948      	cbnz	r0, 800b240 <__smakebuf_r+0x44>
 800b22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b230:	059a      	lsls	r2, r3, #22
 800b232:	d4ef      	bmi.n	800b214 <__smakebuf_r+0x18>
 800b234:	f023 0303 	bic.w	r3, r3, #3
 800b238:	f043 0302 	orr.w	r3, r3, #2
 800b23c:	81a3      	strh	r3, [r4, #12]
 800b23e:	e7e3      	b.n	800b208 <__smakebuf_r+0xc>
 800b240:	4b0d      	ldr	r3, [pc, #52]	; (800b278 <__smakebuf_r+0x7c>)
 800b242:	62b3      	str	r3, [r6, #40]	; 0x28
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	6020      	str	r0, [r4, #0]
 800b248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b24c:	81a3      	strh	r3, [r4, #12]
 800b24e:	9b00      	ldr	r3, [sp, #0]
 800b250:	6163      	str	r3, [r4, #20]
 800b252:	9b01      	ldr	r3, [sp, #4]
 800b254:	6120      	str	r0, [r4, #16]
 800b256:	b15b      	cbz	r3, 800b270 <__smakebuf_r+0x74>
 800b258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b25c:	4630      	mov	r0, r6
 800b25e:	f000 feff 	bl	800c060 <_isatty_r>
 800b262:	b128      	cbz	r0, 800b270 <__smakebuf_r+0x74>
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	f023 0303 	bic.w	r3, r3, #3
 800b26a:	f043 0301 	orr.w	r3, r3, #1
 800b26e:	81a3      	strh	r3, [r4, #12]
 800b270:	89a0      	ldrh	r0, [r4, #12]
 800b272:	4305      	orrs	r5, r0
 800b274:	81a5      	strh	r5, [r4, #12]
 800b276:	e7cd      	b.n	800b214 <__smakebuf_r+0x18>
 800b278:	0800b001 	.word	0x0800b001

0800b27c <malloc>:
 800b27c:	4b02      	ldr	r3, [pc, #8]	; (800b288 <malloc+0xc>)
 800b27e:	4601      	mov	r1, r0
 800b280:	6818      	ldr	r0, [r3, #0]
 800b282:	f000 bc23 	b.w	800bacc <_malloc_r>
 800b286:	bf00      	nop
 800b288:	20000010 	.word	0x20000010

0800b28c <memmove>:
 800b28c:	4288      	cmp	r0, r1
 800b28e:	b510      	push	{r4, lr}
 800b290:	eb01 0402 	add.w	r4, r1, r2
 800b294:	d902      	bls.n	800b29c <memmove+0x10>
 800b296:	4284      	cmp	r4, r0
 800b298:	4623      	mov	r3, r4
 800b29a:	d807      	bhi.n	800b2ac <memmove+0x20>
 800b29c:	1e43      	subs	r3, r0, #1
 800b29e:	42a1      	cmp	r1, r4
 800b2a0:	d008      	beq.n	800b2b4 <memmove+0x28>
 800b2a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2aa:	e7f8      	b.n	800b29e <memmove+0x12>
 800b2ac:	4402      	add	r2, r0
 800b2ae:	4601      	mov	r1, r0
 800b2b0:	428a      	cmp	r2, r1
 800b2b2:	d100      	bne.n	800b2b6 <memmove+0x2a>
 800b2b4:	bd10      	pop	{r4, pc}
 800b2b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2be:	e7f7      	b.n	800b2b0 <memmove+0x24>

0800b2c0 <_Balloc>:
 800b2c0:	b570      	push	{r4, r5, r6, lr}
 800b2c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	460d      	mov	r5, r1
 800b2c8:	b976      	cbnz	r6, 800b2e8 <_Balloc+0x28>
 800b2ca:	2010      	movs	r0, #16
 800b2cc:	f7ff ffd6 	bl	800b27c <malloc>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	6260      	str	r0, [r4, #36]	; 0x24
 800b2d4:	b920      	cbnz	r0, 800b2e0 <_Balloc+0x20>
 800b2d6:	4b18      	ldr	r3, [pc, #96]	; (800b338 <_Balloc+0x78>)
 800b2d8:	4818      	ldr	r0, [pc, #96]	; (800b33c <_Balloc+0x7c>)
 800b2da:	2166      	movs	r1, #102	; 0x66
 800b2dc:	f7fe f816 	bl	800930c <__assert_func>
 800b2e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2e4:	6006      	str	r6, [r0, #0]
 800b2e6:	60c6      	str	r6, [r0, #12]
 800b2e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b2ea:	68f3      	ldr	r3, [r6, #12]
 800b2ec:	b183      	cbz	r3, 800b310 <_Balloc+0x50>
 800b2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2f6:	b9b8      	cbnz	r0, 800b328 <_Balloc+0x68>
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	fa01 f605 	lsl.w	r6, r1, r5
 800b2fe:	1d72      	adds	r2, r6, #5
 800b300:	0092      	lsls	r2, r2, #2
 800b302:	4620      	mov	r0, r4
 800b304:	f000 fb60 	bl	800b9c8 <_calloc_r>
 800b308:	b160      	cbz	r0, 800b324 <_Balloc+0x64>
 800b30a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b30e:	e00e      	b.n	800b32e <_Balloc+0x6e>
 800b310:	2221      	movs	r2, #33	; 0x21
 800b312:	2104      	movs	r1, #4
 800b314:	4620      	mov	r0, r4
 800b316:	f000 fb57 	bl	800b9c8 <_calloc_r>
 800b31a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b31c:	60f0      	str	r0, [r6, #12]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1e4      	bne.n	800b2ee <_Balloc+0x2e>
 800b324:	2000      	movs	r0, #0
 800b326:	bd70      	pop	{r4, r5, r6, pc}
 800b328:	6802      	ldr	r2, [r0, #0]
 800b32a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b32e:	2300      	movs	r3, #0
 800b330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b334:	e7f7      	b.n	800b326 <_Balloc+0x66>
 800b336:	bf00      	nop
 800b338:	0800c72e 	.word	0x0800c72e
 800b33c:	0800c814 	.word	0x0800c814

0800b340 <_Bfree>:
 800b340:	b570      	push	{r4, r5, r6, lr}
 800b342:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b344:	4605      	mov	r5, r0
 800b346:	460c      	mov	r4, r1
 800b348:	b976      	cbnz	r6, 800b368 <_Bfree+0x28>
 800b34a:	2010      	movs	r0, #16
 800b34c:	f7ff ff96 	bl	800b27c <malloc>
 800b350:	4602      	mov	r2, r0
 800b352:	6268      	str	r0, [r5, #36]	; 0x24
 800b354:	b920      	cbnz	r0, 800b360 <_Bfree+0x20>
 800b356:	4b09      	ldr	r3, [pc, #36]	; (800b37c <_Bfree+0x3c>)
 800b358:	4809      	ldr	r0, [pc, #36]	; (800b380 <_Bfree+0x40>)
 800b35a:	218a      	movs	r1, #138	; 0x8a
 800b35c:	f7fd ffd6 	bl	800930c <__assert_func>
 800b360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b364:	6006      	str	r6, [r0, #0]
 800b366:	60c6      	str	r6, [r0, #12]
 800b368:	b13c      	cbz	r4, 800b37a <_Bfree+0x3a>
 800b36a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b36c:	6862      	ldr	r2, [r4, #4]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b374:	6021      	str	r1, [r4, #0]
 800b376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
 800b37c:	0800c72e 	.word	0x0800c72e
 800b380:	0800c814 	.word	0x0800c814

0800b384 <__multadd>:
 800b384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b388:	690d      	ldr	r5, [r1, #16]
 800b38a:	4607      	mov	r7, r0
 800b38c:	460c      	mov	r4, r1
 800b38e:	461e      	mov	r6, r3
 800b390:	f101 0c14 	add.w	ip, r1, #20
 800b394:	2000      	movs	r0, #0
 800b396:	f8dc 3000 	ldr.w	r3, [ip]
 800b39a:	b299      	uxth	r1, r3
 800b39c:	fb02 6101 	mla	r1, r2, r1, r6
 800b3a0:	0c1e      	lsrs	r6, r3, #16
 800b3a2:	0c0b      	lsrs	r3, r1, #16
 800b3a4:	fb02 3306 	mla	r3, r2, r6, r3
 800b3a8:	b289      	uxth	r1, r1
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3b0:	4285      	cmp	r5, r0
 800b3b2:	f84c 1b04 	str.w	r1, [ip], #4
 800b3b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b3ba:	dcec      	bgt.n	800b396 <__multadd+0x12>
 800b3bc:	b30e      	cbz	r6, 800b402 <__multadd+0x7e>
 800b3be:	68a3      	ldr	r3, [r4, #8]
 800b3c0:	42ab      	cmp	r3, r5
 800b3c2:	dc19      	bgt.n	800b3f8 <__multadd+0x74>
 800b3c4:	6861      	ldr	r1, [r4, #4]
 800b3c6:	4638      	mov	r0, r7
 800b3c8:	3101      	adds	r1, #1
 800b3ca:	f7ff ff79 	bl	800b2c0 <_Balloc>
 800b3ce:	4680      	mov	r8, r0
 800b3d0:	b928      	cbnz	r0, 800b3de <__multadd+0x5a>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	4b0c      	ldr	r3, [pc, #48]	; (800b408 <__multadd+0x84>)
 800b3d6:	480d      	ldr	r0, [pc, #52]	; (800b40c <__multadd+0x88>)
 800b3d8:	21b5      	movs	r1, #181	; 0xb5
 800b3da:	f7fd ff97 	bl	800930c <__assert_func>
 800b3de:	6922      	ldr	r2, [r4, #16]
 800b3e0:	3202      	adds	r2, #2
 800b3e2:	f104 010c 	add.w	r1, r4, #12
 800b3e6:	0092      	lsls	r2, r2, #2
 800b3e8:	300c      	adds	r0, #12
 800b3ea:	f7fd ffe9 	bl	80093c0 <memcpy>
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7ff ffa5 	bl	800b340 <_Bfree>
 800b3f6:	4644      	mov	r4, r8
 800b3f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3fc:	3501      	adds	r5, #1
 800b3fe:	615e      	str	r6, [r3, #20]
 800b400:	6125      	str	r5, [r4, #16]
 800b402:	4620      	mov	r0, r4
 800b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b408:	0800c7a0 	.word	0x0800c7a0
 800b40c:	0800c814 	.word	0x0800c814

0800b410 <__hi0bits>:
 800b410:	0c03      	lsrs	r3, r0, #16
 800b412:	041b      	lsls	r3, r3, #16
 800b414:	b9d3      	cbnz	r3, 800b44c <__hi0bits+0x3c>
 800b416:	0400      	lsls	r0, r0, #16
 800b418:	2310      	movs	r3, #16
 800b41a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b41e:	bf04      	itt	eq
 800b420:	0200      	lsleq	r0, r0, #8
 800b422:	3308      	addeq	r3, #8
 800b424:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b428:	bf04      	itt	eq
 800b42a:	0100      	lsleq	r0, r0, #4
 800b42c:	3304      	addeq	r3, #4
 800b42e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b432:	bf04      	itt	eq
 800b434:	0080      	lsleq	r0, r0, #2
 800b436:	3302      	addeq	r3, #2
 800b438:	2800      	cmp	r0, #0
 800b43a:	db05      	blt.n	800b448 <__hi0bits+0x38>
 800b43c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b440:	f103 0301 	add.w	r3, r3, #1
 800b444:	bf08      	it	eq
 800b446:	2320      	moveq	r3, #32
 800b448:	4618      	mov	r0, r3
 800b44a:	4770      	bx	lr
 800b44c:	2300      	movs	r3, #0
 800b44e:	e7e4      	b.n	800b41a <__hi0bits+0xa>

0800b450 <__lo0bits>:
 800b450:	6803      	ldr	r3, [r0, #0]
 800b452:	f013 0207 	ands.w	r2, r3, #7
 800b456:	4601      	mov	r1, r0
 800b458:	d00b      	beq.n	800b472 <__lo0bits+0x22>
 800b45a:	07da      	lsls	r2, r3, #31
 800b45c:	d423      	bmi.n	800b4a6 <__lo0bits+0x56>
 800b45e:	0798      	lsls	r0, r3, #30
 800b460:	bf49      	itett	mi
 800b462:	085b      	lsrmi	r3, r3, #1
 800b464:	089b      	lsrpl	r3, r3, #2
 800b466:	2001      	movmi	r0, #1
 800b468:	600b      	strmi	r3, [r1, #0]
 800b46a:	bf5c      	itt	pl
 800b46c:	600b      	strpl	r3, [r1, #0]
 800b46e:	2002      	movpl	r0, #2
 800b470:	4770      	bx	lr
 800b472:	b298      	uxth	r0, r3
 800b474:	b9a8      	cbnz	r0, 800b4a2 <__lo0bits+0x52>
 800b476:	0c1b      	lsrs	r3, r3, #16
 800b478:	2010      	movs	r0, #16
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	b90a      	cbnz	r2, 800b482 <__lo0bits+0x32>
 800b47e:	3008      	adds	r0, #8
 800b480:	0a1b      	lsrs	r3, r3, #8
 800b482:	071a      	lsls	r2, r3, #28
 800b484:	bf04      	itt	eq
 800b486:	091b      	lsreq	r3, r3, #4
 800b488:	3004      	addeq	r0, #4
 800b48a:	079a      	lsls	r2, r3, #30
 800b48c:	bf04      	itt	eq
 800b48e:	089b      	lsreq	r3, r3, #2
 800b490:	3002      	addeq	r0, #2
 800b492:	07da      	lsls	r2, r3, #31
 800b494:	d403      	bmi.n	800b49e <__lo0bits+0x4e>
 800b496:	085b      	lsrs	r3, r3, #1
 800b498:	f100 0001 	add.w	r0, r0, #1
 800b49c:	d005      	beq.n	800b4aa <__lo0bits+0x5a>
 800b49e:	600b      	str	r3, [r1, #0]
 800b4a0:	4770      	bx	lr
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	e7e9      	b.n	800b47a <__lo0bits+0x2a>
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	4770      	bx	lr
 800b4aa:	2020      	movs	r0, #32
 800b4ac:	4770      	bx	lr
	...

0800b4b0 <__i2b>:
 800b4b0:	b510      	push	{r4, lr}
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	2101      	movs	r1, #1
 800b4b6:	f7ff ff03 	bl	800b2c0 <_Balloc>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	b928      	cbnz	r0, 800b4ca <__i2b+0x1a>
 800b4be:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <__i2b+0x24>)
 800b4c0:	4805      	ldr	r0, [pc, #20]	; (800b4d8 <__i2b+0x28>)
 800b4c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b4c6:	f7fd ff21 	bl	800930c <__assert_func>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	6144      	str	r4, [r0, #20]
 800b4ce:	6103      	str	r3, [r0, #16]
 800b4d0:	bd10      	pop	{r4, pc}
 800b4d2:	bf00      	nop
 800b4d4:	0800c7a0 	.word	0x0800c7a0
 800b4d8:	0800c814 	.word	0x0800c814

0800b4dc <__multiply>:
 800b4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e0:	4691      	mov	r9, r2
 800b4e2:	690a      	ldr	r2, [r1, #16]
 800b4e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	bfb8      	it	lt
 800b4ec:	460b      	movlt	r3, r1
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	bfbc      	itt	lt
 800b4f2:	464c      	movlt	r4, r9
 800b4f4:	4699      	movlt	r9, r3
 800b4f6:	6927      	ldr	r7, [r4, #16]
 800b4f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4fc:	68a3      	ldr	r3, [r4, #8]
 800b4fe:	6861      	ldr	r1, [r4, #4]
 800b500:	eb07 060a 	add.w	r6, r7, sl
 800b504:	42b3      	cmp	r3, r6
 800b506:	b085      	sub	sp, #20
 800b508:	bfb8      	it	lt
 800b50a:	3101      	addlt	r1, #1
 800b50c:	f7ff fed8 	bl	800b2c0 <_Balloc>
 800b510:	b930      	cbnz	r0, 800b520 <__multiply+0x44>
 800b512:	4602      	mov	r2, r0
 800b514:	4b44      	ldr	r3, [pc, #272]	; (800b628 <__multiply+0x14c>)
 800b516:	4845      	ldr	r0, [pc, #276]	; (800b62c <__multiply+0x150>)
 800b518:	f240 115d 	movw	r1, #349	; 0x15d
 800b51c:	f7fd fef6 	bl	800930c <__assert_func>
 800b520:	f100 0514 	add.w	r5, r0, #20
 800b524:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b528:	462b      	mov	r3, r5
 800b52a:	2200      	movs	r2, #0
 800b52c:	4543      	cmp	r3, r8
 800b52e:	d321      	bcc.n	800b574 <__multiply+0x98>
 800b530:	f104 0314 	add.w	r3, r4, #20
 800b534:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b538:	f109 0314 	add.w	r3, r9, #20
 800b53c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b540:	9202      	str	r2, [sp, #8]
 800b542:	1b3a      	subs	r2, r7, r4
 800b544:	3a15      	subs	r2, #21
 800b546:	f022 0203 	bic.w	r2, r2, #3
 800b54a:	3204      	adds	r2, #4
 800b54c:	f104 0115 	add.w	r1, r4, #21
 800b550:	428f      	cmp	r7, r1
 800b552:	bf38      	it	cc
 800b554:	2204      	movcc	r2, #4
 800b556:	9201      	str	r2, [sp, #4]
 800b558:	9a02      	ldr	r2, [sp, #8]
 800b55a:	9303      	str	r3, [sp, #12]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d80c      	bhi.n	800b57a <__multiply+0x9e>
 800b560:	2e00      	cmp	r6, #0
 800b562:	dd03      	ble.n	800b56c <__multiply+0x90>
 800b564:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d05a      	beq.n	800b622 <__multiply+0x146>
 800b56c:	6106      	str	r6, [r0, #16]
 800b56e:	b005      	add	sp, #20
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	f843 2b04 	str.w	r2, [r3], #4
 800b578:	e7d8      	b.n	800b52c <__multiply+0x50>
 800b57a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b57e:	f1ba 0f00 	cmp.w	sl, #0
 800b582:	d024      	beq.n	800b5ce <__multiply+0xf2>
 800b584:	f104 0e14 	add.w	lr, r4, #20
 800b588:	46a9      	mov	r9, r5
 800b58a:	f04f 0c00 	mov.w	ip, #0
 800b58e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b592:	f8d9 1000 	ldr.w	r1, [r9]
 800b596:	fa1f fb82 	uxth.w	fp, r2
 800b59a:	b289      	uxth	r1, r1
 800b59c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b5a4:	f8d9 2000 	ldr.w	r2, [r9]
 800b5a8:	4461      	add	r1, ip
 800b5aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800b5b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b5b6:	b289      	uxth	r1, r1
 800b5b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b5bc:	4577      	cmp	r7, lr
 800b5be:	f849 1b04 	str.w	r1, [r9], #4
 800b5c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b5c6:	d8e2      	bhi.n	800b58e <__multiply+0xb2>
 800b5c8:	9a01      	ldr	r2, [sp, #4]
 800b5ca:	f845 c002 	str.w	ip, [r5, r2]
 800b5ce:	9a03      	ldr	r2, [sp, #12]
 800b5d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	f1b9 0f00 	cmp.w	r9, #0
 800b5da:	d020      	beq.n	800b61e <__multiply+0x142>
 800b5dc:	6829      	ldr	r1, [r5, #0]
 800b5de:	f104 0c14 	add.w	ip, r4, #20
 800b5e2:	46ae      	mov	lr, r5
 800b5e4:	f04f 0a00 	mov.w	sl, #0
 800b5e8:	f8bc b000 	ldrh.w	fp, [ip]
 800b5ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b5f0:	fb09 220b 	mla	r2, r9, fp, r2
 800b5f4:	4492      	add	sl, r2
 800b5f6:	b289      	uxth	r1, r1
 800b5f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b5fc:	f84e 1b04 	str.w	r1, [lr], #4
 800b600:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b604:	f8be 1000 	ldrh.w	r1, [lr]
 800b608:	0c12      	lsrs	r2, r2, #16
 800b60a:	fb09 1102 	mla	r1, r9, r2, r1
 800b60e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b612:	4567      	cmp	r7, ip
 800b614:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b618:	d8e6      	bhi.n	800b5e8 <__multiply+0x10c>
 800b61a:	9a01      	ldr	r2, [sp, #4]
 800b61c:	50a9      	str	r1, [r5, r2]
 800b61e:	3504      	adds	r5, #4
 800b620:	e79a      	b.n	800b558 <__multiply+0x7c>
 800b622:	3e01      	subs	r6, #1
 800b624:	e79c      	b.n	800b560 <__multiply+0x84>
 800b626:	bf00      	nop
 800b628:	0800c7a0 	.word	0x0800c7a0
 800b62c:	0800c814 	.word	0x0800c814

0800b630 <__pow5mult>:
 800b630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b634:	4615      	mov	r5, r2
 800b636:	f012 0203 	ands.w	r2, r2, #3
 800b63a:	4606      	mov	r6, r0
 800b63c:	460f      	mov	r7, r1
 800b63e:	d007      	beq.n	800b650 <__pow5mult+0x20>
 800b640:	4c25      	ldr	r4, [pc, #148]	; (800b6d8 <__pow5mult+0xa8>)
 800b642:	3a01      	subs	r2, #1
 800b644:	2300      	movs	r3, #0
 800b646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b64a:	f7ff fe9b 	bl	800b384 <__multadd>
 800b64e:	4607      	mov	r7, r0
 800b650:	10ad      	asrs	r5, r5, #2
 800b652:	d03d      	beq.n	800b6d0 <__pow5mult+0xa0>
 800b654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b656:	b97c      	cbnz	r4, 800b678 <__pow5mult+0x48>
 800b658:	2010      	movs	r0, #16
 800b65a:	f7ff fe0f 	bl	800b27c <malloc>
 800b65e:	4602      	mov	r2, r0
 800b660:	6270      	str	r0, [r6, #36]	; 0x24
 800b662:	b928      	cbnz	r0, 800b670 <__pow5mult+0x40>
 800b664:	4b1d      	ldr	r3, [pc, #116]	; (800b6dc <__pow5mult+0xac>)
 800b666:	481e      	ldr	r0, [pc, #120]	; (800b6e0 <__pow5mult+0xb0>)
 800b668:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b66c:	f7fd fe4e 	bl	800930c <__assert_func>
 800b670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b674:	6004      	str	r4, [r0, #0]
 800b676:	60c4      	str	r4, [r0, #12]
 800b678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b67c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b680:	b94c      	cbnz	r4, 800b696 <__pow5mult+0x66>
 800b682:	f240 2171 	movw	r1, #625	; 0x271
 800b686:	4630      	mov	r0, r6
 800b688:	f7ff ff12 	bl	800b4b0 <__i2b>
 800b68c:	2300      	movs	r3, #0
 800b68e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b692:	4604      	mov	r4, r0
 800b694:	6003      	str	r3, [r0, #0]
 800b696:	f04f 0900 	mov.w	r9, #0
 800b69a:	07eb      	lsls	r3, r5, #31
 800b69c:	d50a      	bpl.n	800b6b4 <__pow5mult+0x84>
 800b69e:	4639      	mov	r1, r7
 800b6a0:	4622      	mov	r2, r4
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f7ff ff1a 	bl	800b4dc <__multiply>
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	4680      	mov	r8, r0
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7ff fe47 	bl	800b340 <_Bfree>
 800b6b2:	4647      	mov	r7, r8
 800b6b4:	106d      	asrs	r5, r5, #1
 800b6b6:	d00b      	beq.n	800b6d0 <__pow5mult+0xa0>
 800b6b8:	6820      	ldr	r0, [r4, #0]
 800b6ba:	b938      	cbnz	r0, 800b6cc <__pow5mult+0x9c>
 800b6bc:	4622      	mov	r2, r4
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7ff ff0b 	bl	800b4dc <__multiply>
 800b6c6:	6020      	str	r0, [r4, #0]
 800b6c8:	f8c0 9000 	str.w	r9, [r0]
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	e7e4      	b.n	800b69a <__pow5mult+0x6a>
 800b6d0:	4638      	mov	r0, r7
 800b6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d6:	bf00      	nop
 800b6d8:	0800c960 	.word	0x0800c960
 800b6dc:	0800c72e 	.word	0x0800c72e
 800b6e0:	0800c814 	.word	0x0800c814

0800b6e4 <__lshift>:
 800b6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	6849      	ldr	r1, [r1, #4]
 800b6ec:	6923      	ldr	r3, [r4, #16]
 800b6ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6f2:	68a3      	ldr	r3, [r4, #8]
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	4691      	mov	r9, r2
 800b6f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6fc:	f108 0601 	add.w	r6, r8, #1
 800b700:	42b3      	cmp	r3, r6
 800b702:	db0b      	blt.n	800b71c <__lshift+0x38>
 800b704:	4638      	mov	r0, r7
 800b706:	f7ff fddb 	bl	800b2c0 <_Balloc>
 800b70a:	4605      	mov	r5, r0
 800b70c:	b948      	cbnz	r0, 800b722 <__lshift+0x3e>
 800b70e:	4602      	mov	r2, r0
 800b710:	4b2a      	ldr	r3, [pc, #168]	; (800b7bc <__lshift+0xd8>)
 800b712:	482b      	ldr	r0, [pc, #172]	; (800b7c0 <__lshift+0xdc>)
 800b714:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b718:	f7fd fdf8 	bl	800930c <__assert_func>
 800b71c:	3101      	adds	r1, #1
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	e7ee      	b.n	800b700 <__lshift+0x1c>
 800b722:	2300      	movs	r3, #0
 800b724:	f100 0114 	add.w	r1, r0, #20
 800b728:	f100 0210 	add.w	r2, r0, #16
 800b72c:	4618      	mov	r0, r3
 800b72e:	4553      	cmp	r3, sl
 800b730:	db37      	blt.n	800b7a2 <__lshift+0xbe>
 800b732:	6920      	ldr	r0, [r4, #16]
 800b734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b738:	f104 0314 	add.w	r3, r4, #20
 800b73c:	f019 091f 	ands.w	r9, r9, #31
 800b740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b744:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b748:	d02f      	beq.n	800b7aa <__lshift+0xc6>
 800b74a:	f1c9 0e20 	rsb	lr, r9, #32
 800b74e:	468a      	mov	sl, r1
 800b750:	f04f 0c00 	mov.w	ip, #0
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	fa02 f209 	lsl.w	r2, r2, r9
 800b75a:	ea42 020c 	orr.w	r2, r2, ip
 800b75e:	f84a 2b04 	str.w	r2, [sl], #4
 800b762:	f853 2b04 	ldr.w	r2, [r3], #4
 800b766:	4298      	cmp	r0, r3
 800b768:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b76c:	d8f2      	bhi.n	800b754 <__lshift+0x70>
 800b76e:	1b03      	subs	r3, r0, r4
 800b770:	3b15      	subs	r3, #21
 800b772:	f023 0303 	bic.w	r3, r3, #3
 800b776:	3304      	adds	r3, #4
 800b778:	f104 0215 	add.w	r2, r4, #21
 800b77c:	4290      	cmp	r0, r2
 800b77e:	bf38      	it	cc
 800b780:	2304      	movcc	r3, #4
 800b782:	f841 c003 	str.w	ip, [r1, r3]
 800b786:	f1bc 0f00 	cmp.w	ip, #0
 800b78a:	d001      	beq.n	800b790 <__lshift+0xac>
 800b78c:	f108 0602 	add.w	r6, r8, #2
 800b790:	3e01      	subs	r6, #1
 800b792:	4638      	mov	r0, r7
 800b794:	612e      	str	r6, [r5, #16]
 800b796:	4621      	mov	r1, r4
 800b798:	f7ff fdd2 	bl	800b340 <_Bfree>
 800b79c:	4628      	mov	r0, r5
 800b79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	e7c1      	b.n	800b72e <__lshift+0x4a>
 800b7aa:	3904      	subs	r1, #4
 800b7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7b4:	4298      	cmp	r0, r3
 800b7b6:	d8f9      	bhi.n	800b7ac <__lshift+0xc8>
 800b7b8:	e7ea      	b.n	800b790 <__lshift+0xac>
 800b7ba:	bf00      	nop
 800b7bc:	0800c7a0 	.word	0x0800c7a0
 800b7c0:	0800c814 	.word	0x0800c814

0800b7c4 <__mcmp>:
 800b7c4:	b530      	push	{r4, r5, lr}
 800b7c6:	6902      	ldr	r2, [r0, #16]
 800b7c8:	690c      	ldr	r4, [r1, #16]
 800b7ca:	1b12      	subs	r2, r2, r4
 800b7cc:	d10e      	bne.n	800b7ec <__mcmp+0x28>
 800b7ce:	f100 0314 	add.w	r3, r0, #20
 800b7d2:	3114      	adds	r1, #20
 800b7d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b7d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b7dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b7e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b7e4:	42a5      	cmp	r5, r4
 800b7e6:	d003      	beq.n	800b7f0 <__mcmp+0x2c>
 800b7e8:	d305      	bcc.n	800b7f6 <__mcmp+0x32>
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	bd30      	pop	{r4, r5, pc}
 800b7f0:	4283      	cmp	r3, r0
 800b7f2:	d3f3      	bcc.n	800b7dc <__mcmp+0x18>
 800b7f4:	e7fa      	b.n	800b7ec <__mcmp+0x28>
 800b7f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7fa:	e7f7      	b.n	800b7ec <__mcmp+0x28>

0800b7fc <__mdiff>:
 800b7fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	460c      	mov	r4, r1
 800b802:	4606      	mov	r6, r0
 800b804:	4611      	mov	r1, r2
 800b806:	4620      	mov	r0, r4
 800b808:	4690      	mov	r8, r2
 800b80a:	f7ff ffdb 	bl	800b7c4 <__mcmp>
 800b80e:	1e05      	subs	r5, r0, #0
 800b810:	d110      	bne.n	800b834 <__mdiff+0x38>
 800b812:	4629      	mov	r1, r5
 800b814:	4630      	mov	r0, r6
 800b816:	f7ff fd53 	bl	800b2c0 <_Balloc>
 800b81a:	b930      	cbnz	r0, 800b82a <__mdiff+0x2e>
 800b81c:	4b3a      	ldr	r3, [pc, #232]	; (800b908 <__mdiff+0x10c>)
 800b81e:	4602      	mov	r2, r0
 800b820:	f240 2132 	movw	r1, #562	; 0x232
 800b824:	4839      	ldr	r0, [pc, #228]	; (800b90c <__mdiff+0x110>)
 800b826:	f7fd fd71 	bl	800930c <__assert_func>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b834:	bfa4      	itt	ge
 800b836:	4643      	movge	r3, r8
 800b838:	46a0      	movge	r8, r4
 800b83a:	4630      	mov	r0, r6
 800b83c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b840:	bfa6      	itte	ge
 800b842:	461c      	movge	r4, r3
 800b844:	2500      	movge	r5, #0
 800b846:	2501      	movlt	r5, #1
 800b848:	f7ff fd3a 	bl	800b2c0 <_Balloc>
 800b84c:	b920      	cbnz	r0, 800b858 <__mdiff+0x5c>
 800b84e:	4b2e      	ldr	r3, [pc, #184]	; (800b908 <__mdiff+0x10c>)
 800b850:	4602      	mov	r2, r0
 800b852:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b856:	e7e5      	b.n	800b824 <__mdiff+0x28>
 800b858:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b85c:	6926      	ldr	r6, [r4, #16]
 800b85e:	60c5      	str	r5, [r0, #12]
 800b860:	f104 0914 	add.w	r9, r4, #20
 800b864:	f108 0514 	add.w	r5, r8, #20
 800b868:	f100 0e14 	add.w	lr, r0, #20
 800b86c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b870:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b874:	f108 0210 	add.w	r2, r8, #16
 800b878:	46f2      	mov	sl, lr
 800b87a:	2100      	movs	r1, #0
 800b87c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b884:	fa1f f883 	uxth.w	r8, r3
 800b888:	fa11 f18b 	uxtah	r1, r1, fp
 800b88c:	0c1b      	lsrs	r3, r3, #16
 800b88e:	eba1 0808 	sub.w	r8, r1, r8
 800b892:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b896:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b89a:	fa1f f888 	uxth.w	r8, r8
 800b89e:	1419      	asrs	r1, r3, #16
 800b8a0:	454e      	cmp	r6, r9
 800b8a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b8a6:	f84a 3b04 	str.w	r3, [sl], #4
 800b8aa:	d8e7      	bhi.n	800b87c <__mdiff+0x80>
 800b8ac:	1b33      	subs	r3, r6, r4
 800b8ae:	3b15      	subs	r3, #21
 800b8b0:	f023 0303 	bic.w	r3, r3, #3
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	3415      	adds	r4, #21
 800b8b8:	42a6      	cmp	r6, r4
 800b8ba:	bf38      	it	cc
 800b8bc:	2304      	movcc	r3, #4
 800b8be:	441d      	add	r5, r3
 800b8c0:	4473      	add	r3, lr
 800b8c2:	469e      	mov	lr, r3
 800b8c4:	462e      	mov	r6, r5
 800b8c6:	4566      	cmp	r6, ip
 800b8c8:	d30e      	bcc.n	800b8e8 <__mdiff+0xec>
 800b8ca:	f10c 0203 	add.w	r2, ip, #3
 800b8ce:	1b52      	subs	r2, r2, r5
 800b8d0:	f022 0203 	bic.w	r2, r2, #3
 800b8d4:	3d03      	subs	r5, #3
 800b8d6:	45ac      	cmp	ip, r5
 800b8d8:	bf38      	it	cc
 800b8da:	2200      	movcc	r2, #0
 800b8dc:	441a      	add	r2, r3
 800b8de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b8e2:	b17b      	cbz	r3, 800b904 <__mdiff+0x108>
 800b8e4:	6107      	str	r7, [r0, #16]
 800b8e6:	e7a3      	b.n	800b830 <__mdiff+0x34>
 800b8e8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b8ec:	fa11 f288 	uxtah	r2, r1, r8
 800b8f0:	1414      	asrs	r4, r2, #16
 800b8f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b8f6:	b292      	uxth	r2, r2
 800b8f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b8fc:	f84e 2b04 	str.w	r2, [lr], #4
 800b900:	1421      	asrs	r1, r4, #16
 800b902:	e7e0      	b.n	800b8c6 <__mdiff+0xca>
 800b904:	3f01      	subs	r7, #1
 800b906:	e7ea      	b.n	800b8de <__mdiff+0xe2>
 800b908:	0800c7a0 	.word	0x0800c7a0
 800b90c:	0800c814 	.word	0x0800c814

0800b910 <__d2b>:
 800b910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b914:	4689      	mov	r9, r1
 800b916:	2101      	movs	r1, #1
 800b918:	ec57 6b10 	vmov	r6, r7, d0
 800b91c:	4690      	mov	r8, r2
 800b91e:	f7ff fccf 	bl	800b2c0 <_Balloc>
 800b922:	4604      	mov	r4, r0
 800b924:	b930      	cbnz	r0, 800b934 <__d2b+0x24>
 800b926:	4602      	mov	r2, r0
 800b928:	4b25      	ldr	r3, [pc, #148]	; (800b9c0 <__d2b+0xb0>)
 800b92a:	4826      	ldr	r0, [pc, #152]	; (800b9c4 <__d2b+0xb4>)
 800b92c:	f240 310a 	movw	r1, #778	; 0x30a
 800b930:	f7fd fcec 	bl	800930c <__assert_func>
 800b934:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b93c:	bb35      	cbnz	r5, 800b98c <__d2b+0x7c>
 800b93e:	2e00      	cmp	r6, #0
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	d028      	beq.n	800b996 <__d2b+0x86>
 800b944:	4668      	mov	r0, sp
 800b946:	9600      	str	r6, [sp, #0]
 800b948:	f7ff fd82 	bl	800b450 <__lo0bits>
 800b94c:	9900      	ldr	r1, [sp, #0]
 800b94e:	b300      	cbz	r0, 800b992 <__d2b+0x82>
 800b950:	9a01      	ldr	r2, [sp, #4]
 800b952:	f1c0 0320 	rsb	r3, r0, #32
 800b956:	fa02 f303 	lsl.w	r3, r2, r3
 800b95a:	430b      	orrs	r3, r1
 800b95c:	40c2      	lsrs	r2, r0
 800b95e:	6163      	str	r3, [r4, #20]
 800b960:	9201      	str	r2, [sp, #4]
 800b962:	9b01      	ldr	r3, [sp, #4]
 800b964:	61a3      	str	r3, [r4, #24]
 800b966:	2b00      	cmp	r3, #0
 800b968:	bf14      	ite	ne
 800b96a:	2202      	movne	r2, #2
 800b96c:	2201      	moveq	r2, #1
 800b96e:	6122      	str	r2, [r4, #16]
 800b970:	b1d5      	cbz	r5, 800b9a8 <__d2b+0x98>
 800b972:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b976:	4405      	add	r5, r0
 800b978:	f8c9 5000 	str.w	r5, [r9]
 800b97c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b980:	f8c8 0000 	str.w	r0, [r8]
 800b984:	4620      	mov	r0, r4
 800b986:	b003      	add	sp, #12
 800b988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b98c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b990:	e7d5      	b.n	800b93e <__d2b+0x2e>
 800b992:	6161      	str	r1, [r4, #20]
 800b994:	e7e5      	b.n	800b962 <__d2b+0x52>
 800b996:	a801      	add	r0, sp, #4
 800b998:	f7ff fd5a 	bl	800b450 <__lo0bits>
 800b99c:	9b01      	ldr	r3, [sp, #4]
 800b99e:	6163      	str	r3, [r4, #20]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	6122      	str	r2, [r4, #16]
 800b9a4:	3020      	adds	r0, #32
 800b9a6:	e7e3      	b.n	800b970 <__d2b+0x60>
 800b9a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9b0:	f8c9 0000 	str.w	r0, [r9]
 800b9b4:	6918      	ldr	r0, [r3, #16]
 800b9b6:	f7ff fd2b 	bl	800b410 <__hi0bits>
 800b9ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9be:	e7df      	b.n	800b980 <__d2b+0x70>
 800b9c0:	0800c7a0 	.word	0x0800c7a0
 800b9c4:	0800c814 	.word	0x0800c814

0800b9c8 <_calloc_r>:
 800b9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9ca:	fba1 2402 	umull	r2, r4, r1, r2
 800b9ce:	b94c      	cbnz	r4, 800b9e4 <_calloc_r+0x1c>
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	9201      	str	r2, [sp, #4]
 800b9d4:	f000 f87a 	bl	800bacc <_malloc_r>
 800b9d8:	9a01      	ldr	r2, [sp, #4]
 800b9da:	4605      	mov	r5, r0
 800b9dc:	b930      	cbnz	r0, 800b9ec <_calloc_r+0x24>
 800b9de:	4628      	mov	r0, r5
 800b9e0:	b003      	add	sp, #12
 800b9e2:	bd30      	pop	{r4, r5, pc}
 800b9e4:	220c      	movs	r2, #12
 800b9e6:	6002      	str	r2, [r0, #0]
 800b9e8:	2500      	movs	r5, #0
 800b9ea:	e7f8      	b.n	800b9de <_calloc_r+0x16>
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	f7fd fcf5 	bl	80093dc <memset>
 800b9f2:	e7f4      	b.n	800b9de <_calloc_r+0x16>

0800b9f4 <_free_r>:
 800b9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9f6:	2900      	cmp	r1, #0
 800b9f8:	d044      	beq.n	800ba84 <_free_r+0x90>
 800b9fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9fe:	9001      	str	r0, [sp, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f1a1 0404 	sub.w	r4, r1, #4
 800ba06:	bfb8      	it	lt
 800ba08:	18e4      	addlt	r4, r4, r3
 800ba0a:	f000 fb5d 	bl	800c0c8 <__malloc_lock>
 800ba0e:	4a1e      	ldr	r2, [pc, #120]	; (800ba88 <_free_r+0x94>)
 800ba10:	9801      	ldr	r0, [sp, #4]
 800ba12:	6813      	ldr	r3, [r2, #0]
 800ba14:	b933      	cbnz	r3, 800ba24 <_free_r+0x30>
 800ba16:	6063      	str	r3, [r4, #4]
 800ba18:	6014      	str	r4, [r2, #0]
 800ba1a:	b003      	add	sp, #12
 800ba1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba20:	f000 bb58 	b.w	800c0d4 <__malloc_unlock>
 800ba24:	42a3      	cmp	r3, r4
 800ba26:	d908      	bls.n	800ba3a <_free_r+0x46>
 800ba28:	6825      	ldr	r5, [r4, #0]
 800ba2a:	1961      	adds	r1, r4, r5
 800ba2c:	428b      	cmp	r3, r1
 800ba2e:	bf01      	itttt	eq
 800ba30:	6819      	ldreq	r1, [r3, #0]
 800ba32:	685b      	ldreq	r3, [r3, #4]
 800ba34:	1949      	addeq	r1, r1, r5
 800ba36:	6021      	streq	r1, [r4, #0]
 800ba38:	e7ed      	b.n	800ba16 <_free_r+0x22>
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	b10b      	cbz	r3, 800ba44 <_free_r+0x50>
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	d9fa      	bls.n	800ba3a <_free_r+0x46>
 800ba44:	6811      	ldr	r1, [r2, #0]
 800ba46:	1855      	adds	r5, r2, r1
 800ba48:	42a5      	cmp	r5, r4
 800ba4a:	d10b      	bne.n	800ba64 <_free_r+0x70>
 800ba4c:	6824      	ldr	r4, [r4, #0]
 800ba4e:	4421      	add	r1, r4
 800ba50:	1854      	adds	r4, r2, r1
 800ba52:	42a3      	cmp	r3, r4
 800ba54:	6011      	str	r1, [r2, #0]
 800ba56:	d1e0      	bne.n	800ba1a <_free_r+0x26>
 800ba58:	681c      	ldr	r4, [r3, #0]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	6053      	str	r3, [r2, #4]
 800ba5e:	4421      	add	r1, r4
 800ba60:	6011      	str	r1, [r2, #0]
 800ba62:	e7da      	b.n	800ba1a <_free_r+0x26>
 800ba64:	d902      	bls.n	800ba6c <_free_r+0x78>
 800ba66:	230c      	movs	r3, #12
 800ba68:	6003      	str	r3, [r0, #0]
 800ba6a:	e7d6      	b.n	800ba1a <_free_r+0x26>
 800ba6c:	6825      	ldr	r5, [r4, #0]
 800ba6e:	1961      	adds	r1, r4, r5
 800ba70:	428b      	cmp	r3, r1
 800ba72:	bf04      	itt	eq
 800ba74:	6819      	ldreq	r1, [r3, #0]
 800ba76:	685b      	ldreq	r3, [r3, #4]
 800ba78:	6063      	str	r3, [r4, #4]
 800ba7a:	bf04      	itt	eq
 800ba7c:	1949      	addeq	r1, r1, r5
 800ba7e:	6021      	streq	r1, [r4, #0]
 800ba80:	6054      	str	r4, [r2, #4]
 800ba82:	e7ca      	b.n	800ba1a <_free_r+0x26>
 800ba84:	b003      	add	sp, #12
 800ba86:	bd30      	pop	{r4, r5, pc}
 800ba88:	200020b8 	.word	0x200020b8

0800ba8c <sbrk_aligned>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	4e0e      	ldr	r6, [pc, #56]	; (800bac8 <sbrk_aligned+0x3c>)
 800ba90:	460c      	mov	r4, r1
 800ba92:	6831      	ldr	r1, [r6, #0]
 800ba94:	4605      	mov	r5, r0
 800ba96:	b911      	cbnz	r1, 800ba9e <sbrk_aligned+0x12>
 800ba98:	f000 fa16 	bl	800bec8 <_sbrk_r>
 800ba9c:	6030      	str	r0, [r6, #0]
 800ba9e:	4621      	mov	r1, r4
 800baa0:	4628      	mov	r0, r5
 800baa2:	f000 fa11 	bl	800bec8 <_sbrk_r>
 800baa6:	1c43      	adds	r3, r0, #1
 800baa8:	d00a      	beq.n	800bac0 <sbrk_aligned+0x34>
 800baaa:	1cc4      	adds	r4, r0, #3
 800baac:	f024 0403 	bic.w	r4, r4, #3
 800bab0:	42a0      	cmp	r0, r4
 800bab2:	d007      	beq.n	800bac4 <sbrk_aligned+0x38>
 800bab4:	1a21      	subs	r1, r4, r0
 800bab6:	4628      	mov	r0, r5
 800bab8:	f000 fa06 	bl	800bec8 <_sbrk_r>
 800babc:	3001      	adds	r0, #1
 800babe:	d101      	bne.n	800bac4 <sbrk_aligned+0x38>
 800bac0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bac4:	4620      	mov	r0, r4
 800bac6:	bd70      	pop	{r4, r5, r6, pc}
 800bac8:	200020bc 	.word	0x200020bc

0800bacc <_malloc_r>:
 800bacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad0:	1ccd      	adds	r5, r1, #3
 800bad2:	f025 0503 	bic.w	r5, r5, #3
 800bad6:	3508      	adds	r5, #8
 800bad8:	2d0c      	cmp	r5, #12
 800bada:	bf38      	it	cc
 800badc:	250c      	movcc	r5, #12
 800bade:	2d00      	cmp	r5, #0
 800bae0:	4607      	mov	r7, r0
 800bae2:	db01      	blt.n	800bae8 <_malloc_r+0x1c>
 800bae4:	42a9      	cmp	r1, r5
 800bae6:	d905      	bls.n	800baf4 <_malloc_r+0x28>
 800bae8:	230c      	movs	r3, #12
 800baea:	603b      	str	r3, [r7, #0]
 800baec:	2600      	movs	r6, #0
 800baee:	4630      	mov	r0, r6
 800baf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf4:	4e2e      	ldr	r6, [pc, #184]	; (800bbb0 <_malloc_r+0xe4>)
 800baf6:	f000 fae7 	bl	800c0c8 <__malloc_lock>
 800bafa:	6833      	ldr	r3, [r6, #0]
 800bafc:	461c      	mov	r4, r3
 800bafe:	bb34      	cbnz	r4, 800bb4e <_malloc_r+0x82>
 800bb00:	4629      	mov	r1, r5
 800bb02:	4638      	mov	r0, r7
 800bb04:	f7ff ffc2 	bl	800ba8c <sbrk_aligned>
 800bb08:	1c43      	adds	r3, r0, #1
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	d14d      	bne.n	800bbaa <_malloc_r+0xde>
 800bb0e:	6834      	ldr	r4, [r6, #0]
 800bb10:	4626      	mov	r6, r4
 800bb12:	2e00      	cmp	r6, #0
 800bb14:	d140      	bne.n	800bb98 <_malloc_r+0xcc>
 800bb16:	6823      	ldr	r3, [r4, #0]
 800bb18:	4631      	mov	r1, r6
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	eb04 0803 	add.w	r8, r4, r3
 800bb20:	f000 f9d2 	bl	800bec8 <_sbrk_r>
 800bb24:	4580      	cmp	r8, r0
 800bb26:	d13a      	bne.n	800bb9e <_malloc_r+0xd2>
 800bb28:	6821      	ldr	r1, [r4, #0]
 800bb2a:	3503      	adds	r5, #3
 800bb2c:	1a6d      	subs	r5, r5, r1
 800bb2e:	f025 0503 	bic.w	r5, r5, #3
 800bb32:	3508      	adds	r5, #8
 800bb34:	2d0c      	cmp	r5, #12
 800bb36:	bf38      	it	cc
 800bb38:	250c      	movcc	r5, #12
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	f7ff ffa5 	bl	800ba8c <sbrk_aligned>
 800bb42:	3001      	adds	r0, #1
 800bb44:	d02b      	beq.n	800bb9e <_malloc_r+0xd2>
 800bb46:	6823      	ldr	r3, [r4, #0]
 800bb48:	442b      	add	r3, r5
 800bb4a:	6023      	str	r3, [r4, #0]
 800bb4c:	e00e      	b.n	800bb6c <_malloc_r+0xa0>
 800bb4e:	6822      	ldr	r2, [r4, #0]
 800bb50:	1b52      	subs	r2, r2, r5
 800bb52:	d41e      	bmi.n	800bb92 <_malloc_r+0xc6>
 800bb54:	2a0b      	cmp	r2, #11
 800bb56:	d916      	bls.n	800bb86 <_malloc_r+0xba>
 800bb58:	1961      	adds	r1, r4, r5
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	6025      	str	r5, [r4, #0]
 800bb5e:	bf18      	it	ne
 800bb60:	6059      	strne	r1, [r3, #4]
 800bb62:	6863      	ldr	r3, [r4, #4]
 800bb64:	bf08      	it	eq
 800bb66:	6031      	streq	r1, [r6, #0]
 800bb68:	5162      	str	r2, [r4, r5]
 800bb6a:	604b      	str	r3, [r1, #4]
 800bb6c:	4638      	mov	r0, r7
 800bb6e:	f104 060b 	add.w	r6, r4, #11
 800bb72:	f000 faaf 	bl	800c0d4 <__malloc_unlock>
 800bb76:	f026 0607 	bic.w	r6, r6, #7
 800bb7a:	1d23      	adds	r3, r4, #4
 800bb7c:	1af2      	subs	r2, r6, r3
 800bb7e:	d0b6      	beq.n	800baee <_malloc_r+0x22>
 800bb80:	1b9b      	subs	r3, r3, r6
 800bb82:	50a3      	str	r3, [r4, r2]
 800bb84:	e7b3      	b.n	800baee <_malloc_r+0x22>
 800bb86:	6862      	ldr	r2, [r4, #4]
 800bb88:	42a3      	cmp	r3, r4
 800bb8a:	bf0c      	ite	eq
 800bb8c:	6032      	streq	r2, [r6, #0]
 800bb8e:	605a      	strne	r2, [r3, #4]
 800bb90:	e7ec      	b.n	800bb6c <_malloc_r+0xa0>
 800bb92:	4623      	mov	r3, r4
 800bb94:	6864      	ldr	r4, [r4, #4]
 800bb96:	e7b2      	b.n	800bafe <_malloc_r+0x32>
 800bb98:	4634      	mov	r4, r6
 800bb9a:	6876      	ldr	r6, [r6, #4]
 800bb9c:	e7b9      	b.n	800bb12 <_malloc_r+0x46>
 800bb9e:	230c      	movs	r3, #12
 800bba0:	603b      	str	r3, [r7, #0]
 800bba2:	4638      	mov	r0, r7
 800bba4:	f000 fa96 	bl	800c0d4 <__malloc_unlock>
 800bba8:	e7a1      	b.n	800baee <_malloc_r+0x22>
 800bbaa:	6025      	str	r5, [r4, #0]
 800bbac:	e7de      	b.n	800bb6c <_malloc_r+0xa0>
 800bbae:	bf00      	nop
 800bbb0:	200020b8 	.word	0x200020b8

0800bbb4 <_realloc_r>:
 800bbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb8:	4680      	mov	r8, r0
 800bbba:	4614      	mov	r4, r2
 800bbbc:	460e      	mov	r6, r1
 800bbbe:	b921      	cbnz	r1, 800bbca <_realloc_r+0x16>
 800bbc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	f7ff bf81 	b.w	800bacc <_malloc_r>
 800bbca:	b92a      	cbnz	r2, 800bbd8 <_realloc_r+0x24>
 800bbcc:	f7ff ff12 	bl	800b9f4 <_free_r>
 800bbd0:	4625      	mov	r5, r4
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd8:	f000 fa82 	bl	800c0e0 <_malloc_usable_size_r>
 800bbdc:	4284      	cmp	r4, r0
 800bbde:	4607      	mov	r7, r0
 800bbe0:	d802      	bhi.n	800bbe8 <_realloc_r+0x34>
 800bbe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbe6:	d812      	bhi.n	800bc0e <_realloc_r+0x5a>
 800bbe8:	4621      	mov	r1, r4
 800bbea:	4640      	mov	r0, r8
 800bbec:	f7ff ff6e 	bl	800bacc <_malloc_r>
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d0ed      	beq.n	800bbd2 <_realloc_r+0x1e>
 800bbf6:	42bc      	cmp	r4, r7
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	4631      	mov	r1, r6
 800bbfc:	bf28      	it	cs
 800bbfe:	463a      	movcs	r2, r7
 800bc00:	f7fd fbde 	bl	80093c0 <memcpy>
 800bc04:	4631      	mov	r1, r6
 800bc06:	4640      	mov	r0, r8
 800bc08:	f7ff fef4 	bl	800b9f4 <_free_r>
 800bc0c:	e7e1      	b.n	800bbd2 <_realloc_r+0x1e>
 800bc0e:	4635      	mov	r5, r6
 800bc10:	e7df      	b.n	800bbd2 <_realloc_r+0x1e>

0800bc12 <__ssputs_r>:
 800bc12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc16:	688e      	ldr	r6, [r1, #8]
 800bc18:	429e      	cmp	r6, r3
 800bc1a:	4682      	mov	sl, r0
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	4690      	mov	r8, r2
 800bc20:	461f      	mov	r7, r3
 800bc22:	d838      	bhi.n	800bc96 <__ssputs_r+0x84>
 800bc24:	898a      	ldrh	r2, [r1, #12]
 800bc26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc2a:	d032      	beq.n	800bc92 <__ssputs_r+0x80>
 800bc2c:	6825      	ldr	r5, [r4, #0]
 800bc2e:	6909      	ldr	r1, [r1, #16]
 800bc30:	eba5 0901 	sub.w	r9, r5, r1
 800bc34:	6965      	ldr	r5, [r4, #20]
 800bc36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc3e:	3301      	adds	r3, #1
 800bc40:	444b      	add	r3, r9
 800bc42:	106d      	asrs	r5, r5, #1
 800bc44:	429d      	cmp	r5, r3
 800bc46:	bf38      	it	cc
 800bc48:	461d      	movcc	r5, r3
 800bc4a:	0553      	lsls	r3, r2, #21
 800bc4c:	d531      	bpl.n	800bcb2 <__ssputs_r+0xa0>
 800bc4e:	4629      	mov	r1, r5
 800bc50:	f7ff ff3c 	bl	800bacc <_malloc_r>
 800bc54:	4606      	mov	r6, r0
 800bc56:	b950      	cbnz	r0, 800bc6e <__ssputs_r+0x5c>
 800bc58:	230c      	movs	r3, #12
 800bc5a:	f8ca 3000 	str.w	r3, [sl]
 800bc5e:	89a3      	ldrh	r3, [r4, #12]
 800bc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc64:	81a3      	strh	r3, [r4, #12]
 800bc66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc6e:	6921      	ldr	r1, [r4, #16]
 800bc70:	464a      	mov	r2, r9
 800bc72:	f7fd fba5 	bl	80093c0 <memcpy>
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	6126      	str	r6, [r4, #16]
 800bc84:	6165      	str	r5, [r4, #20]
 800bc86:	444e      	add	r6, r9
 800bc88:	eba5 0509 	sub.w	r5, r5, r9
 800bc8c:	6026      	str	r6, [r4, #0]
 800bc8e:	60a5      	str	r5, [r4, #8]
 800bc90:	463e      	mov	r6, r7
 800bc92:	42be      	cmp	r6, r7
 800bc94:	d900      	bls.n	800bc98 <__ssputs_r+0x86>
 800bc96:	463e      	mov	r6, r7
 800bc98:	6820      	ldr	r0, [r4, #0]
 800bc9a:	4632      	mov	r2, r6
 800bc9c:	4641      	mov	r1, r8
 800bc9e:	f7ff faf5 	bl	800b28c <memmove>
 800bca2:	68a3      	ldr	r3, [r4, #8]
 800bca4:	1b9b      	subs	r3, r3, r6
 800bca6:	60a3      	str	r3, [r4, #8]
 800bca8:	6823      	ldr	r3, [r4, #0]
 800bcaa:	4433      	add	r3, r6
 800bcac:	6023      	str	r3, [r4, #0]
 800bcae:	2000      	movs	r0, #0
 800bcb0:	e7db      	b.n	800bc6a <__ssputs_r+0x58>
 800bcb2:	462a      	mov	r2, r5
 800bcb4:	f7ff ff7e 	bl	800bbb4 <_realloc_r>
 800bcb8:	4606      	mov	r6, r0
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d1e1      	bne.n	800bc82 <__ssputs_r+0x70>
 800bcbe:	6921      	ldr	r1, [r4, #16]
 800bcc0:	4650      	mov	r0, sl
 800bcc2:	f7ff fe97 	bl	800b9f4 <_free_r>
 800bcc6:	e7c7      	b.n	800bc58 <__ssputs_r+0x46>

0800bcc8 <_svfiprintf_r>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	4698      	mov	r8, r3
 800bcce:	898b      	ldrh	r3, [r1, #12]
 800bcd0:	061b      	lsls	r3, r3, #24
 800bcd2:	b09d      	sub	sp, #116	; 0x74
 800bcd4:	4607      	mov	r7, r0
 800bcd6:	460d      	mov	r5, r1
 800bcd8:	4614      	mov	r4, r2
 800bcda:	d50e      	bpl.n	800bcfa <_svfiprintf_r+0x32>
 800bcdc:	690b      	ldr	r3, [r1, #16]
 800bcde:	b963      	cbnz	r3, 800bcfa <_svfiprintf_r+0x32>
 800bce0:	2140      	movs	r1, #64	; 0x40
 800bce2:	f7ff fef3 	bl	800bacc <_malloc_r>
 800bce6:	6028      	str	r0, [r5, #0]
 800bce8:	6128      	str	r0, [r5, #16]
 800bcea:	b920      	cbnz	r0, 800bcf6 <_svfiprintf_r+0x2e>
 800bcec:	230c      	movs	r3, #12
 800bcee:	603b      	str	r3, [r7, #0]
 800bcf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcf4:	e0d1      	b.n	800be9a <_svfiprintf_r+0x1d2>
 800bcf6:	2340      	movs	r3, #64	; 0x40
 800bcf8:	616b      	str	r3, [r5, #20]
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfe:	2320      	movs	r3, #32
 800bd00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd04:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd08:	2330      	movs	r3, #48	; 0x30
 800bd0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800beb4 <_svfiprintf_r+0x1ec>
 800bd0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd12:	f04f 0901 	mov.w	r9, #1
 800bd16:	4623      	mov	r3, r4
 800bd18:	469a      	mov	sl, r3
 800bd1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd1e:	b10a      	cbz	r2, 800bd24 <_svfiprintf_r+0x5c>
 800bd20:	2a25      	cmp	r2, #37	; 0x25
 800bd22:	d1f9      	bne.n	800bd18 <_svfiprintf_r+0x50>
 800bd24:	ebba 0b04 	subs.w	fp, sl, r4
 800bd28:	d00b      	beq.n	800bd42 <_svfiprintf_r+0x7a>
 800bd2a:	465b      	mov	r3, fp
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	4629      	mov	r1, r5
 800bd30:	4638      	mov	r0, r7
 800bd32:	f7ff ff6e 	bl	800bc12 <__ssputs_r>
 800bd36:	3001      	adds	r0, #1
 800bd38:	f000 80aa 	beq.w	800be90 <_svfiprintf_r+0x1c8>
 800bd3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd3e:	445a      	add	r2, fp
 800bd40:	9209      	str	r2, [sp, #36]	; 0x24
 800bd42:	f89a 3000 	ldrb.w	r3, [sl]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f000 80a2 	beq.w	800be90 <_svfiprintf_r+0x1c8>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd56:	f10a 0a01 	add.w	sl, sl, #1
 800bd5a:	9304      	str	r3, [sp, #16]
 800bd5c:	9307      	str	r3, [sp, #28]
 800bd5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd62:	931a      	str	r3, [sp, #104]	; 0x68
 800bd64:	4654      	mov	r4, sl
 800bd66:	2205      	movs	r2, #5
 800bd68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd6c:	4851      	ldr	r0, [pc, #324]	; (800beb4 <_svfiprintf_r+0x1ec>)
 800bd6e:	f7f4 fa37 	bl	80001e0 <memchr>
 800bd72:	9a04      	ldr	r2, [sp, #16]
 800bd74:	b9d8      	cbnz	r0, 800bdae <_svfiprintf_r+0xe6>
 800bd76:	06d0      	lsls	r0, r2, #27
 800bd78:	bf44      	itt	mi
 800bd7a:	2320      	movmi	r3, #32
 800bd7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd80:	0711      	lsls	r1, r2, #28
 800bd82:	bf44      	itt	mi
 800bd84:	232b      	movmi	r3, #43	; 0x2b
 800bd86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd8a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd8e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd90:	d015      	beq.n	800bdbe <_svfiprintf_r+0xf6>
 800bd92:	9a07      	ldr	r2, [sp, #28]
 800bd94:	4654      	mov	r4, sl
 800bd96:	2000      	movs	r0, #0
 800bd98:	f04f 0c0a 	mov.w	ip, #10
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bda2:	3b30      	subs	r3, #48	; 0x30
 800bda4:	2b09      	cmp	r3, #9
 800bda6:	d94e      	bls.n	800be46 <_svfiprintf_r+0x17e>
 800bda8:	b1b0      	cbz	r0, 800bdd8 <_svfiprintf_r+0x110>
 800bdaa:	9207      	str	r2, [sp, #28]
 800bdac:	e014      	b.n	800bdd8 <_svfiprintf_r+0x110>
 800bdae:	eba0 0308 	sub.w	r3, r0, r8
 800bdb2:	fa09 f303 	lsl.w	r3, r9, r3
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	9304      	str	r3, [sp, #16]
 800bdba:	46a2      	mov	sl, r4
 800bdbc:	e7d2      	b.n	800bd64 <_svfiprintf_r+0x9c>
 800bdbe:	9b03      	ldr	r3, [sp, #12]
 800bdc0:	1d19      	adds	r1, r3, #4
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	9103      	str	r1, [sp, #12]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	bfbb      	ittet	lt
 800bdca:	425b      	neglt	r3, r3
 800bdcc:	f042 0202 	orrlt.w	r2, r2, #2
 800bdd0:	9307      	strge	r3, [sp, #28]
 800bdd2:	9307      	strlt	r3, [sp, #28]
 800bdd4:	bfb8      	it	lt
 800bdd6:	9204      	strlt	r2, [sp, #16]
 800bdd8:	7823      	ldrb	r3, [r4, #0]
 800bdda:	2b2e      	cmp	r3, #46	; 0x2e
 800bddc:	d10c      	bne.n	800bdf8 <_svfiprintf_r+0x130>
 800bdde:	7863      	ldrb	r3, [r4, #1]
 800bde0:	2b2a      	cmp	r3, #42	; 0x2a
 800bde2:	d135      	bne.n	800be50 <_svfiprintf_r+0x188>
 800bde4:	9b03      	ldr	r3, [sp, #12]
 800bde6:	1d1a      	adds	r2, r3, #4
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	9203      	str	r2, [sp, #12]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	bfb8      	it	lt
 800bdf0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bdf4:	3402      	adds	r4, #2
 800bdf6:	9305      	str	r3, [sp, #20]
 800bdf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bec4 <_svfiprintf_r+0x1fc>
 800bdfc:	7821      	ldrb	r1, [r4, #0]
 800bdfe:	2203      	movs	r2, #3
 800be00:	4650      	mov	r0, sl
 800be02:	f7f4 f9ed 	bl	80001e0 <memchr>
 800be06:	b140      	cbz	r0, 800be1a <_svfiprintf_r+0x152>
 800be08:	2340      	movs	r3, #64	; 0x40
 800be0a:	eba0 000a 	sub.w	r0, r0, sl
 800be0e:	fa03 f000 	lsl.w	r0, r3, r0
 800be12:	9b04      	ldr	r3, [sp, #16]
 800be14:	4303      	orrs	r3, r0
 800be16:	3401      	adds	r4, #1
 800be18:	9304      	str	r3, [sp, #16]
 800be1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1e:	4826      	ldr	r0, [pc, #152]	; (800beb8 <_svfiprintf_r+0x1f0>)
 800be20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be24:	2206      	movs	r2, #6
 800be26:	f7f4 f9db 	bl	80001e0 <memchr>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d038      	beq.n	800bea0 <_svfiprintf_r+0x1d8>
 800be2e:	4b23      	ldr	r3, [pc, #140]	; (800bebc <_svfiprintf_r+0x1f4>)
 800be30:	bb1b      	cbnz	r3, 800be7a <_svfiprintf_r+0x1b2>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	3307      	adds	r3, #7
 800be36:	f023 0307 	bic.w	r3, r3, #7
 800be3a:	3308      	adds	r3, #8
 800be3c:	9303      	str	r3, [sp, #12]
 800be3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be40:	4433      	add	r3, r6
 800be42:	9309      	str	r3, [sp, #36]	; 0x24
 800be44:	e767      	b.n	800bd16 <_svfiprintf_r+0x4e>
 800be46:	fb0c 3202 	mla	r2, ip, r2, r3
 800be4a:	460c      	mov	r4, r1
 800be4c:	2001      	movs	r0, #1
 800be4e:	e7a5      	b.n	800bd9c <_svfiprintf_r+0xd4>
 800be50:	2300      	movs	r3, #0
 800be52:	3401      	adds	r4, #1
 800be54:	9305      	str	r3, [sp, #20]
 800be56:	4619      	mov	r1, r3
 800be58:	f04f 0c0a 	mov.w	ip, #10
 800be5c:	4620      	mov	r0, r4
 800be5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be62:	3a30      	subs	r2, #48	; 0x30
 800be64:	2a09      	cmp	r2, #9
 800be66:	d903      	bls.n	800be70 <_svfiprintf_r+0x1a8>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0c5      	beq.n	800bdf8 <_svfiprintf_r+0x130>
 800be6c:	9105      	str	r1, [sp, #20]
 800be6e:	e7c3      	b.n	800bdf8 <_svfiprintf_r+0x130>
 800be70:	fb0c 2101 	mla	r1, ip, r1, r2
 800be74:	4604      	mov	r4, r0
 800be76:	2301      	movs	r3, #1
 800be78:	e7f0      	b.n	800be5c <_svfiprintf_r+0x194>
 800be7a:	ab03      	add	r3, sp, #12
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	462a      	mov	r2, r5
 800be80:	4b0f      	ldr	r3, [pc, #60]	; (800bec0 <_svfiprintf_r+0x1f8>)
 800be82:	a904      	add	r1, sp, #16
 800be84:	4638      	mov	r0, r7
 800be86:	f7fd fcab 	bl	80097e0 <_printf_float>
 800be8a:	1c42      	adds	r2, r0, #1
 800be8c:	4606      	mov	r6, r0
 800be8e:	d1d6      	bne.n	800be3e <_svfiprintf_r+0x176>
 800be90:	89ab      	ldrh	r3, [r5, #12]
 800be92:	065b      	lsls	r3, r3, #25
 800be94:	f53f af2c 	bmi.w	800bcf0 <_svfiprintf_r+0x28>
 800be98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be9a:	b01d      	add	sp, #116	; 0x74
 800be9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea0:	ab03      	add	r3, sp, #12
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	462a      	mov	r2, r5
 800bea6:	4b06      	ldr	r3, [pc, #24]	; (800bec0 <_svfiprintf_r+0x1f8>)
 800bea8:	a904      	add	r1, sp, #16
 800beaa:	4638      	mov	r0, r7
 800beac:	f7fd ff3c 	bl	8009d28 <_printf_i>
 800beb0:	e7eb      	b.n	800be8a <_svfiprintf_r+0x1c2>
 800beb2:	bf00      	nop
 800beb4:	0800c6dc 	.word	0x0800c6dc
 800beb8:	0800c6e6 	.word	0x0800c6e6
 800bebc:	080097e1 	.word	0x080097e1
 800bec0:	0800bc13 	.word	0x0800bc13
 800bec4:	0800c6e2 	.word	0x0800c6e2

0800bec8 <_sbrk_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d06      	ldr	r5, [pc, #24]	; (800bee4 <_sbrk_r+0x1c>)
 800becc:	2300      	movs	r3, #0
 800bece:	4604      	mov	r4, r0
 800bed0:	4608      	mov	r0, r1
 800bed2:	602b      	str	r3, [r5, #0]
 800bed4:	f7f6 fd14 	bl	8002900 <_sbrk>
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	d102      	bne.n	800bee2 <_sbrk_r+0x1a>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	b103      	cbz	r3, 800bee2 <_sbrk_r+0x1a>
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	bd38      	pop	{r3, r4, r5, pc}
 800bee4:	200020c0 	.word	0x200020c0

0800bee8 <_raise_r>:
 800bee8:	291f      	cmp	r1, #31
 800beea:	b538      	push	{r3, r4, r5, lr}
 800beec:	4604      	mov	r4, r0
 800beee:	460d      	mov	r5, r1
 800bef0:	d904      	bls.n	800befc <_raise_r+0x14>
 800bef2:	2316      	movs	r3, #22
 800bef4:	6003      	str	r3, [r0, #0]
 800bef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800befa:	bd38      	pop	{r3, r4, r5, pc}
 800befc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800befe:	b112      	cbz	r2, 800bf06 <_raise_r+0x1e>
 800bf00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf04:	b94b      	cbnz	r3, 800bf1a <_raise_r+0x32>
 800bf06:	4620      	mov	r0, r4
 800bf08:	f000 f830 	bl	800bf6c <_getpid_r>
 800bf0c:	462a      	mov	r2, r5
 800bf0e:	4601      	mov	r1, r0
 800bf10:	4620      	mov	r0, r4
 800bf12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf16:	f000 b817 	b.w	800bf48 <_kill_r>
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d00a      	beq.n	800bf34 <_raise_r+0x4c>
 800bf1e:	1c59      	adds	r1, r3, #1
 800bf20:	d103      	bne.n	800bf2a <_raise_r+0x42>
 800bf22:	2316      	movs	r3, #22
 800bf24:	6003      	str	r3, [r0, #0]
 800bf26:	2001      	movs	r0, #1
 800bf28:	e7e7      	b.n	800befa <_raise_r+0x12>
 800bf2a:	2400      	movs	r4, #0
 800bf2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf30:	4628      	mov	r0, r5
 800bf32:	4798      	blx	r3
 800bf34:	2000      	movs	r0, #0
 800bf36:	e7e0      	b.n	800befa <_raise_r+0x12>

0800bf38 <raise>:
 800bf38:	4b02      	ldr	r3, [pc, #8]	; (800bf44 <raise+0xc>)
 800bf3a:	4601      	mov	r1, r0
 800bf3c:	6818      	ldr	r0, [r3, #0]
 800bf3e:	f7ff bfd3 	b.w	800bee8 <_raise_r>
 800bf42:	bf00      	nop
 800bf44:	20000010 	.word	0x20000010

0800bf48 <_kill_r>:
 800bf48:	b538      	push	{r3, r4, r5, lr}
 800bf4a:	4d07      	ldr	r5, [pc, #28]	; (800bf68 <_kill_r+0x20>)
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	4604      	mov	r4, r0
 800bf50:	4608      	mov	r0, r1
 800bf52:	4611      	mov	r1, r2
 800bf54:	602b      	str	r3, [r5, #0]
 800bf56:	f7f6 fc4b 	bl	80027f0 <_kill>
 800bf5a:	1c43      	adds	r3, r0, #1
 800bf5c:	d102      	bne.n	800bf64 <_kill_r+0x1c>
 800bf5e:	682b      	ldr	r3, [r5, #0]
 800bf60:	b103      	cbz	r3, 800bf64 <_kill_r+0x1c>
 800bf62:	6023      	str	r3, [r4, #0]
 800bf64:	bd38      	pop	{r3, r4, r5, pc}
 800bf66:	bf00      	nop
 800bf68:	200020c0 	.word	0x200020c0

0800bf6c <_getpid_r>:
 800bf6c:	f7f6 bc38 	b.w	80027e0 <_getpid>

0800bf70 <__sread>:
 800bf70:	b510      	push	{r4, lr}
 800bf72:	460c      	mov	r4, r1
 800bf74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf78:	f000 f8ba 	bl	800c0f0 <_read_r>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	bfab      	itete	ge
 800bf80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf82:	89a3      	ldrhlt	r3, [r4, #12]
 800bf84:	181b      	addge	r3, r3, r0
 800bf86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf8a:	bfac      	ite	ge
 800bf8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf8e:	81a3      	strhlt	r3, [r4, #12]
 800bf90:	bd10      	pop	{r4, pc}

0800bf92 <__swrite>:
 800bf92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf96:	461f      	mov	r7, r3
 800bf98:	898b      	ldrh	r3, [r1, #12]
 800bf9a:	05db      	lsls	r3, r3, #23
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	4616      	mov	r6, r2
 800bfa2:	d505      	bpl.n	800bfb0 <__swrite+0x1e>
 800bfa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f000 f868 	bl	800c080 <_lseek_r>
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfba:	81a3      	strh	r3, [r4, #12]
 800bfbc:	4632      	mov	r2, r6
 800bfbe:	463b      	mov	r3, r7
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc6:	f000 b817 	b.w	800bff8 <_write_r>

0800bfca <__sseek>:
 800bfca:	b510      	push	{r4, lr}
 800bfcc:	460c      	mov	r4, r1
 800bfce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd2:	f000 f855 	bl	800c080 <_lseek_r>
 800bfd6:	1c43      	adds	r3, r0, #1
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	bf15      	itete	ne
 800bfdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfe6:	81a3      	strheq	r3, [r4, #12]
 800bfe8:	bf18      	it	ne
 800bfea:	81a3      	strhne	r3, [r4, #12]
 800bfec:	bd10      	pop	{r4, pc}

0800bfee <__sclose>:
 800bfee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff2:	f000 b813 	b.w	800c01c <_close_r>
	...

0800bff8 <_write_r>:
 800bff8:	b538      	push	{r3, r4, r5, lr}
 800bffa:	4d07      	ldr	r5, [pc, #28]	; (800c018 <_write_r+0x20>)
 800bffc:	4604      	mov	r4, r0
 800bffe:	4608      	mov	r0, r1
 800c000:	4611      	mov	r1, r2
 800c002:	2200      	movs	r2, #0
 800c004:	602a      	str	r2, [r5, #0]
 800c006:	461a      	mov	r2, r3
 800c008:	f7f6 fc29 	bl	800285e <_write>
 800c00c:	1c43      	adds	r3, r0, #1
 800c00e:	d102      	bne.n	800c016 <_write_r+0x1e>
 800c010:	682b      	ldr	r3, [r5, #0]
 800c012:	b103      	cbz	r3, 800c016 <_write_r+0x1e>
 800c014:	6023      	str	r3, [r4, #0]
 800c016:	bd38      	pop	{r3, r4, r5, pc}
 800c018:	200020c0 	.word	0x200020c0

0800c01c <_close_r>:
 800c01c:	b538      	push	{r3, r4, r5, lr}
 800c01e:	4d06      	ldr	r5, [pc, #24]	; (800c038 <_close_r+0x1c>)
 800c020:	2300      	movs	r3, #0
 800c022:	4604      	mov	r4, r0
 800c024:	4608      	mov	r0, r1
 800c026:	602b      	str	r3, [r5, #0]
 800c028:	f7f6 fc35 	bl	8002896 <_close>
 800c02c:	1c43      	adds	r3, r0, #1
 800c02e:	d102      	bne.n	800c036 <_close_r+0x1a>
 800c030:	682b      	ldr	r3, [r5, #0]
 800c032:	b103      	cbz	r3, 800c036 <_close_r+0x1a>
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	200020c0 	.word	0x200020c0

0800c03c <_fstat_r>:
 800c03c:	b538      	push	{r3, r4, r5, lr}
 800c03e:	4d07      	ldr	r5, [pc, #28]	; (800c05c <_fstat_r+0x20>)
 800c040:	2300      	movs	r3, #0
 800c042:	4604      	mov	r4, r0
 800c044:	4608      	mov	r0, r1
 800c046:	4611      	mov	r1, r2
 800c048:	602b      	str	r3, [r5, #0]
 800c04a:	f7f6 fc30 	bl	80028ae <_fstat>
 800c04e:	1c43      	adds	r3, r0, #1
 800c050:	d102      	bne.n	800c058 <_fstat_r+0x1c>
 800c052:	682b      	ldr	r3, [r5, #0]
 800c054:	b103      	cbz	r3, 800c058 <_fstat_r+0x1c>
 800c056:	6023      	str	r3, [r4, #0]
 800c058:	bd38      	pop	{r3, r4, r5, pc}
 800c05a:	bf00      	nop
 800c05c:	200020c0 	.word	0x200020c0

0800c060 <_isatty_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4d06      	ldr	r5, [pc, #24]	; (800c07c <_isatty_r+0x1c>)
 800c064:	2300      	movs	r3, #0
 800c066:	4604      	mov	r4, r0
 800c068:	4608      	mov	r0, r1
 800c06a:	602b      	str	r3, [r5, #0]
 800c06c:	f7f6 fc2f 	bl	80028ce <_isatty>
 800c070:	1c43      	adds	r3, r0, #1
 800c072:	d102      	bne.n	800c07a <_isatty_r+0x1a>
 800c074:	682b      	ldr	r3, [r5, #0]
 800c076:	b103      	cbz	r3, 800c07a <_isatty_r+0x1a>
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	bd38      	pop	{r3, r4, r5, pc}
 800c07c:	200020c0 	.word	0x200020c0

0800c080 <_lseek_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	4d07      	ldr	r5, [pc, #28]	; (800c0a0 <_lseek_r+0x20>)
 800c084:	4604      	mov	r4, r0
 800c086:	4608      	mov	r0, r1
 800c088:	4611      	mov	r1, r2
 800c08a:	2200      	movs	r2, #0
 800c08c:	602a      	str	r2, [r5, #0]
 800c08e:	461a      	mov	r2, r3
 800c090:	f7f6 fc28 	bl	80028e4 <_lseek>
 800c094:	1c43      	adds	r3, r0, #1
 800c096:	d102      	bne.n	800c09e <_lseek_r+0x1e>
 800c098:	682b      	ldr	r3, [r5, #0]
 800c09a:	b103      	cbz	r3, 800c09e <_lseek_r+0x1e>
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	bd38      	pop	{r3, r4, r5, pc}
 800c0a0:	200020c0 	.word	0x200020c0

0800c0a4 <__ascii_mbtowc>:
 800c0a4:	b082      	sub	sp, #8
 800c0a6:	b901      	cbnz	r1, 800c0aa <__ascii_mbtowc+0x6>
 800c0a8:	a901      	add	r1, sp, #4
 800c0aa:	b142      	cbz	r2, 800c0be <__ascii_mbtowc+0x1a>
 800c0ac:	b14b      	cbz	r3, 800c0c2 <__ascii_mbtowc+0x1e>
 800c0ae:	7813      	ldrb	r3, [r2, #0]
 800c0b0:	600b      	str	r3, [r1, #0]
 800c0b2:	7812      	ldrb	r2, [r2, #0]
 800c0b4:	1e10      	subs	r0, r2, #0
 800c0b6:	bf18      	it	ne
 800c0b8:	2001      	movne	r0, #1
 800c0ba:	b002      	add	sp, #8
 800c0bc:	4770      	bx	lr
 800c0be:	4610      	mov	r0, r2
 800c0c0:	e7fb      	b.n	800c0ba <__ascii_mbtowc+0x16>
 800c0c2:	f06f 0001 	mvn.w	r0, #1
 800c0c6:	e7f8      	b.n	800c0ba <__ascii_mbtowc+0x16>

0800c0c8 <__malloc_lock>:
 800c0c8:	4801      	ldr	r0, [pc, #4]	; (800c0d0 <__malloc_lock+0x8>)
 800c0ca:	f7ff b870 	b.w	800b1ae <__retarget_lock_acquire_recursive>
 800c0ce:	bf00      	nop
 800c0d0:	200020b4 	.word	0x200020b4

0800c0d4 <__malloc_unlock>:
 800c0d4:	4801      	ldr	r0, [pc, #4]	; (800c0dc <__malloc_unlock+0x8>)
 800c0d6:	f7ff b86b 	b.w	800b1b0 <__retarget_lock_release_recursive>
 800c0da:	bf00      	nop
 800c0dc:	200020b4 	.word	0x200020b4

0800c0e0 <_malloc_usable_size_r>:
 800c0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0e4:	1f18      	subs	r0, r3, #4
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	bfbc      	itt	lt
 800c0ea:	580b      	ldrlt	r3, [r1, r0]
 800c0ec:	18c0      	addlt	r0, r0, r3
 800c0ee:	4770      	bx	lr

0800c0f0 <_read_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4d07      	ldr	r5, [pc, #28]	; (800c110 <_read_r+0x20>)
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	4608      	mov	r0, r1
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	602a      	str	r2, [r5, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	f7f6 fb90 	bl	8002824 <_read>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	d102      	bne.n	800c10e <_read_r+0x1e>
 800c108:	682b      	ldr	r3, [r5, #0]
 800c10a:	b103      	cbz	r3, 800c10e <_read_r+0x1e>
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	bd38      	pop	{r3, r4, r5, pc}
 800c110:	200020c0 	.word	0x200020c0

0800c114 <__ascii_wctomb>:
 800c114:	b149      	cbz	r1, 800c12a <__ascii_wctomb+0x16>
 800c116:	2aff      	cmp	r2, #255	; 0xff
 800c118:	bf85      	ittet	hi
 800c11a:	238a      	movhi	r3, #138	; 0x8a
 800c11c:	6003      	strhi	r3, [r0, #0]
 800c11e:	700a      	strbls	r2, [r1, #0]
 800c120:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c124:	bf98      	it	ls
 800c126:	2001      	movls	r0, #1
 800c128:	4770      	bx	lr
 800c12a:	4608      	mov	r0, r1
 800c12c:	4770      	bx	lr
	...

0800c130 <_init>:
 800c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c132:	bf00      	nop
 800c134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c136:	bc08      	pop	{r3}
 800c138:	469e      	mov	lr, r3
 800c13a:	4770      	bx	lr

0800c13c <_fini>:
 800c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13e:	bf00      	nop
 800c140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c142:	bc08      	pop	{r3}
 800c144:	469e      	mov	lr, r3
 800c146:	4770      	bx	lr
